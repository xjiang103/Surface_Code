%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 26.2
%%For: Mark Saffman
%%CreationDate: 4/26/2022
%%BoundingBox: 0 0 385 282
%%HiResBoundingBox: 0 0 384.1574 281.9141
%%CropBox: 0 0 384.1574 281.9141
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.2.1 x197 R agm 5.5 ct 6.4%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 10581 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD47FF52A8FD5BFFA8FFA8FD11FFA8FFFFFFA8FFA8FD07FF7D5227
%FD1BFFA8FFA8FD05FFA8FD2BFFCAA8FD07FF7DFFA8A8A9A8A8FF7DFD0FFF
%A8FF7DA8A9A8A8FF7DFD04FFA827527DFD19FFA8FFA8A7A8FF7DFFA8A8FD
%29FFA8A87D7DFD0AFFA92BA9FD15FFA92BFD08FF7D7D7D52FD1DFF7F54FD
%2DFFA127A87DFD0AFFA92AA9FD15FF8531AFFD08FF527DA8FD1DFF5555A9
%FD2CFF7D7D7DA8FD0BFFA9A9FD0FFFCAFFCACAA8CAA1A2A1CAC3CAA1CAC3
%CAC3CACACAA1CAC3CAA1CAC3CAA1CACAFFCAFD11FFA9FD3CFFA9FD09FFCA
%FFCACAC3CAC3CAC3FD04CACBA2FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFFD06CAC3CAC3CAC3CACAFD09FFA9A9FD35FF7DA8A8A85252A8A9FFFF
%CAFFFFFFA1CAA1C9A1CACAFD09FFA9A9FD10FFCAFFCAFFFFFFA8FFFFFFA8
%FFCACAA8CAA1C3A1CACAFD05FF84FD35FFA8527DA8527D7EA9FFFFC3CACA
%C3FD0ACAFD07FFA9FD07FFCFCACACAC3CAC3CAC3CACACA76A1FD04CAC3CA
%C9FD04CAFFFFFFCACAC3FFC3CAAFA9FD34FFA8525227FF527D53FFFFCA8C
%BCCACAA1FD04CAFFCACAA8CAA1CACAFFCAFFA9A9FFCAFFFFCACAA1FD04CA
%FD07FF7D5252AFFD06FFCACAA8CAA1C3A1CACAFF9AB49AFF85FD34FFA8A8
%A87D7DFF52A8A9FFC3BB9AC3CAFD04FFA8527DFD04FFCACAC3C3FFFFA9FF
%9ACAC3CACAFD0CFFA82752A8FD0DFFCACAC3C393C3FFA9FD31FFA8FD06FF
%A8FFFFAFA9AFFF9393A1FD05FF7D5227A8FD04FFCA938CCAAFAFA18C93FD
%0FFF7D7D7D52FD10FF9A8C9AFFA9FD31FFA8FFFFA8FD07FFA2FFFFC2C3FD
%06FFA8527DA8FD05FFCAC3CAFFA2CACAFD11FF527DA8FD10FFCAC3CACAA9
%FD31FF7D7D527D7DFFFFA87DA8767076A8A8A8AFFD05FF7D5252A8FD05FF
%A884A876709AA884A8FD22FFA8A8A79A70A184A8A8FD2DFFA827A8FF527D
%FFA87D7DA1709AA8A8A8FD07FF7DA8FD06FFA8A8A7A170A184A87DFD21FF
%FD04A87076A1A87DA8FD2DFF7D52A87DA8FFFFFFA8FFCBA2CAFD15FFA8A2
%FD04FFA8FD24FFCAA1FFFFFFA8FD2DFF7DA8FD07FFCFFFA9FD17FFA9FFFF
%FFA8FD25FFAFAFFFFFA8FD2EFFA8FD05FFA8A8A8FFFFA9FD16FFA9A9FD04
%FFA8FD25FF84FFFFFFA8FD34FFA8FFFFFFA9FD17FFA9FD05FFA8FD24FFA9
%FD04FFA8FD33FFA8A8FFFFA9A9FD15FFA9A9FD04FF7DFD25FFA9FFFFFFA8
%A8FD33FFA8FFFFFFA9FD17FFA9FD05FFA8FFA87DA8FD08FF7DFD04FF7DFF
%FFFFA8A8FD04FF7DFD08FFA9FD04FFA8FD2CFFA8FD05FFA8FD04FFA9FD16
%FFA9A9FD06FFA8FF527D7DFD06FF52F827FFFF27F827FFFF27F852FFFF27
%F852FD07FFA9FD05FFA8FF7D52A8FD27FF7D7DFD04FFA8FD04FFA9FD17FF
%A9FD05FFA8FFFFA8527DFD06FF27F8F8FFFF27F827FFFF27F852FFFF27F8
%52FD06FFA9A9FD04FFA8A8FFFF7D7D7DFD26FF7D7D52FFFFA8A8FFFFFFA9
%A9FD16FFA8A9FD06FFA8FFA87D7DFD06FFA852A8FFFFA87DA8FFFFA87DFF
%FFFFA87DA8FD07FF84FD05FFA8FFA8A852FD27FFA87D7DFF7DA8FD05FFA9
%FD17FFA9FD07FF7DFD21FFAFA9FD06FFA8A8FD2BFFA8FFF8A8FD05FFA9FD
%16FFA9A9FD07FF2752FD21FF84FD06FFA8F8FD2CFFA8A8FD06FFA9FD17FF
%A9FD07FFA8A8FD21FFA9FD07FFA8A8FD33FFA9A9FD15FFA9A9FD2AFFA9FD
%34FFA87D7DFFA8FFA8FFA9FD17FFA9FD2AFFA9FD34FF527D7D52A827A77D
%A9FD16FFA9A9FD2AFFA9FD34FF52FF7D52A87DA87DA9FD17FFA9FD29FFA9
%A9FD34FF7D7D7D52A87DA87DA9FD16FFA8A9FD2AFF84FD38FFA8FFA8FFA9
%FD17FFA9FD29FFAFA9FD3CFFA9FD16FFA9A9FD2AFF84FD3CFFA9FD17FFA9
%FD2AFFA9FD31FFA8FD0AFFA9A9FD15FFA9A9FD2AFFA9FD30FFA8A87D7DFD
%07FFA930A9FD15FF8531AFFD28FF7F7FA9FD2FFFA852A852A852A8FD04FF
%7E087EFD15FF7E08A8FD28FF3108FD30FFA87DA87DFF7D27FFA87D7D7E7E
%7E7DA852FD0FFF7D7D7D7F7E7E7D7D7DFD21FFA87D7D7E7E7F7E7D7DA8FD
%29FFA8FFFFA87DA87DA87DFFFFFFCFFFA9A9A9FFA8277DFD11FFA8A9A8FF
%A8FD23FFA8FFA9A97EFFFFFFA8FD26FF7DFFA87DFFFFA87DFD0AFFA8FFFF
%FFA8FD68FFA87D7D52527D7DFFA8FFA8A97EA9A8FFFFFF527D52A8A8FD0F
%FFA8A9A9FD28FFA97EFD2EFF527D7D7DFF527DFF7DA87EA97E7E7DA8A87D
%527D5252A8FD0BFF7D7D7D7E7E7E7D7D7DFD22FF7D7D7E7EA97DA77DA8FD
%29FFA87D7D5252A87DFFA8FFA8FF7EAFFFFFA8FFFFFFA87D27A8FD0CFFA8
%FFA8A9A8FFA8FFCFFD21FFA8FFA8A97EA9A8FFA8FD2AFF7DFD05FFA87D7D
%527DFD07FFAFFFFF7D52FD13FFAFFD54FFA8A8FD05FFA8527DA8527D7DFF
%FFA8FF847E7EFFA8277DFD0FFFA8FF7E7E7EFFA8A8A8FD21FFA8FFA8A97E
%A9A8FFA8FD2CFFA87D527D7D7D52FFA87D7DA87E7F7DA87DFD0FFFA8A77D
%857E7E7DA87DFD21FFA8A87D7E7EA97EA77DA8FD2CFFA87DA852A8A8FD05
%FFA9A9A9FD15FFA8A9A9FD28FFA97EFD30FFA87DFDFCFFFDFCFFFDFCFFFD
%3AFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0CFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFD05A8FFA8FF
%A8A8A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8FD0FFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFAFFD08FFA87DA827A8FD1AFFA9FD1BFFA8FD08FFA2A8FF
%7DFD15FFCACAFD17FFCACAA8FD07FFA8A87D7D7DFFA87D7DFD15FFA8A8A8
%A9A9FD18FFA8FD08FFA852A877FD13FFFD04CAFD16FFC3CACAFFA8FD0BFF
%A87DA87DFD14FFA97E52A87DA9FD18FFA8FD08FF7D525252A8FD11FFC3CA
%FFFFC3FD14FFCAC3CAFFFFA8FD0BFFA8FF7D7D7DFD14FFA9A87D52527EAF
%FD17FFA8FD09FFA8A8A8FD11FFC3CAFFFFFFCAFD14FFC3FD05FFA8FD0DFF
%A8FD15FFA8A8527E59FFA8FD17FFA8FFFF7D7DA8FD0DFFFD07A9FFFFFFC3
%CAFD04FFC3FD09FFFD07A9FFFFFFC3FD11FFA8FD0AFFA8FFFD04A8FD07FF
%84AFA8FFA8FFA8A9A8FD16FFA8FF7D7D527DA8FFA8FD09FF7FA9A9FFA9A9
%A9FFA9A9CACAFD05FFCACAFD06FFA97FFD04A9FFA9A97FA9C3FD0EFFA87D
%FF52FD0BFF52A85252A87DFD06FFA9A9AFFFA8FFA9FFA8A9FD16FFA8A827
%5252A8FFFFFFA8FD06FFA97FFD09FFA89BA9FD05FFCAFD06FF7FA9FD09FF
%77A2FD06FFA8FFFFFFA85252FF7D527D277DFD09FF7D52527D52A87DFD06
%FFA9A8FFA8AFA8FFA8FF84FD16FFA8FFA8FD05FFA8FD07FF7FFD0AFFCAA2
%A9FD05FFCACAFD04FFA9A9FD09FFCACA7FFD0BFF7D7DFFFFA8FFA8FD0AFF
%A87DA8A1A8A1FD07FFA8FFAFFFA9FFAFFFA9FFA9FD15FFFD04A8FF7DA8FF
%FFA8FD05FF7FA87DA87D7DA8FD04FFCAC3FF7FA9FD04FFCAFD05FF7FFD0A
%FFC3CFFF7FFD05FFA8FFFFFFA87D52FD05FFFD16A87D7E7DA87DA87DA87D
%A87D7EFD15A87DFFA87D277DFD08FFA9A97D7D5252527DFD04FFC3FFFFFF
%7FFD04FFCAFD04FF7FFD0AFFCACAFFFFA9A9FD05FFA8FFFFFF5252FD05FF
%A8A8FD14FFA9A8FFA8FFA8FFA8FFA8FFA8FD15FFA8FFA852527DFFFFFFA8
%FD04FF7FA9A852FD047DFFFFFFC3CAFFFFFFA9A9FFFFFFC3FFFFFFA9A9FD
%0AFFC3FFFFFFA9A9FD04FFA8FFFFFFA85252FD05FFA8FD15FF84FFA8AFA8
%FFA8AFA8FFA8A984FD14FFA8FF5252A8A8FD08FF7FFD09FFCACAFD05FFA9
%FFFFFFCAFFFFFFA9FD0AFFC3FD05FFA9A9FD04FFA8FFFFFF4B7DFFA87DFF
%7DA8FD14FFA8AFAFFFA9FFA9FFA9FFA9FFA9A9FD14FFA8FFFFA87D7DFFFF
%FFA8FFFFFF7FFD0AFFCACAFD05FF7FA9FFFFC3FFFFA97FFD09FFCACAFD06
%FF7FFD08FFA87DFF7D5252277DFD14FFA9A8FFA8AFA8FFA8AFA8FFA8FFA8
%FD14FFA8FD0BFFA9A9FD0AFFC3FD07FF7FFFFFCACAFF7FFD0AFFCACAFD06
%FFA9A9FD06FF7D7DA8FFA87DA87DA8FD14FFA8FFA8FFA9FFA8FFA9FFA8FF
%A9AFA8FD13FFA8FD04FF7DFFA8A8FFFFA97FFD0AFFC3FD09FF7FFFCAFF7F
%A9FD09FFCAC3FD08FFA9A9FFA8FFFFA87DA852FD05FFA8FD13FFA8A9A8AF
%A8FFA8AFA8FFA8AFA8FFA8A8A8FD12FFA8FFFFFF7DA8FF7D52FFA9A9FD0A
%FFCACAFD0AFF7FC47EA9FD0AFFC3FD0AFFA97FFFFFFFA87D7D7DFD19FFAF
%A9FFA9FFA9FFA9FFA9FFA9FFA9FFA8FD13FFA8FFA852527DFF527CA8A9A8
%FFA8FFA8FFA8FFA8FFA8C3A8FFA8FFA8FFA8FFA8FFA8FFA1A8AEFFA8FFA8
%FFA8FFA8FFA1CAA8FFA8FFA8FFA8FFA8FFA8A9A8FFFFA852527DFD05FFA8
%FD13FF84FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF84FD12FFA8FFF87D52A8A8
%FFA8FD0CFFCACAFD0CFFCAFD0BFFCAFD0EFFA8FFFFFF7DCAFFA8A8FFA8A8
%FD12FFA8AFA8FFA9FFA8FFA9FFA8FFA9FFA8FFAFA9A9FD11FFA8FF7D7DA8
%FD10FFC3FD0DFFC3FD0AFFCAC3FD0DFFA8FFFFA8275252FF7D527D27A8FD
%11FFA8A9A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8A9FD11FFA8FFA8FFFF
%A8A8FD08FF7DA87D7DFFCACAFD0DFFCAFD0AFFC3FD0FFFA8FFA87D52A8FF
%A87DA87DA8FD12FFA8FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA8FD11FF
%A8FFA852527DFD08FFA827525252A8CAFD0EFFC3FD09FFC3CAFD11FFA87D
%A87DFD05FFA8FD11FF84FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8A9A8
%FD10FFA8FFFFFFA8FFFFFFA8FD05FFA8A87DA87DCACAFD0EFFCACAFD07FF
%CACAFD10FFA8FFFF7D52A8FD16FFA9A9A9FFA9FFA8FFA9FFA8FFA9FFA8FF
%A9FFA8FFA9A9FD10FFA8FF7D525252FFFFFFA8FD09FFC3FD0FFFCAFD08FF
%CACAFD0FFFA8FFFFA87DA852FD05FFA8FD10FFA9A8AFA8FFA8AFA8FFA8AF
%A8FFA8AFA8FFA8AFA8FF84AFFD0FFFA8FF7DFF7DA8FFFFA8FD09FFC3FD10
%FFCACAFD06FFCAC3FD13FFA8A8A17DFD16FFA8FFA9FFA9FFA9FFA9FFA9FF
%A9FFA9FFA9FFA9FFA9FFA8FD0FFFA8A8A8FFA87DFFFFFFA8FD07FFC3CAFD
%10FFCAFD07FFC3FD11FFA8FFFFFF7D7D7DFF7D7DA87D7DFD0FFF84AFA8AF
%A8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8A9A8FD0EFFA8FF7D7D277D
%FD0AFFCACAFD11FFCAFD06FFC3FD13FFA8FD06FF7D27A852A8FD0EFFA9A9
%A9FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9A9FD0EFFA8FFFF
%A8FFA8FFFFFFA8FD05FFCAC3CAFD11FFC3FD05FFCACAFD12FFA8FD07FFFD
%05A8FD0DFFA8A9A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8
%FFA8A9FD0DFFA8FD0EFFCACAFD12FFCAFD04FFCACAFD14FFA8FD18FFA9A9
%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA8FD0DFFA8
%FD08FFA8FD04FFCACAFD13FFC3FFFFFFCAC3FD14FFA8FD0BFFA8FD0BFFAF
%A8A8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8FF84
%AFFD0BFFA8FD07FFA8FD04FFCACAFD14FFCAFFFFCACAFD2CFFA8A9A9FFA8
%FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8A9AF
%FD09FFA8FD08FFA8FFCAC3CAFD15FFC3CAC3CAFD16FFA8FD07FF7D7DA87D
%A8FFA8FFA8FFA8AFA8A984A8A8FFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%A8AFA8AFA8AFA8AFA8AFA8AFA8AFA8A984A9A8FFA8FFA8FFA9A8FD07FFA8
%FFCAFD19FFCAFD20FF7D527D27A8FFFFA9FFA9FFA9FD27FFAFFFA9FFA9FF
%AFFFA8FD08FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFAFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD
%07FFFD07A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFFFFF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD49
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD21FFA8
%52FD3FFF277DFD3DFF7D52FD3FFF7D7DFD3DFFA852FD3FFF7D7DFD3EFF7D
%A8FD3FFFA8FD9BFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.b0f8be9, 2021/12/08-19:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmp:CreatorTool>Adobe Illustrator 24.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2019-12-04T20:35:20-06:00</xmp:CreateDate>
         <xmp:MetadataDate>2019-12-04T20:35:20-06:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-12-04T20:35:20-06:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>188</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYqhdS1bS&#xA;tLtxcaneQWNuzrEs1zKkKF32VAzlRybsMVU9L1i21GS/iiSSOXTrprO6jlADCRUSVSKFvheKVHX2&#xA;I6YqjsVQU0usj656NrbPwC/o/ncSJ6pK/H61IH9GjbDj6lRvt0xVI7LzffX+p3Oj2NtYy6zpZj/T&#xA;dsb2RUhWYcozC4tWaY8ftBkSh2zJy6TJDHHJIemd18GAmCSOoZFE98bqdZYoktFCfVZUkZpHJB9T&#xA;1IzGqpxNONHavtmMzV8VdirsVQM02tiO7MFpbPIhX6gr3MiLKpA5GZhA/pEb0Ch6+2KpNp/m291P&#xA;UbjTNPt7GbUNJlSHX4TeSgQGVFkQwMLZvX+EsDyEfxLT3zJzaTJjhCch6cgJHwNMIzBJA6Mghe+N&#xA;zcLNFElqpT6rKkjPI4K/H6kZjQR0bYUdqjfbpmMzYR+dF1qsPlfTotLmkiub3W9Ks2EN1NYGSO4v&#xA;I43ha6tgZoUkB4s6AkDoD0xVf+Tmq6neeWb2w1Wd7jU9D1S8026keY3YHBxNEiXL/vJ1jgnjT1JA&#xA;HJB5b4qzvFXYq7FXYq7FVkxmEMhgVXmCkxI7FFZqfCGYK5UE9TxPyxVK9T1TVtPgjvJrazTToITP&#xA;q1xJdyI0CoOUhiUW7CUKAaFmSvtk8eMzkIx3JNBBNC1ujazqOqwC/t7e0bSLqBbjS7pLqRpJRIoZ&#xA;BLEbdViqDvR3p4Yc2KWOZhL6omisZAiwmtu1w1vE1yiR3BRTNHG5kRXI+JVdljLKD0JUV8BlaVTF&#xA;XYq7FXYq7FXYq7FXYq7FWO+efI2k+c9HXStUmnhtlcyVt2jBJaN4iGWVJUNBISp41VgGUgiuKo3y&#xA;/oKaQL8iYzyX90bmRyvGgWKO3iSlT9iGCNSe5Fdq0xVE6nrOlaWts2o3KWwvbmKytTIaepcTnjFE&#xA;v+Ux6Yqkeufmf5F0KRU1XVo7YvdTWKlg9DcW9v8AWZI1IX4yEKr8NauRGPj+HFV/l/QfLkGvahqe&#xA;nWduk8yxuL2FVDyrOvqOWkG8gdqN8RNTvmfn1WWeKMZSJj3dNuXua4wAkSAyNZI2j9RWBjIrzBBF&#xA;PGuYFtpBuktfzPofIpDc/W3U0ZLNJLsqfBhAsnH6cr8WPv8Adu5I0WXqOH+tUf8AdU1+mr1/7jR7&#xA;yRT0kf0Il+kSSrJ/wmPGegK/l4jnOP8Asj9wr7XfWvMzbpp1ogPT1Lt+Q+apbuP+GxufcPn+xeDA&#xA;P4pf6Uf8V+hvj5of/dljB/sJpqf8PDXH1+S3gHSZ+IH6Cx3y95TmsNX1a7sBplrefWDHNcR2EivI&#xA;JIIJX5MLkM1XPI8ifiqe+Z+p1OonjhGU7jXKjtRkO/7q22a4flwSRCX+nH/EMi+peYe+qRV70taD&#xA;6KynMDhl3/Y2eJh/mH/TfsQereWbjWbF7DV5rLUbGQqZLS7sI54mKnkpMcjspoRUbY8Mu/7F8TF/&#xA;MP8Apv2LtM8uXmlWUdjpdxaWFlFX0rW1sUhiWu54ojqo+7Hhl3/YviYv5h/037FaQa9C3B9WsV2q&#xA;PVtX5Ee9LlB+GJ4h1Hy/ayHhH+Cfwl/xxZ9Y1tf+lnpsnt6MkdPp+sSYLl3j8fFPBi/mZB8Qf96F&#xA;8V75ieojg0+5IpUrdypT6BBL+vCJS8vn+xEseEczMf5o/wCKC/8ASetR/wB9o0kn/MNPA4/5LNb4&#xA;8Uu78fYx8HEeUx8Qf0cTv8R20Y/0q0vLU9w9tLIo+bwCWMf8Fj4g6g/Jfykj9Moy/wA4D7DR+xFW&#xA;Wr6VfllsryG4dPtpFIrMv+soNR9OSjMHkWrJgyQ+qJHvDWqadperWsumahEl1bOEae1c7MvKq81B&#xA;3UsnQ7GlMuw55Y5cUDUg1ShY3GyA8laZY6b5V0y2sYRBbm3jlESk8Q0iB34gkhQWJNBtl+vyyyZp&#xA;GRs2fsYY4gRFJ3mIzdirsVdirsVdirsVdirsVdirsVaZ0UqGYAuaICaVNCaD6ATirC/zG8h615ti&#xA;W2tNVtLC1+ryRUubGW7ljmd0dLmB0u7QJLEY14Eq1N/GmKpNbeRPMsGlQTSelca15d1rVNXtaxIY&#xA;dVTUY7hpI+Bnj9AuL9oUMj/AyVIdOqrIPKmk6nofl46Pbut1qemabY2ccsjEJJNBaiIO7UJ4llqd&#xA;q5dmvwo1z3ZYRHxPX9Ni/cwH8sp7nUnm0Wa9s9Vls5JFiF6XkjjCux9SCEygXFTVv7tSAft9FzS6&#xA;YmXpsGu/8bvZ9sxjjrKIygJAfTQJ25E16fmf6vV6pH5bjZR9dvbq6YdFErW0QH8oitvRQr/rcj75&#xA;sBj7yfx7nljrD/DGMfhxH5yv7Keeaf530G7/ADFn8nx6LAhhv5tO9e21BzqKmGzW6N1LaLGjR2rc&#xA;/SEvrH49qY+FHuY/ncvf9z0Q6Je255abqc8VP90XZN5CfmZD6/3Sj5Y8BHI/p/b9qfzMZfXAHzj6&#xA;T9np/wBikEf5lWa+cLPyxdLFHeTerHcSRSrNEso4mFVcUIL0YFXUEGnzNI1I4xA83PPY8vy8s8b4&#xA;RVWKNdfltuDVO82eb4vK2m63fgB7uS/hitID1d2tbflQeyVOZeuzeHjgevD/AL6Ti9k6A6rMYfwj&#xA;cnu2/Wmmk6xqvmKyjv8ATpLey0+WvBnDT3PydKxJE48DzyiEzMWNgnPp8enkYTEpTHwj+kkf6VGj&#xA;QPU3vNRvro9RSY2wH/SILf8AGuS8PvJ/HuaPzVfTGEfhxf7rid/hby6f72wiuD43I+sH75eZx8KP&#xA;cv53N0kR7tvupVj8u+X4gRHplogO5CwRj9S4Rjj3BidXlPOcvmXhMT3tl+Z1zqkyBtDXzeNBkT63&#xA;JJyjurCBILZNMkX6qsaXE6ytMjep9r4ab4eCPcx/M5f50vmXusvlzy9LT1dLtJKdOUETUr81wHHH&#xA;uDKOrzDlOXzKz/C3l8f3NklsfG15W5++EocHhR7mX53N1kT7/V99tHy/w/3k1K+tTWp/ffWK/wDS&#xA;WLj8MfD7ifx77T+av6oQl8OH/c8KB1LRtVmSt3FYaykYrH9YiNvOlP2llBlWvyVPnkZQPWi3YdRj&#xA;H0meP3HiHy2/3zz/APLnXL+6/MvUIf0mt3b/AFb0WhldiwSNyyiFvUuhJ6TsRvKahiR0zD00ycp3&#xA;vb8d/wB7v+19NCOiieDhPFdjz79o1Y/o8xT1Ly3/AMo7pf8AzBwf8mlzc6r+9n/WP3vGw+kJjlDJ&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV51+dNzrNrpuh3WhiRtagu9Sl0tYYxNIbpPLmqtAEiKvzb1AKLxN&#xA;elMVVdPH5gW+u2MFpc3Wpwt6B8xTatDDb2casgZzYtCsUvrcSBxCPFUUYo9Tiqf63J5uGr21tpV/&#xA;p1tbXKuQt5ZzzuDEAWCtHdQK5PKoXiNgTXbFWGaH5f8AzUHm7VXuNXsvQba4kktZpIZVdT6YSFb1&#xA;WWldtxTx7FlCXDG+Xq6+btM2ownFUeHi9NemiO/e/wBds68t6Lf6VG8M76d9XoBBFp1i1iFP7XLl&#xA;cXIau3YZGMQOQcDLmnkNzJkfM2nWSann9p+Vc8XnN9dm1ZZNOGrza/b6fHbenOt3PYLYMr3frNyh&#xA;Ea8uCxrU/aJApir0DFUg1rRdevrz1Le50pbZCrQx3umyXcqMtDy9QXcA+1uKIKYDEHmGyGWcfpJH&#xA;xYX5W0H81U8zapPc6vZenHOyyyzWs08bu0MRHpRC9Up8PHw/hhnGXoJ/mnr/AEpOw1GfCcREeG7H&#xA;KJB+kczf6992caLN5hTUbiz1i7sr2kayQvY20tsY9yGE6yT3X26jhQj7LYurTvFXYq7FUpXyj5TT&#xA;Wm11dFsF1tzV9VFrCLsniFqZ+PqfZFPtdMVTbFXYq7FVsqu0TqhUOVIUuOSgkbVUFaj2qMVYTr+g&#xA;fmA2myNp9/pBvUoYmh0uWKYCo5enI1+3ElcqyR22G7naLMBkHGfT52R8RaD8j2P5oJ5Rsy2qaaHM&#xA;aNaw3djcSOIii8Q0qXo96fD/AEGTmvxJ3/Ol97VqTAkcFfSLoVuzbQ7q6utKt5ruSKW5IYTS26lI&#xA;XZWKlogzSHgaVWrbjfK3GR2KuxV2KuxV2KuxV2KuxV2KuxVC3ul2F7c2FzcxepNpk7XVi/Jl9OZo&#xA;JbYtRSA37q4kWjVG9eoBxVFYqlUDLdavOr3JlS1ZZIIUaNo15Jw+PivMOHD7Mab7Vp8KqpY/8djU&#xA;/wDnh/xA5fk/u4/FiOZTHKGTsVdirsVdiqXaX/vdrH/MYn/UJb5fm+mH9X/fSYx5lSvpFtNRh9Ob&#xA;0Ddv6k/qMiwkRBEavIFuZUqFCkdK/Ohkm2KuxV2KuxV2KuxV2KuxV2KpZoEaS+WNNicVR7KFWFSK&#xA;gxKDuMv1X97P+sfvYw+kKml/WBJcI0zzW8RWKN5RErc1rzosSpRfs0qK9e1K0MkfirsVdirsVdir&#xA;sVdirsVdirsVYv5513zBoyadPpQtpIrm4Ntcw3EcjyAFGl9aMpLHX0o4XJi4kv2ZafEqjdB812Gu&#xA;eXbDXLW3uY7XVUWSxhmQJNIkil42ChiAHT4wS32dzTFUfo8E0GmwwSqymEGNFbhyEaMVj5en8FeA&#xA;FaYqpWP/AB2NT/54f8QOX5P7uPxYjmUxyhk7FXYq7FXYql2l/wC92sf8xif9Qlvl+b6Yf1f99JjH&#xA;mUTfi5NpILavqmlOPHlxqOXHn8HLjXjy2r12yhkwLzr5bub2Wy1DRNMJ1XRLO5CeoIebSQRCbTYp&#xA;AzD1k+tKksdG4q6mtDyGKs08uLqo0GwOrytLqbQo92zokbCRxyZCsfwDhXjt4Yqlv5jad5o1LyNr&#xA;Vh5VvPqHmC4tmSwugeDK9RyVX/3WzpVVfqpPIUpirz//AJxp8k/md5T8uanZ+eJnEck6NpWnyXC3&#xA;TQKAxmYOjSKqysykKH6gmgJ3VY3+UH5bfnrov5vaprnmvU5JNCnE/wBbma6WeO/O62/CAMWj9OoZ&#xA;eSLxUcRsaYqmP5h/l9+duqfnXpGv+X9Xe38qwNbE8bn047eNCPrKPbEj1TLRv2TWoBpTFU5/5yM8&#xA;mfmh5p0LSrfyJePA0Fw76jbRXP1R5VKj0m9SqArGwaq8u4NDTZV6L5OsdcsPKmkWWvXYvtatrSGL&#xA;ULsVPqTqgDtyO7b/ALR+1174qnGKpd5b/wCUd0v/AJg4P+TS5fqv72f9Y/exh9IWX1vx1S3vPqzN&#xA;HAC7TQojSFipjo9T6hUK9QEBJPyo1DJgmmXvmfTfN1va6e9zfaPrOoyQQT6gby4jg0+3gW8aSJ2Z&#xA;wxmmuJo45XanFY1FQuKvT8VdirsVdirsVdirsVdirsVQ97p1hfIiXltHcrGWaMSor8WeNomZaj4S&#xA;Y5GSo7EjvirHrn8vtIk1/wAs6lbs9lZ+VYLqHTtOtWaGIm5EKLyCFapGkJAQ7Hlv03VZTiqXWP8A&#xA;x2NT/wCeH/EDl+T+7j8WI5lMcoZOxV2KuxV2Kpdpf+92sf8AMYn/AFCW+X5vph/V/wB9JjHmUxyh&#xA;kxy28lWlt59u/OEV1N699YLYXNm7M8X7t1ZJIwzUj2BDKooevWtVWR4q7FXYq7FXYq7FXYq7FUu8&#xA;t/8AKO6X/wAwcH/Jpcv1X97P+sfvYw+kI6eJZoZIWZlWRShZGKOAwpVWWhU+BGUMkk8jeVv8K+Wb&#xA;XQvrs2oLaSXDJeXJLTOs1xJMvqMSeTKsgUt3pXbpiqfYq7FXYq7FXYq7FXYq7FXYq7FXknnryXqG&#xA;s+aPMl3eeUW8xQvpMUHl66luLRVguEPxi1WWVXhldpi5k4rT0x8Z5AKqgND8v6pNLo935qhnmu9J&#xA;uJh5m+s3USenZSad6dtJdqs6wzwijBuPNeZkpWr4qz38uf0v+h4/0vz/AEj9WtPX9Wvq/wB2ePq8&#xA;vi9ThTnXflXL8n93H4sRzLLcoZOxV2KuxV2Kpdpf+92sf8xif9Qlvl+b6Yf1f99JjHmUxyhk7FXY&#xA;q7FXYq7FXYq7FXYq7FUu8t/8o7pf/MHB/wAmly/Vf3s/6x+9jD6QmOUMnYq7FXYq7FXYq7FXYq7F&#xA;XYq7FUJeavpVlKIry7htpDBLdUldU/cW5RZpSWIASMzJyPbkMVVrS7tby1hvLOaO5tLmNZre4hYP&#xA;HJG4DI6OpKsrKagjriqriqQ6TrejXWv6jbW1/bz3B4UhjlR3/cjhJ8IJPwMeLeB2OZubT5I4okxI&#xA;Hu7+Xz6NcZAk7p9mE2OxV2KuxV2KpFoGs6Rd6nq0NpfW9xM1yJFjilR2KJbW6MwCkmit8JPjtmZq&#xA;cGSMIGUSBw939KTXCQJO6e5htjsVdirsVdirsVdirsVdiqye4ggTnPIkSEhQzsFHJjRRU9yTQZKM&#xA;TLYC1JS3yrcQTeXNNMMiShLaFHKMG4usS1U06EeGX6yJGWVj+I/ewgfSE1zGZuxV2KuxV2KuxV2K&#xA;uxV2KqN5fWdlEs13MkETSRQK7kKDLcSLDElT3eSRVXxJxVQfWdNTWodFaamp3FtLew2/Ft4IJI4p&#xA;H5U4Di86ChNTXbocVYv5ps0vfP8ApNo0SzCfy7ryCJwCrE3WlUBDbdcVSPS/J3nW38ueT7DTOeh6&#xA;5pmi6fZ6nqz3Imt09CJVltTYoZIrpwwb4jw4g1STqMVZ3qVt5rkuS2majYW1rQUiubGa4k5dz6iX&#xA;duKe3DFWH6H+X2v6X5m1PXLK4t7bU9S4/Xb2eJriGbiN+MCTQuvI/F9vb3zbartDxcEcXSHId345&#xA;NMMdSJ7048vax53bzhqWja3ZRSaTb20MtjrdtB9WjlmYn1YzE91dSgAU4sVUEhv8nlqW5l2KuxV2&#xA;KpRqNr5tkumbTtSsLa0IHCK4sJriQGm9ZEvLdTU/5GKsP8teQPMOja7q2qWM9vZ3+qOHvru4iN1F&#xA;MygD4YY5oHXk3J+Rfqehrtttb2h42KEL2hy8vxyaYY+Ek97N9Jg1+L1f0ve2l3Xj6H1S1kteNK8u&#xA;fqXF1yrtSnGnv21LcmGKuxV2KuxV2KuxV2KrZBIY2EbBZCDwZgWUNTYlQVqPaoxVh3mby35w1jQr&#xA;zTL++sL6yu4zHPa21lLayup/lllvJ0FDv9n6RmXodR4OUT5GPJhkjxClPyl5W836F5fs9J0++sbG&#xA;ztE4RW11ZyXUq92LSRXcCfE1WpQ9evYS7Q1Pj5jk6y5/j3bLjhwxpmNmt4ltGt5LHNdAfvZYY2hj&#xA;ZvFY2eUqPYucwmatirsVdirsVdirsVdirsVYr+Zf/KO2f/bc8v8A/dcssVedaJ5J87HW0v8AX9H1&#xA;O/uk0W7sdSupNXUR3OoS39nNHLYFLppLOHjA0g4JGVC04cqBlWUGfUvLtpbL5n8xWsWuRW99eQah&#xA;JZi6aHTY5LSOW1FwBA8p9WWD4uCtKePwFlrirWntqPmWf61p2spfSwMY3maGSxns5EJBSaym4zRt&#xA;Va0YDl3oN8zcOaEYUf7WBBtl9jp3meK6jku9ZhubZSfUgWzERYU7P6rU39swmbzlPyk80+WrFL7y&#xA;9qcFxq2nW0lvatbWEFtfXCzyKZmmuZ5pIZ5SnOVfWTiZzyPFCUxVkX5R+YdS1fRDJrV00+tJJd21&#xA;ws/1ZbkC01K8gRZUtQsPNIlQMYxxPUdcVZ7irsVSjUbXzbJdM2nalYW1oQOEVxYTXEgNN6yJeW6m&#xA;p/yMVSLT9A85wXsk0V5BbzmvrXVxG1zFN/zxSaBx4gl/h6b5m5ssDGh/YwALI9Kg8wxNJ+lr20u1&#xA;IHoi0tJbUqd68jJc3XKvtTMJmmOKuxV2KuxV2KuxV2KtNy4niQGp8JIqAfcVGKsY1DT/AD89o6nV&#xA;LKcGlYbSzms5mFf2J3vJ1X/gd+lR1y7AYiXq5IKzS9N8+xWoVNSs7VK/BBe2kt7MooOssd5AtK9B&#xA;Q08ewOolEy9KIsls1vEto1vJY5roD97LDG0MbN4rGzylR7FzlDJWxV2KuxV2KuxV2KuxV2KuxVSu&#xA;bS1uoxFdQxzxLJHMqSqHUSQussTgMD8SSIrqezAEb4qq4q81/M7y5deYvNmjaZaSpFd/ojUbu1aW&#xA;vpmay1bRLuNZCoLBHeAKxAqAcVQ1v+VXmC81K91K/uLPR7/Ur9tTuNS0ppZdQgrHFALO1unS2pEY&#xA;7VGdpI2VyzD0xQHFWfano2o3lyJbfXb7To+IX6vbJYslRX4q3FtO9T/rU9sVSG18k6zHqL3H6We2&#xA;Ykk6jbiJruWv+/Fmhkg36n4SPADambk1MZQ4d/0BgI7ozQvIGm6T5nv/ADQ13cahrepW8Vpc3dyt&#xA;qpMUJqgH1aC337E9wBXoKYTNk+KuxV2KpTqWi6ld3Jmt9fv9PjIA+rWyWLRgjvW4tZ5Kn/WxVIrH&#xA;yTrUN8836We0Y15X9r6TXU3/ABlWeGSL4vtHY79Mzc2pjKFC/wBA9zAR3ZFpWl31k0hudYu9UDgB&#xA;Vu0tFCUrUr9Wgtzv/lVzCZpjirsVdirsVdirsVdirTAlSAeJI2bw98VYxqHlvzNNZyRnXpLsGnK2&#xA;kgt4lkANeJeNFYff89suwTEZWUELNK8s+ZYLUIutPYJUlLSKKCZUBA/alRjUncgbYdRkEpWERDJb&#xA;OGeG2jiuJzczIKPOyqhc+JVAFH0ZQyVsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVad1RGdjRVBZj7DfFVH67DWnGXrT+6&#xA;l8K/y4q767Dt8Mu5p/dS9v8AY4q4XsNacZamv+6pe238uKuF7CafDLuK/wB1L/zTirRvoAKlZaUr&#xA;/cy9B/scVbN7CK/DLsK/3Uv/ADTirjewivwy7Cv91L/zTirvrsO/wy7Gh/dS9/8AY++Ku+uw7/DL&#xA;saf3Uvf/AGOKu+uw7fDLuaD91L2/2PtirvrsO3wy7mn91L2/2OKuF7CT9mXv/uqXt/scVcL2E0os&#xA;u4qP3Uv/ADTiqpDPHMpKV+E0IZWQg0B6MAehxVfirD9Z/NDQtKstUuprS9l/ROonSriCONFkeZbR&#xA;L55IxLJEpjW3fnyJHKnwg1WqqbWeq3VzaXGoG7s4dOiMpEzKxCxxO4LSs0kYWiKGavTFUZGNXkhj&#xA;kS5tW5hWqsTlCDQkqwl326YquEer8jW4t+FBQ+i9a71/3b8sVaKa36an1rYyfDzHovQVI5UPq9hW&#xA;mKtiPV+RrcW/CgofRetd6/7t+WKtCPWqJWe2qf7ykMlBt+z+933xVbM2owK8s95axW6AEyPEygb7&#xA;1JlAA6d8IFqSstJ9RuoUlhvLOUVpMYo2dVbjUgMJd6GmJBHNANqwj1fka3FvwoKH0XrXev8Au35Y&#xA;EtCPWqJWe2qf7ykMlBt+z+933xVsR6x6jAz2/p0HFvRepNTUU9X5Yq0I9aolZ7ap/vKQyUG37P73&#xA;ffFWxHq/I1uLfhQUPovWu9f92/LFULqNxrVnp8t2ZrQmGNpJA0bog4oWpy9Q9WAHTFU2xVQv/wDe&#xA;G4/4xP8A8ROKvIvMnl38wUl8zxafbXD6frV3JPCP9ElgHOwhgtZoxGTdpcRXsUbf76WNSxxS9kxQ&#xA;7FXYq7FUtutRuJLttP01Va5jANzcSAmGAMKqGAKl5GBqEBG25IqvKsyN0HLx4IiHiZPpPIDnL9Q8&#xA;+/YA70i9lJaXunO15cXE0s7RzPJIQrL9XlanpJwhHxIDslcHDRG5/AbBlE4THDGIEbFD+lH+I3Lr&#xA;3pxlrgOxV2KuxVDahqEFjAJZQzs7COGCMcpJJG+yiDbc077AbkgAnIylQbsGA5JUNupJ5Ad5/HkN&#xA;0Kmn393+81G5eIH7NlaO0aL4cpl4yu3uCq/5PfI8JPMtxzQhtjjf9KQs/wCl+kD5nzRVkFD3SitB&#xA;KBuQTtGg67/jvljiE2icUJRqXlDytqfr/pHSbS7+sv6tx60KPzfjEnJqjc8LeNa+CgdBiqQaxo/m&#xA;G7Nrc2PK7sLSa/8ArWjG7ksDOxuaxOstuCJAio6iGUqj8/jIpirIvKulz6T5X0fSrh/VuNPsba1m&#xA;krXk8MKxs1fcriqaYq7FXYq7FXnf5l6lqbadNPpk91DJZy+lZ/U7Nr93uKMpdogktI0egduNQquF&#xA;+JlIuA4R5lr5lC+U9f8AMx1vV7vVYFhsbOX0oWWyubQzWgkkUyM00kiyGPhyXiAaezrhHq2+SDtu&#xA;9OyhtdirsVdirsVQetcv0Nf8a8vq8tONOVeB6ctq/PFXl/nry7+auveaNUhs7dP0GkMCaFcx63d6&#xA;ckFwwcyzXEFlEJZyrcD6bOo4/ZY8jxVej2ljLYaNcWb30t+IEdY57ghpwnAELK4pzYV+0QDSlan4&#xA;iqmimqg9agb7fw2xVDapqMWn2b3Dq0jVCQwJTnJK54pGtdqsxpvt3O2W4cRySobefcOpQTSW2ul3&#xA;F7CLjVr+R52NTb2NxJb28LL1jVoTFJJxpRmkO534r9kXy1EYmscRXfICRPzsD3Dl3nmiu9E/4esP&#xA;9+3v/Sdef9Vsh+bn3R/0kP8AiU8KWazDqmlLGNBuJri9n5cNOupGuUdVA5yCSZjJGUFKfHwLEKRV&#xA;uQTqIz9MwATykBVeZA2I+F9xcjT4QblL6I8/PuiPM/YLPROND+onS4HsmZ4JAXMkn94zsSZDLsCJ&#xA;OdeYI2O22UTwnGTE8x+L+LDLmOSXEf7PL4Nal/vZpX/MU3/ULPlUuY9/6C24Poyf1f8AfxR+TcZJ&#xA;FmvdauJfq87WujQMYvXhIE1zIhKyBWIPpxKRx5L8TNWhUAF80xjhAscWQ70eUR098uvcBzsnaPNE&#xA;Dy7p4FPVvfpv70/8zsr/ADc+6H+kh/xK8KncaHZQQvOl9eWbRKXNybyeRUCgksUuHlhIA/mUjD+c&#xA;P8QgR/ViPtiAftZRxmRAF2UD5aub261CV9aXhqccdbBeBjVrNyP3qoxYrI7Aeqtap8I6ULVTwggZ&#xA;Y/Sdq6x8j7+d/DmC5WbIIDwonl9R/nH9UeQ+J6ipLlTioe1NZbretJQO3++08MVY9/iXzR/jL9Df&#xA;oBhonqcRr3N/Tp9X9Xh6Qj5cufw8yfT7cufw4qxjWB+eAsNcj0s8ryS956NNILArHbLPKfTAPGqP&#xA;D6IHqAyf3m4+HFXoOiAi1m2ArdXRoqFP+Ph61r9o1/a74qj8VYp+ZVrrV/5bl0vS7O8uWvucU8th&#xA;JbRzwqI2aN1N1Nbr/ehK0P2a4qwuw0zzxN5sk1fXdPvksLizk/T+mW5glhkR9NtkjhKqW9cC5gu6&#xA;CEs6l06K7Ypek+UbXULTypotrqTF9Rt7C2ivXY1JnSFVkJP+uDihF6tdvaafNNHT1qBIAdx6khCJ&#xA;X25MK+2ShGyxkaCSQQrBCkS1KooUE9TTufc5cTbABeQCKHpgVMPL8xNkbVjV7NvRHvHQNEf+AIBP&#xA;iDkMg3vvZQOyZ5WzdirsVdiqB14V0TUBtvbS1DKXBHA1HEUJ+WKvMPzUfU38xRWWlR3fl6e5VRL5&#xA;pm1CTTtJkJACpILf1fWmovBQ/pOaUD8aYqzbybaJb/l9pzD4p7nT47m8nZnd5biaBXlld5WlkZmY&#xA;9Xdj2rirJkrwWp5Ggq22/vsBirG7+yfzFNqKxy+lb2kM9jYTqW2vJY2imnHAr/chvSUqwYN6g2zM&#xA;n+6xcP8AFPc/1f4R8fq93CWPMsAX8l/M5uopbvUrFoo0teEOm281jEslnPaT+oYVuOLNOlm8LuGV&#xA;gHHYUGGyemeWNPuNF8sWNlqM6vLZQATzciUULU8QzUPGNfhBPYYkpjEk0OZVtIiknaTVZ1Ky3YAt&#xA;42qDFbDeNSD0Zq8371PE/ZGVwF+o9fucrUyEQMUeUefnLqfcOQ+fUqEVNL11oNlsdXLSwb7Jeqpa&#xA;VAO3rRr6gA/aVyd2zYS/e4r/AIsfP+r0P+advcYjo4XIorUv97NK/wCYpv8AqFnzAlzHv/QXLwfR&#xA;k/q/7+Kjr9xO0UOmWjtHeakxiWVDR4oVFZ5wexRTRT/Oy165m6WAszl9MN/eeg+PX+iC4ku5Mba2&#xA;gtbaK2t0EVvAixwxLsqog4qoHgAMx5zMpGR3JZKmRVK72moagmnDe2t+M9+exNaxQn/WI5t7AA7N&#xA;lcvUa+bmYv3UPE/iltH/AH0v0DzvrF2v2k7QxahZoX1DTmM0CDYyoRSaDt/ep9muwcK37OZ2lyCz&#xA;CX0T2Pl3S+B+yx1cGQR9pdW95aw3dtIJbe4RZYZV6MjjkpHzByjJAwkYyFEbMgVlrX1bqp5fvvbb&#xA;92m2wGQV43DaaZc/85EzXJkt4r6yuiojpZm4mDaRHSrS3qXgVPUaghtGX+ZjT4FL0G//ADT8h6fZ&#xA;6jeXuqehb6VciyvWeC4BEzO8YCL6fKVecTjnGGX4W3+E0UIzS9B8vXMVxNJp1nNK13dmWRo0lYsb&#xA;hyeTMta+3bFUb/hjy3/1abP/AKR4v+acVd/hjy3/ANWmz/6R4v8AmnFXf4Y8t/8AVps/+keL/mnF&#xA;Xf4Y8t/9Wmz/AOkeL/mnFUl1jQfLr6hBbJpdmFgQzy0giBq9UjHTpQPX6MtgNra5HdQ/w75f/wCr&#xA;Zaf8iI/+aclS27/Dvl//AKtlp/yIj/5pxpbXWWg+XodVi5aXaGO6UwsDBEQHQF0O67bcx9IwSFx9&#xA;yg7p/wD4Y8t/9Wmz/wCkeL/mnKWx3+GPLf8A1abP/pHi/wCacVd/hjy3/wBWmz/6R4v+acVd/hjy&#xA;3/1abP8A6R4v+acVQWt+XfLcWjX8n6MsoytvKQ5ijjoeBp8YWq79xiqp5m82+VNBtwmvapY2BuVZ&#xA;YIL64igE3bj+8O670JpTFWN6n5/i0Xyzo4udKRH1C3JNtp08U1rb2sYjjaSKUCNZET14wFVRtWnT&#xA;dVkV/r6zMdO0qUfXGAD3rCtvbqw/vPUcBJXA+yikkmnKi75l4cUQOOdcPde8vLvA8z8LOzEnoEws&#xA;f0XY2cNpbzIIYFCJykDMad2YmrMepJ3J3zHy5DORkeZSBSv9ds/9/wAf/Br/AFyCUs1O8tL26i0w&#xA;TxmDae/PJaekp+CI7/7tcb/5KsD1GVz3NfNzNOfDicnXlH39T/mj7SO5M/rtn/v+P/g1/rljhoTV&#xA;Y9P1Cye2a6SJyVeGdGXnFLGweORa7VRgDQ7HodstwZjjlxc+8d4PMfFBFpHdea4IpdNj1ON47+C4&#xA;b1Et45Jo5aW0yh4GQOCrH9knkv7XjlmXSgyiYSBgT1IBGx+q/v5Ho5Gnl6Ml/wAz/fxTLRyGnm1X&#xA;UZIor65URx23qI/1e3UkrFyUlS7E8pCu1aCpCqcOoyRAGOG8Y9f5x7/d0j89iS4wHVNfrtn/AL/j&#xA;/wCDX+uYrJD3+s2NnaSXBlSQoKRxK68ndjxRFqaVZiAMjKVC23Di45CPLz7h1PwCzS/q1pa8ZrqK&#xA;S6lYy3cqsKNK/wBqlTXiPsqD0UAYwjQ82WoyicttojYDy/X1PnaL+u2f+/4/+DX+uSaEjOo22gzz&#xA;Fn9bRrh2mUwgzSW0sjcpFMcfJ2idyWBAPAk1otKZ1DOBuBkArcgcQHLc7WBt57deceSNl1KKHTdU&#xA;1GCSJ0gWSZXaQCP93ArfG7EBBtvU7ZhEUyee+TPNtxqHm7RILTzNe63Y39ndXF9HLaQxwR3AWM+m&#xA;sqRwMoTltHRyO7bjAllN9+U/kO+W9W6sJJF1CZ7i6X63dgGSRndivGUcBWaSgWgHNwNmNVDIdHBF&#xA;pIDyFLm5oG49PrD0px7eHfFUbirsVdirsVYxDL9Yea87XTmRP+MYAWP70UH5nMgitu5pG+6rgS7F&#xA;VG6jkeA+lT1kIkhr09SMh0r7clFcIO6CyO0uY7q1huY6+nMiyJXrRhUVygijTaDargS7FXYqg9a5&#xA;foa/415fV5acacq8D05bV+eKvL/NXlTQpfOuu3epefptCOrW1vb3GlyDT7d/q0SMGNrcXUTSBG9U&#xA;j1IaMr1qxIUKqzGHSvImuaN9bsbC0vdPtZpLnTp1iV4FnVRWe0NOFCw+1HsWqdzvirK1pxFK0ptW&#xA;tfxxVjnmjz9oPlq9tLPUvVMt5HNJF6ScxWFC6xsaijyhH9Md+J8MVU9A/MPQdbh1GSBLiA6YOc8c&#xA;8RR2QzTW6vGu5YPNaSoo6kr03GCUqFtmLGZyERzKc6RaTQwPNdAC9u29a6ANQrEALGCKVEaAJXvS&#xA;vfIwFDfmW3U5BKVR+iOw/X8Tv5cuiOybjOxVAal/vZpX/MU3/ULPkJcx7/0FycH0ZP6v+/ij8m4z&#xA;sVSsD9IaxyIrZ6YaL4PdMu5+UKNTw5Me6ZX9UvIfe5v91i/p5Psj/wAeP2AdJJpljhOxV2KpddXT&#xA;2tnqdwjQxyRFmR7qQxQBhClDI9DxSvUgYq83/L668xy+bYrrVfL9lon15bkPcRounvOUY+j6ccV7&#xA;eC9do15uzxpwA+FmFMUoy/1L8647LzGmm6ZHcXwuW/Qj3bW0cQgS4evp+k1W525i9L1aHlz5HYKV&#xA;DPtFJNrN02uroDi5f/j4frUChr+z2xVH4q7FXYqluvzlLAwISJbxvQQjYgMCZGB7FYwxHvlmMb33&#xA;MJnZLgAoAAoBsAOgGTYt4q7FXYqi9AmCG4sSd429aEf8Vykk/dJy+QIyOQdWUD0TfKmbsVdiqB14&#xA;00TUDttbS1LMUAHA1PIVI+eKsN82SeatXur59N0rRdQ0nQ2KNBqqNJcTzrCkzm3Y8YYOIcKDJXkw&#xA;NSq/FirJtFuNRufJdhc6nFHBqU+mxSXsMFDEk7wBpFj4s44q5IWjHbucVTlK8FqamgqaEfganFUk&#xA;17yP5T1+Yz6vpcF3cFFjE7r+8Cxlmj4sKEFGkYqRupNRiqC0ny1okOu3cmnWyxQpIkl/IoAE10nK&#xA;REoAFpE8zzNQf3j16g5X9UvIfe5o/dY7/jyDbyj1P+dy919JBlOWOE7FXYqgNS/3s0r/AJim/wCo&#xA;WfIS5j3/AKC5OD6Mn9X/AH8Ufk3GQWrXstvCkVtRr66b0rRTuAxFS7D+WNQWb5U6kZCcq5cy5Gmx&#xA;CRJl9Edz+r3nkPnyCtYWUNlaR20VSkY3Zt2ZieTOx7s7Esx7k4YxoUwzZTkkZHr+APcOQV8k1OxV&#xA;2KpfMJvqup+nEtzL8fp27iiyH0V4oeRpRuh7Yq8n8gRaNZefdLj0e6Mx1C0u5tXQaVa2QS6URlom&#xA;lihtpF4Fj+7bmw/abfFL1Kfzf5TggurifW7CKCxnFpeyvdQqkNwTQQysWoklduDb4oROkcvqsnLl&#xA;/vTc05cen1h6U49vDviqNxV2KuxVjt3OLvUpJlNYbYG3h92rWZv+CUL/ALE+OXgUGomy7FXYq7FX&#xA;YqpvMbSeK+HSCom94Xp6n/A0D/7GmGrFLdbsmVgwDKag7gjoRmO2uxV2KoPWuX6Gv+NeX1eWnGnK&#xA;vA9OW1fniqQ+YPy40TXL6e6uLq/t0vUCajZWt1JFa3XFQitPCKo5CAKezKAr8l2xVNbDR7XRPK1t&#xA;o1oztaaZYpZ27SEM5jt4RGhYqFBbiu9AMVTRfsj5Dx/jviqA1K8nDrYWJH1+cVDkVWCPoZnH0fAv&#xA;7TbdOREJyPIc3K0+KNcc/oH+yP8ANH6T0HnQIqys4LO1jtoARHHXdjVmZiWZmJ6szEsx7nJRiAKD&#xA;TlynJIyPM/ivcOQVsLW7FXYqgNS/3s0r/mKb/qFnyEuY9/6C5OD6Mn9X/fxRV1dW9rA9xcOI4kpy&#xA;Y1O5NAABuSSaADcnYZIkAWWnHjlOXDEWUHptrPJO+p3qcLqZeEEBoTBASDw225sQGkp3oKkKDkIg&#xA;8zzcjPkiB4cPpHM/zpd/uHKPz2MiExyxxHYq7FXYqh7X+9uv+Mo8f99p44qiMVYLc/lHpM0WrRLq&#xA;+pQR61K8l4sZsz8DzSzmFC9s5VK3MqnfkVcqWO1FWV6IiJaTcVC1uroninCp+sOKkHqffviqPxV2&#xA;KpVrGpslbG0f/S5B+8kWh9FD+2f8o/sDx36A5ZCHU8mEpdAl8UUcUSRRjiiAKq+AG2WE2xX4Fdir&#xA;sVdirsVVtHvhaMunznjCTSylPSh6Qn3H7HiNuo3E43uExNbJ5lLY7FUDryq2iagGAYfVpdmXmNkP&#xA;7I+18sVR2KqF/wD7w3H/ABif/iJxVATXt07ehbXFlbRCiicyeo4+GvEQ0RQfD4zTwOQPF0cjH4QF&#xA;y4pHu5D52fuHvCtYDS7OMql0sssrFpriSRWklk6EsdvDYAAKNgABTDGNMc2Y5DvsByA5AeX4s8yS&#xA;USL+xJoLmKu+3Ne2x75JpcL+xNKXMRqKj413H34q1+kLACpuYqU5V5r0HfrirZv7EVrcxCgqfjXY&#xA;ffiqB1S4DvaS2s1s8lrMZnSab0gUMMkf2lWTu/hkJg7U5OnnACQlYEo1sL/iie8dyyBLd7hbrUr+&#xA;G4niP7mFCEghYjqqlmLPQ05Mf9ULU1RA3ZTPUARMcY4QeZ5yPx6DyHxugmP1+x3/ANJi2ND8a9T9&#xA;OTcV31+x2/0mLc0Hxr1Hbr7Yq76/Y7f6TFuaD416j6cVcL+xJoLmKu/7a9tj3xVwv7E0pcxGoqKO&#xA;u48euKrLB4pGuniKsjS1DJQg1jTeoJxVFYq8o1b8x/zGtbfWxb6GZLizvpItPb9G38iG2iedaMqP&#xA;WZn9ODjKjKv77lxIjbFWfaVcXhhlS3igkK3Fyzhrh+QrcSDf929N1O3bCK6oNov6zqvAOLe1KNTi&#xA;31l6HlQCh9HvXbJVHvPy/ajdQmh1245Rm6hthSrJACZADsPjeuxodwgPhhBiOiCJFRi0gQQgo8Yj&#xA;cg8+RPJpCACWIJYsT1PXCcloEFX9Fz8ivOPkACVqagGtD09sHGE8LQ02UhCJIyJPsHkfi2rttvtv&#xA;jxheFv8ARc/Irzj5AAlamoBrQ9PbHjC8K1dPkZUdZYystDGeR+Ko5bbb7b48YXhXfoufkV5x8gAS&#xA;tTUA1oentjxheFoabKQhEkZEn2DyPxbV22323x4wvCtfSWl5wOYn+EF4zU/C1QKinficIyLwrre2&#xA;1e3RBBexSwv/AHSXHKWopyokgKuajuxbEyieigEIkT6xUqbe2LgAkC4etD3p6O3Q5Go95+X7U7oP&#xA;WLq9/Q92ZY7dIpbebi63L7/umbY+kvYVrXAQEi06yKXYq7FXYq7FXYq7FXYqxLUfMvmGH8ztJ8t2&#xA;1tayaNeaVd393NJK6XCvb3EEQ9NRG6tT1x8JYcuRNRwAdVluKuxV2KuxV2KuxV2KuxV2KoZtL0xn&#xA;Z2s4GdySzGNCSSakk0xVb+iNJpT6lBQdvST+mKu/RGldfqUFf+MSf0xV36I0mlPqUFB29JP6Yq79&#xA;EaV1+pQV/wCMSf0xV36I0nb/AEKDbp+6T+mKsI/MuSfSb7yhJp81hpllea3HZ6rJc2qSI8MlrcMi&#xA;M5khCBpIwo7l2Sh2Kuqzf9EaTt/oUG3T90n9MVd+iNK6/UoK/wDGJP6Yq79EaTt/oUG3T90n9MVd&#xA;+iNK6/UoK/8AGJP6Yq79EaTt/oUG3T90n9MVd+iNK6/UoK/8Yk/pirv0PpNKfUrenh6Sf0xVF4q7&#xA;FXYq7FXYq7FXYq7FUp1X/Cn6X0n9LfUP0xzl/QX1v0frPqcB631T1P3nLh9v0+3XFU2xV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.106;PS 2.000;hotconv 1.0.70;makeotf.lib2.5.58329</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 7.00</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>arial.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 7.01</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>times.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>SymbolMT</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>symbol.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f65b89c5-36f5-984d-a21c-743fa3f25a25</stEvt:instanceID>
                  <stEvt:when>2017-05-14T16:45:42-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:727a8a46-5c68-2a43-9b8b-62fb4e1ea0a8</stEvt:instanceID>
                  <stEvt:when>2017-05-16T11:21:20-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c6a5602e-20a8-164b-ae15-8b5e9f6bca60</stEvt:instanceID>
                  <stEvt:when>2019-12-04T20:35:20-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DocumentID>xmp.did:c6a5602e-20a8-164b-ae15-8b5e9f6bca60</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:471c426a-066b-7042-9625-9e325b9bfca7</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:f65b89c5-36f5-984d-a21c-743fa3f25a25</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:727a8a46-5c68-2a43-9b8b-62fb4e1ea0a8</stRef:instanceID>
            <stRef:documentID>xmp.did:727a8a46-5c68-2a43-9b8b-62fb4e1ea0a8</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:f65b89c5-36f5-984d-a21c-743fa3f25a25</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -281.914 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 281.914 li
384.157 281.914 li
384.157 0 li
cp
clp
116.445 41.0716 mo
116.445 43.0588 114.832 44.6716 112.845 44.6716 cv
110.858 44.6716 109.245 43.0588 109.245 41.0716 cv
109.245 39.0844 110.858 37.4716 112.845 37.4716 cv
114.832 37.4716 116.445 39.0844 116.445 41.0716 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .633692 .380835 0 cmyk
ef
116.445 41.0716 mo
116.22 41.0716 li
116.217 42.9343 114.708 44.4432 112.845 44.4466 cv
110.983 44.4432 109.474 42.9343 109.47 41.0716 cv
109.474 39.2088 110.983 37.6999 112.845 37.6966 cv
114.708 37.6999 116.217 39.2088 116.22 41.0716 cv
116.445 41.0716 li
116.67 41.0716 li
116.67 38.9599 114.957 37.2468 112.845 37.2466 cv
110.734 37.2468 109.021 38.9599 109.02 41.0716 cv
109.021 43.1833 110.734 44.8963 112.845 44.8966 cv
114.957 44.8963 116.67 43.1833 116.67 41.0716 cv
116.445 41.0716 li
cp
0 .993347 1 0 cmyk
f
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: SymbolMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SymbolMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /g39 put
def
/FontBBox {0 -220 1113 1005} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B7C3C9ED920C533BFCEF627DC3963E487931C80D1235
BDD70699E096A6312D> |-
/g39 <1C60D8A8C9B7D7E8D37714888B3A9969C9B649A6AE211DE5892AE2A871
F281F62C724D805D2A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OEXTJD+SymbolMT /SymbolMT findfont ct_VMDictPut
/OEXTJD+SymbolMT*1 
[68{/.notdef}rp /g39 187{/.notdef}rp]
OEXTJD+SymbolMT nf
OEXTJD+SymbolMT*1 [14 0 0 -14 0 0 ]msf
89.0488 30.2842 mo
(D)sh
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /MyriadPro-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 116 /t put
def
/FontBBox {-157 -250 1126 952} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 -0.00001 484 496 650 662 674 686 710 722] def
/OtherBlues [-210 -198 -121 -109] def
/BlueScale 0.0625 def
/BlueFuzz 0 def
/StdHW [67] def
/StdVW [88] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/parenleft <1C60D8A8C9B84E0A9BE0F5E7F6AA80EB6F9C55A29BCD0A78FDE2
EC81535B0D09BBC78AC2BA9C07B9D73B61D64C4620A3AEABD78638094F148373
7E> |-
/parenright <1C60D8A8C9B84E0A9BE0F5DB50450E7143AED3F02065BA0D25A
F71E0BCF32D4511B91D5597E045F9FD9A2805B5D6939BFA0E875F4D520B550E8
B48> |-
/t <1C60D8A8C9B821B35FABC50DF2817A1BBC93B89A8B6DB7012C573A5B06A7
8E6721B35869D6CEA1BEC8F4D7ADE4AD26D55A0B6AD62D85D42D1321EDA432B8
F1448E7C88822F3224E1F6F992B7D2C5602E3B1569A5778D> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OEXTJE+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut
/OEXTJE+MyriadPro-Regular*1 
[40{/.notdef}rp /parenleft /parenright 74{/.notdef}rp /t 139{/.notdef}rp]
OEXTJE+MyriadPro-Regular nf
OEXTJE+MyriadPro-Regular*1 [14 0 0 -14 0 0 ]msf
97.6143 30.2842 mo
(\(t\))sh
99.9022 41.5716 mo
126.242 41.5716 li
126.242 40.5716 li
99.9022 40.5716 li
f
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
OEXTJE+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/greater <1C60D8A8C9B7C7F3FCFFFDBE079F38CE12DC317F9FA0309E2FC865
9D7FA4C57645C1E7A5986B599D6A886D035106978A> |-
/r <1C60D8A8C9B825FA276057E42F8B6B56BE61CF56C49E848F1F8C0DBB4CC3
55A060580D0A93A5AC675863E967C6888348BB6A0307CAE2C7E5A0C04CCE8153
CABABF82A896EFF75F39B554C74CA1E2126AA0E73BE8B772EBBEE30A71972C63
0D7D24526AEEFC04035142C31FA6B3B108962236> |-
/bar <1C60D8A8C9B87DE05E11A8C3D762BF0480F0B8A008CC3F0923B7A1E28E
C4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJE+MyriadPro-Regular /Encoding get
dup 62 /greater put
dup 114 /r put
dup 124 /bar put
pop
%ADOEndSubsetFont
/OEXTJE+MyriadPro-Regular*1 
[40{/.notdef}rp /parenleft /parenright 20{/.notdef}rp /greater 51{/.notdef}rp /r /.notdef 
/t 7{/.notdef}rp /bar 131{/.notdef}rp]
OEXTJE+MyriadPro-Regular nf
OEXTJE+MyriadPro-Regular*1 [15 0 0 -15 0 0 ]msf
78.4395 46.4224 mo
(|r>)sh
99.9022 113.444 mo
126.242 113.444 li
126.242 112.444 li
99.9022 112.444 li
f
116.155 112.695 mo
116.155 114.682 114.542 116.295 112.555 116.295 cv
110.568 116.295 108.955 114.682 108.955 112.695 cv
108.955 110.708 110.568 109.095 112.555 109.095 cv
114.542 109.095 116.155 110.708 116.155 112.695 cv
cp
.27158 .251408 0 0 cmyk
ef
116.155 112.695 mo
115.93 112.695 li
115.927 114.558 114.418 116.067 112.555 116.07 cv
110.693 116.067 109.184 114.558 109.18 112.695 cv
109.184 110.832 110.693 109.324 112.555 109.32 cv
114.418 109.324 115.927 110.832 115.93 112.695 cv
116.155 112.695 li
116.38 112.695 li
116.38 110.584 114.667 108.87 112.555 108.87 cv
110.444 108.87 108.731 110.584 108.73 112.695 cv
108.731 114.807 110.444 116.52 112.555 116.52 cv
114.667 116.52 116.38 114.807 116.38 112.695 cv
116.155 112.695 li
cp
.867155 .762753 0 0 cmyk
f
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
OEXTJE+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D5
98E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-
/B <1C60D8A8C9B79D2DDA73CBA562CD775BD8708DCD8E9BDBAA2B04F229B401
DEE6F3B16867C2DF5ADCE1003CD3347893BC921649BA15F586CE896AA4574C76
0FC8E6103F6E803B90F385A0C480DB58BCBE731BDB2E07BC90ABF0D34F2A76BE
68E603CE526C97809060252D094726469AFC1EBB9A96BC6EF2899E99E4F5DB78
806C2904DB0391B53A557D2D0810C07323B9E1172D4C9C1C76664A570F8B40F0
C97E620BA6C7D2A77D969C62FB9AD1905E1BB7E1B20BAB18A4402CB21DF7B3B6
CBAF50B782> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJE+MyriadPro-Regular /Encoding get
dup 49 /one put
dup 66 /B put
pop
%ADOEndSubsetFont
/OEXTJE+MyriadPro-Regular*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 12{/.notdef}rp /greater 3{/.notdef}rp 
/B 47{/.notdef}rp /r /.notdef /t 7{/.notdef}rp /bar 131{/.notdef}rp]
OEXTJE+MyriadPro-Regular nf
OEXTJE+MyriadPro-Regular*1 [15 0 0 -15 0 0 ]msf
76.8584 117.295 mo
(|1>)sh
OEXTJE+MyriadPro-Regular*1 [16.9998 0 0 -16.9998 0 0 ]msf
145.044 42.5415 mo
(B)sh
78.9538 125.187 mo
105.294 125.187 li
105.294 124.187 li
78.9538 124.187 li
f
95.2068 124.438 mo
95.2068 127.268 91.9363 129.339 88.9713 127.074 cv
86.7064 124.109 88.777 120.838 91.6068 120.838 cv
93.594 120.838 95.2068 122.451 95.2068 124.438 cv
cp
.27158 .251408 0 0 cmyk
ef
95.2068 124.438 mo
94.9818 124.438 li
94.9784 126.301 93.4696 127.81 91.6068 127.813 cv
90.8161 127.813 89.9567 127.543 89.1079 126.895 cv
88.9713 127.074 li
89.1501 126.937 li
88.5023 126.088 88.2323 125.229 88.2318 124.438 cv
88.2352 122.576 89.7441 121.067 91.6068 121.063 cv
93.4696 121.067 94.9784 122.576 94.9818 124.438 cv
95.2068 124.438 li
95.4318 124.438 li
95.4316 122.327 93.7185 120.614 91.6068 120.613 cv
89.4951 120.614 87.7821 122.327 87.7818 124.438 cv
87.7814 125.333 88.0914 126.293 88.7925 127.21 cv
88.8108 127.234 li
88.8347 127.253 li
89.7517 127.954 90.7122 128.264 91.6068 128.263 cv
93.7185 128.263 95.4316 126.55 95.4318 124.438 cv
95.2068 124.438 li
cp
.867155 .762753 0 0 cmyk
f
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
OEXTJE+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7E7C1D822193538A56B13640F1C3EE80C415BBD7C96E2BF73
396DB0D9C9230D7704B1D4903E1B0E823160B234020A503047A686661C34B500
4CDCF7754772CF263A11D6B8FC7868BB12CD6A915ACD880C8B0638C394417FA3
7BE535ADC2EFE334704B66B55FC93ABE48255DC988A5DFABA294BF5BF2E02BE2
314DCE6531FAA5DCB4D56DF6C62A6139D41B024DA04272B4B444C44FEBCD2F65
888A63654699808BEDAA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJE+MyriadPro-Regular /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
/OEXTJE+MyriadPro-Regular*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 12{/.notdef}rp /greater 3{/.notdef}rp 
/B 33{/.notdef}rp /d 13{/.notdef}rp /r /.notdef /t 7{/.notdef}rp 
/bar 131{/.notdef}rp]
OEXTJE+MyriadPro-Regular nf
OEXTJE+MyriadPro-Regular*1 [15 0 0 -15 0 0 ]msf
55.9097 129.038 mo
(|d>)sh
100.254 136.444 mo
126.594 136.444 li
126.594 135.444 li
100.254 135.444 li
f
116.507 135.695 mo
116.507 137.682 114.895 139.295 112.907 139.295 cv
110.92 139.295 109.307 137.682 109.307 135.695 cv
109.307 133.708 110.92 132.095 112.907 132.095 cv
114.895 132.095 116.507 133.708 116.507 135.695 cv
cp
.27158 .251408 0 0 cmyk
ef
116.507 135.695 mo
116.282 135.695 li
116.279 137.558 114.77 139.067 112.907 139.07 cv
111.045 139.067 109.536 137.558 109.532 135.695 cv
109.536 133.832 111.045 132.324 112.907 132.32 cv
114.77 132.324 116.279 133.832 116.282 135.695 cv
116.507 135.695 li
116.732 135.695 li
116.732 133.584 115.019 131.87 112.907 131.87 cv
110.796 131.87 109.083 133.584 109.082 135.695 cv
109.083 137.807 110.796 139.52 112.907 139.52 cv
115.019 139.52 116.732 137.807 116.732 135.695 cv
116.507 135.695 li
cp
.867155 .762753 0 0 cmyk
f
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
OEXTJE+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B5E4CF4EC97A525E022C9B4FC
88EFB3F3BAD779956899C836BBD2FC8F5F391C07FB0B2C3B92A06F4A639C8E43
BB10FDB531B59E83D98A9AB718650C50F38FC91524BAA33EC4FF9905D1A9C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJE+MyriadPro-Regular /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/OEXTJE+MyriadPro-Regular*1 
[40{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 12{/.notdef}rp /greater 
3{/.notdef}rp /B 33{/.notdef}rp /d 13{/.notdef}rp /r /.notdef /t 
7{/.notdef}rp /bar 131{/.notdef}rp]
OEXTJE+MyriadPro-Regular nf
OEXTJE+MyriadPro-Regular*1 [15 0 0 -15 0 0 ]msf
77.2104 140.295 mo
(|0>)sh
112.18 12.1377 mo
112.18 108.418 li
112.93 108.418 li
112.93 12.1377 li
.88748 .788327 0 0 cmyk
f
112.555 7.6113 mo
111.765 9.74115 110.417 12.3838 108.988 14.0218 cv
112.555 12.7317 li
116.121 14.0218 li
114.693 12.3838 113.345 9.74115 112.555 7.6113 cv
cp
f
112.555 112.944 mo
111.765 110.814 110.417 108.172 108.988 106.534 cv
112.555 107.824 li
116.121 106.534 li
114.693 108.172 113.345 110.814 112.555 112.944 cv
cp
f
99.3853 7.1113 mo
101.385 7.1113 li
101.385 6.1113 li
99.3853 6.1113 li
.749721 .679194 .670497 .901457 cmyk
f
105.853 7.1113 mo
110.321 7.1113 li
110.321 6.1113 li
105.853 6.1113 li
cp
114.789 7.1113 mo
119.257 7.1113 li
119.257 6.1113 li
114.789 6.1113 li
cp
f
123.725 7.1113 mo
125.725 7.1113 li
125.725 6.1113 li
123.725 6.1113 li
f
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: SymbolMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJD+SymbolMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g11 <1C60D8A8C9B81F2C3AD88BE944FF80318D8AF8350026B5EFE87FE68764
0AF4A47547388792B22F6DB8B11FE56DE72D1A141C3CCB5CDB12F640DEFF9A6D
3F1A686471C682D0F16FF3566BA8C987CE4F15A3A503FF4814FD7B> |-
/g12 <1C60D8A8C9B81F2C3AA92CC6997C003EEB299D29C718A8A6BCF0E8A765
C1B5FF867F31B4D88A3D7B6BCFF578B7D351C94320922B2E7FDB620754441B20
B2299DD3C52447CAF34E7470ADA555A3FE58BD72E3FC77877CB8C5B6> |-
/g58 <1C60D8A8C9B6F576EA70CDB8EEE2CB58DFA4035EC7CA2C41F31962CE06
AFD08C80B3CABE1F5CC03DBBA1CE00FE4F85E9562684A79B078A02E333BF2B34
4A58384B7F13CA2B27E5FF7C61FBA472F06543AD776218421BF27D0A9B4560F3
81CA2FD345A3955AA5D2F881BDA6EC6D81C29B2B127D6CDF7CAF3CDE4BFCDFC3
DA72FF3AD806BD5645B5A71AC60832CD79EAE945F3448F885464C86BF9BB9648
1600E1847E02C589BE1B560DBE2327F3164DB3834544F5B26CB99EA6D1267AE8
1F73C0FF3B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJD+SymbolMT /Encoding get
dup 40 /g11 put
dup 41 /g12 put
dup 87 /g58 put
pop
%ADOEndSubsetFont
/OEXTJD+SymbolMT*1 
[40{/.notdef}rp /g11 /g12 26{/.notdef}rp /g39 18{/.notdef}rp /g58 168{/.notdef}rp]
OEXTJD+SymbolMT nf
OEXTJD+SymbolMT*1 [13.5998 0 0 -13.5998 0 0 ]msf
87.2495 93.7725 mo
(W\()
[10.4458 0 ]xsh
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 116 /t put
def
/FontBBox {-568 -307 2046 1040} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448
713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43
DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B
36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OEXTJF+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/OEXTJF+TimesNewRomanPSMT*1 
[116{/.notdef}rp /t 139{/.notdef}rp]
OEXTJF+TimesNewRomanPSMT nf
OEXTJF+TimesNewRomanPSMT*1 [13.5998 0 0 -13.5998 0 0 ]msf
102.224 93.7725 mo
(t)sh
OEXTJD+SymbolMT*1 [13.5998 0 0 -13.5998 0 0 ]msf
106.002 93.7725 mo
(\))sh
188.084 41.1327 mo
188.084 43.1199 186.472 44.7327 184.484 44.7327 cv
182.497 44.7327 180.884 43.1199 180.884 41.1327 cv
180.884 39.1455 182.497 37.5327 184.484 37.5327 cv
186.472 37.5327 188.084 39.1455 188.084 41.1327 cv
cp
0 .633692 .380835 0 cmyk
ef
188.084 41.1327 mo
187.859 41.1327 li
187.856 42.9954 186.347 44.5043 184.484 44.5077 cv
182.622 44.5043 181.113 42.9954 181.109 41.1327 cv
181.113 39.2699 182.622 37.761 184.484 37.7577 cv
186.347 37.761 187.856 39.2699 187.859 41.1327 cv
188.084 41.1327 li
188.309 41.1327 li
188.309 39.021 186.596 37.3079 184.484 37.3077 cv
182.373 37.3079 180.66 39.021 180.659 41.1327 cv
180.66 43.2443 182.373 44.9574 184.484 44.9577 cv
186.596 44.9574 188.309 43.2443 188.309 41.1327 cv
188.084 41.1327 li
cp
0 .993347 1 0 cmyk
f
171.541 41.6327 mo
197.881 41.6327 li
197.881 40.6327 li
171.541 40.6327 li
.749721 .679194 .670497 .901457 cmyk
f
171.541 113.505 mo
197.881 113.505 li
197.881 112.505 li
171.541 112.505 li
f
187.794 112.756 mo
187.794 114.744 186.182 116.356 184.194 116.356 cv
182.207 116.356 180.594 114.744 180.594 112.756 cv
180.594 110.769 182.207 109.156 184.194 109.156 cv
186.182 109.156 187.794 110.769 187.794 112.756 cv
cp
.27158 .251408 0 0 cmyk
ef
187.794 112.756 mo
187.569 112.756 li
187.566 114.619 186.057 116.128 184.194 116.131 cv
182.332 116.128 180.823 114.619 180.819 112.756 cv
180.823 110.894 182.332 109.385 184.194 109.381 cv
186.057 109.385 187.566 110.894 187.569 112.756 cv
187.794 112.756 li
188.019 112.756 li
188.019 110.645 186.306 108.932 184.194 108.931 cv
182.083 108.932 180.37 110.645 180.369 112.756 cv
180.37 114.868 182.083 116.581 184.194 116.581 cv
186.306 116.581 188.019 114.868 188.019 112.756 cv
187.794 112.756 li
cp
.867155 .762753 0 0 cmyk
f
171.894 136.505 mo
198.234 136.505 li
198.234 135.505 li
171.894 135.505 li
.749721 .679194 .670497 .901457 cmyk
f
188.147 135.756 mo
188.147 137.743 186.534 139.356 184.547 139.356 cv
182.559 139.356 180.947 137.743 180.947 135.756 cv
180.947 133.769 182.559 132.156 184.547 132.156 cv
186.534 132.156 188.147 133.769 188.147 135.756 cv
cp
.27158 .251408 0 0 cmyk
ef
188.147 135.756 mo
187.922 135.756 li
187.918 137.619 186.409 139.128 184.547 139.131 cv
182.684 139.128 181.175 137.619 181.172 135.756 cv
181.175 133.894 182.684 132.385 184.547 132.381 cv
186.409 132.385 187.918 133.894 187.922 135.756 cv
188.147 135.756 li
188.372 135.756 li
188.371 133.645 186.658 131.932 184.547 131.931 cv
182.435 131.932 180.722 133.645 180.722 135.756 cv
180.722 137.868 182.435 139.581 184.547 139.581 cv
186.658 139.581 188.371 137.868 188.372 135.756 cv
188.147 135.756 li
cp
.867155 .762753 0 0 cmyk
f
183.819 12.1987 mo
183.819 108.479 li
184.569 108.479 li
184.569 12.1987 li
.88748 .788327 0 0 cmyk
f
184.194 7.67238 mo
183.404 9.80223 182.056 12.4448 180.628 14.0829 cv
184.194 12.7927 li
187.761 14.0829 li
186.332 12.4448 184.984 9.80223 184.194 7.67238 cv
cp
f
184.194 113.005 mo
183.404 110.876 182.056 108.233 180.628 106.595 cv
184.194 107.885 li
187.761 106.595 li
186.332 108.233 184.984 110.876 184.194 113.005 cv
cp
f
171.024 7.17239 mo
173.024 7.17239 li
173.024 6.17239 li
171.024 6.17239 li
.749721 .679194 .670497 .901457 cmyk
f
177.492 7.17239 mo
181.96 7.17239 li
181.96 6.17239 li
177.492 6.17239 li
cp
186.428 7.17239 mo
190.896 7.17239 li
190.896 6.17239 li
186.428 6.17239 li
cp
f
195.364 7.17239 mo
197.364 7.17239 li
197.364 6.17239 li
195.364 6.17239 li
f
174.661 33.2293 mo
166.712 27.6495 157.555 24.8646 148.598 24.8646 cv
139.488 24.8642 130.581 27.7474 123.374 33.5048 cv
123.998 34.2861 li
131.017 28.6792 139.698 25.8649 148.598 25.8646 cv
157.348 25.8645 166.306 28.5858 174.087 34.0478 cv
174.661 33.2293 li
cp
.0697032 .968292 1 .00579843 cmyk
f
179.084 37.4153 mo
177.493 34.8381 175.82 31.2536 175.268 28.4088 cv
173.7 33.217 li
169.42 35.9088 li
172.313 35.7502 176.197 36.4991 179.084 37.4153 cv
cp
f
119.277 38.0289 mo
120.669 35.3388 122.066 31.6381 122.401 28.7598 cv
124.328 33.4357 li
128.799 35.7963 li
125.902 35.8568 122.086 36.8972 119.277 38.0289 cv
cp
f
192.684 41.691 mo
192.744 41.691 li
192.896 41.691 li
193.349 41.8043 li
193.383 41.8101 li
194.03 41.8688 li
194.849 42.0444 li
195.675 42.2803 li
196.492 42.5722 li
197.233 42.9713 li
197.789 43.4716 li
198.228 44.1841 li
198.336 44.9448 li
198.229 45.6426 li
197.909 46.1227 li
197.52 46.5111 li
197.006 46.8538 li
196.474 47.1493 li
196.425 47.1869 li
196.005 47.6069 li
195.976 47.6412 li
195.616 48.1812 li
195.581 48.2718 li
195.461 49.0518 li
195.461 49.1178 li
195.581 49.9578 li
195.609 50.0394 li
196.029 50.7594 li
196.083 50.8217 li
196.683 51.3017 li
196.74 51.3349 li
197.34 51.5749 li
197.424 51.591 li
198.084 51.591 li
198.128 51.5866 li
198.728 51.4666 li
198.732 51.4656 li
199.248 51.351 li
199.84 51.351 li
200.376 51.5652 li
200.911 51.9397 li
201.287 52.6374 li
201.396 53.4048 li
201.288 54.1081 li
200.969 54.6399 li
200.534 55.0209 li
200.014 55.3093 li
200.004 55.3152 li
199.524 55.6152 li
199.496 55.6367 li
199.016 56.0567 li
198.971 56.1102 li
198.611 56.7102 li
198.582 56.789 li
198.462 57.509 li
198.461 57.5757 li
198.581 58.4757 li
198.606 58.5527 li
199.026 59.3327 li
199.083 59.4017 li
199.683 59.8817 li
199.764 59.9231 li
200.424 60.1031 li
200.484 60.111 li
201.084 60.111 li
201.104 60.1101 li
201.764 60.0501 li
201.788 60.0466 li
202.366 59.931 li
202.904 59.931 li
203.492 60.1448 li
204.03 60.5755 li
204.407 61.2213 li
204.516 61.9847 li
204.409 62.6825 li
204.098 63.1491 li
203.654 63.4823 li
203.126 63.8337 li
202.594 64.1293 li
202.569 64.146 li
202.089 64.506 li
202.036 64.5612 li
201.676 65.1012 li
201.641 65.1918 li
201.521 65.9718 li
201.521 66.0378 li
201.641 66.8778 li
201.669 66.9593 li
202.089 67.6793 li
202.133 67.7332 li
202.733 68.2732 li
202.792 68.3116 li
203.332 68.5516 li
203.424 68.571 li
203.904 68.571 li
204.444 68.571 li
204.472 68.5692 li
204.938 68.511 li
205.424 68.511 li
206.031 68.7318 li
206.781 69.1354 li
207.528 69.7101 li
208.226 70.524 li
208.61 71.0732 li
208.647 71.2952 li
208.576 71.4012 li
208.55 71.4548 li
208.49 71.6348 li
208.479 71.706 li
208.479 72.066 li
208.482 72.103 li
208.602 72.823 li
208.613 72.865 li
208.972 73.823 li
209.332 74.8409 li
209.332 74.8417 li
209.632 75.6816 li
209.636 75.6925 li
209.934 76.4073 li
210.532 78.0817 li
210.956 77.9303 li
210.356 76.2503 li
210.351 76.2394 li
210.054 75.5246 li
209.756 74.6903 li
209.756 74.6911 li
209.396 73.6711 li
209.394 73.667 li
209.042 72.7274 li
208.929 72.0474 li
208.929 71.7425 li
208.968 71.6258 li
209.071 71.4708 li
209.106 71.309 li
209.046 70.949 li
209.008 70.8569 li
208.588 70.257 li
208.575 70.2396 li
207.855 69.3996 li
207.821 69.3676 li
207.041 68.7676 li
207.01 68.7479 li
206.23 68.3279 li
206.201 68.3145 li
205.541 68.0745 li
205.464 68.061 li
204.924 68.061 li
204.896 68.0627 li
204.43 68.121 li
203.904 68.121 li
203.471 68.121 li
203.008 67.9149 li
202.46 67.4222 li
202.08 66.7706 li
201.971 66.0073 li
202.078 65.3094 li
202.39 64.8429 li
202.826 64.5152 li
203.353 64.2227 li
203.368 64.2132 li
203.908 63.8532 li
203.919 63.846 li
204.399 63.486 li
204.451 63.4308 li
204.811 62.8908 li
204.846 62.8002 li
204.966 62.0202 li
204.966 61.9542 li
204.846 61.1142 li
204.818 61.0326 li
204.398 60.3126 li
204.344 60.2503 li
203.744 59.7703 li
203.681 59.7345 li
203.021 59.4945 li
202.944 59.481 li
202.344 59.481 li
202.3 59.4854 li
201.711 59.603 li
201.073 59.661 li
200.514 59.661 li
199.928 59.5012 li
199.4 59.0789 li
199.021 58.3755 li
198.911 57.5497 li
199.019 56.9051 li
199.338 56.372 li
199.778 55.9872 li
200.238 55.6998 li
200.773 55.4027 li
200.812 55.3753 li
201.292 54.9553 li
201.337 54.9018 li
201.697 54.3018 li
201.726 54.2202 li
201.846 53.4402 li
201.846 53.3742 li
201.726 52.5342 li
201.702 52.4593 li
201.282 51.6793 li
201.213 51.6017 li
200.613 51.1817 li
200.567 51.1571 li
199.967 50.9171 li
199.884 50.901 li
199.224 50.901 li
199.175 50.9063 li
198.637 51.0258 li
198.061 51.141 li
197.467 51.141 li
196.938 50.9295 li
196.397 50.4964 li
196.02 49.8506 li
195.911 49.0872 li
196.019 48.3894 li
196.339 47.9093 li
196.72 47.5274 li
197.233 47.2427 li
197.248 47.2332 li
197.788 46.8732 li
197.823 46.8451 li
198.243 46.4251 li
198.271 46.3908 li
198.631 45.8508 li
198.666 45.7602 li
198.786 44.9802 li
198.786 44.9142 li
198.666 44.0742 li
198.635 43.9881 li
198.155 43.2081 li
198.114 43.1588 li
197.514 42.6188 li
197.47 42.5879 li
196.69 42.1679 li
196.659 42.1541 li
195.819 41.8541 li
195.805 41.8496 li
194.965 41.6097 li
194.951 41.606 li
194.111 41.426 li
194.084 41.4219 li
193.441 41.3635 li
192.978 41.2477 li
192.924 41.241 li
192.744 41.241 li
192.684 41.241 li
192.684 41.691 li
cp
.749721 .679194 .670497 .901457 cmyk
f
207.264 73.746 mo
210.504 77.406 li
210.684 72.546 li
207.264 73.746 li
cp
0 0 0 1 cmyk
ef
207.264 73.746 mo
207.095 73.8951 li
210.708 77.9759 li
210.921 72.2243 li
206.873 73.6445 li
207.095 73.8951 li
207.264 73.746 li
207.338 73.9583 li
210.447 72.8676 li
210.3 76.8361 li
207.432 73.5968 li
207.264 73.746 li
207.338 73.9583 li
207.264 73.746 li
cp
.749721 .679194 .670497 .901457 cmyk
f
%ADOBeginSubsetFont: SymbolMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJD+SymbolMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g74 <1C60D8A8C9B7008A5D5D3F62D0914F1A5C3F9A3FD15A27EC2AEA063096
4ED84146D971A5D9A7FC36307F3D83919E8F3815158576F81DE70653BE42C641
CDA76B6A422990CEFF41ED843EE3ABB2DEAF1909486189D685497CCD7F73C842
C6408E1B6EC0467559A94FF5D44791EDF14B65E347392068217FBE2B58FF74AB
FE99B54E9CD2CF48C0F6BE1A45F092C071F144AFBBAC950B5FA7B392C4602F07
774EB1A6B33FDA800148CA38EBF1BE8D7316C348BF522B3E577605B472A8E863> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJD+SymbolMT /Encoding get
dup 103 /g74 put
pop
%ADOEndSubsetFont
/OEXTJD+SymbolMT*1 
[40{/.notdef}rp /g11 /g12 26{/.notdef}rp /g39 18{/.notdef}rp /g58 15{/.notdef}rp 
/g74 152{/.notdef}rp]
OEXTJD+SymbolMT nf
OEXTJD+SymbolMT*1 [13.5998 0 0 -13.5998 0 0 ]msf
208.915 66.5713 mo
(g)sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJF+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE
6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983
E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53
A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455
AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C
360275B503E4954E912CD342> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJF+TimesNewRomanPSMT /Encoding get
dup 114 /r put
pop
%ADOEndSubsetFont
/OEXTJF+TimesNewRomanPSMT*1 
[114{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
OEXTJF+TimesNewRomanPSMT nf
OEXTJF+TimesNewRomanPSMT*1 [11.2 0 0 -11.2 0 0 ]msf
214.506 69.7715 mo
(r)sh
108.089 41.3284 mo
108.029 41.3284 li
107.849 41.3284 li
107.794 41.3351 li
107.331 41.4509 li
106.689 41.5093 li
106.662 41.5134 li
105.822 41.6934 li
105.807 41.6971 li
104.967 41.9371 li
104.953 41.9415 li
104.113 42.2415 li
104.082 42.2553 li
103.302 42.6753 li
103.259 42.7062 li
102.659 43.2462 li
102.617 43.2955 li
102.137 44.0755 li
102.106 44.1616 li
101.986 45.0016 li
101.987 45.0676 li
102.107 45.8476 li
102.142 45.9382 li
102.502 46.4782 li
102.53 46.5125 li
102.95 46.9325 li
102.984 46.9606 li
103.524 47.3206 li
103.54 47.3301 li
104.052 47.6148 li
104.434 47.9967 li
104.754 48.4768 li
104.862 49.1747 li
104.753 49.938 li
104.376 50.5839 li
103.835 51.0169 li
103.306 51.2284 li
102.711 51.2284 li
102.135 51.1132 li
101.598 50.9938 li
101.549 50.9884 li
100.889 50.9884 li
100.805 51.0045 li
100.205 51.2445 li
100.16 51.2691 li
99.56 51.6891 li
99.4909 51.7667 li
99.0709 52.5467 li
99.0463 52.6216 li
98.9263 53.4616 li
98.9266 53.5276 li
99.0466 54.3076 li
99.0761 54.3892 li
99.4361 54.9892 li
99.4809 55.0427 li
99.9609 55.4627 li
99.9997 55.4901 li
100.535 55.7873 li
100.994 56.0746 li
101.434 56.4595 li
101.754 56.9925 li
101.862 57.6371 li
101.751 58.4629 li
101.373 59.1664 li
100.845 59.5886 li
100.259 59.7484 li
99.6993 59.7484 li
99.0613 59.6904 li
98.4732 59.5728 li
98.429 59.5684 li
97.829 59.5684 li
97.7521 59.582 li
97.0921 59.822 li
97.0285 59.8577 li
96.4285 60.3377 li
96.3747 60.4 li
95.9547 61.12 li
95.9263 61.2016 li
95.8063 62.0416 li
95.8066 62.1076 li
95.9266 62.8876 li
95.9618 62.9782 li
96.3218 63.5182 li
96.374 63.5734 li
96.854 63.9334 li
96.8642 63.9406 li
97.4042 64.3006 li
97.4197 64.3101 li
97.9464 64.6026 li
98.3832 64.9303 li
98.6942 65.3968 li
98.8016 66.0946 li
98.6925 66.858 li
98.3124 67.5097 li
97.765 68.0023 li
97.3013 68.2084 li
96.869 68.2084 li
96.343 68.2084 li
95.8769 68.1501 li
95.849 68.1484 li
95.309 68.1484 li
95.2321 68.1619 li
94.5721 68.4019 li
94.5424 68.4153 li
93.7624 68.8353 li
93.7318 68.855 li
92.9518 69.4551 li
92.9182 69.487 li
92.1982 70.327 li
92.1847 70.3444 li
91.7647 70.9444 li
91.7271 71.0364 li
91.6671 71.3964 li
91.7018 71.5582 li
91.8051 71.7132 li
91.844 71.8299 li
91.844 72.1348 li
91.7307 72.8148 li
91.3784 73.7544 li
91.3769 73.7585 li
91.0169 74.7785 li
91.0171 74.7777 li
90.7191 75.6122 li
90.4213 76.3268 li
90.4171 76.3377 li
89.8171 78.0177 li
90.2409 78.1691 li
90.839 76.4944 li
91.1367 75.7799 li
91.1409 75.7691 li
91.4409 74.9291 li
91.4412 74.9283 li
91.8006 73.9101 li
92.1597 72.9524 li
92.171 72.9104 li
92.291 72.1904 li
92.294 72.1534 li
92.294 71.7934 li
92.2825 71.7222 li
92.2225 71.5422 li
92.1962 71.4886 li
92.1256 71.3826 li
92.1626 71.1607 li
92.5471 70.6113 li
93.2447 69.7975 li
93.9918 69.2228 li
94.7413 68.8193 li
95.3487 68.5984 li
95.835 68.5984 li
96.3011 68.6566 li
96.329 68.6584 li
96.869 68.6584 li
97.349 68.6584 li
97.4404 68.639 li
97.9804 68.399 li
98.0395 68.3606 li
98.6395 67.8206 li
98.6834 67.7668 li
99.1034 67.0468 li
99.1318 66.9652 li
99.2518 66.1252 li
99.2514 66.0592 li
99.1314 65.2792 li
99.0962 65.1886 li
98.7362 64.6486 li
98.684 64.5934 li
98.204 64.2334 li
98.1783 64.2167 li
97.6462 63.9211 li
97.119 63.5696 li
96.6749 63.2365 li
96.3638 62.77 li
96.2565 62.0722 li
96.3655 61.3088 li
96.7423 60.6629 li
97.2807 60.2322 li
97.8687 60.0184 li
98.4067 60.0184 li
98.9849 60.134 li
99.0087 60.1375 li
99.6687 60.1975 li
99.689 60.1984 li
100.289 60.1984 li
100.348 60.1905 li
101.008 60.0105 li
101.09 59.9691 li
101.69 59.4891 li
101.747 59.4201 li
102.167 58.6401 li
102.192 58.5632 li
102.312 57.6632 li
102.311 57.5964 li
102.191 56.8764 li
102.162 56.7977 li
101.802 56.1976 li
101.757 56.1441 li
101.277 55.7241 li
101.248 55.7026 li
100.768 55.4026 li
100.758 55.3967 li
100.239 55.1083 li
99.8038 54.7273 li
99.4847 54.1955 li
99.3765 53.4922 li
99.4861 52.7249 li
99.8618 52.0271 li
100.397 51.6527 li
100.932 51.4384 li
101.524 51.4384 li
102.04 51.5531 li
102.045 51.554 li
102.645 51.674 li
102.689 51.6784 li
103.349 51.6784 li
103.433 51.6623 li
104.033 51.4223 li
104.09 51.3891 li
104.69 50.9091 li
104.743 50.8468 li
105.163 50.1268 li
105.192 50.0452 li
105.312 49.2052 li
105.311 49.1392 li
105.191 48.3592 li
105.156 48.2686 li
104.796 47.7286 li
104.768 47.6943 li
104.348 47.2743 li
104.298 47.2367 li
103.766 46.9412 li
103.252 46.5985 li
102.864 46.2101 li
102.544 45.73 li
102.436 45.0322 li
102.545 44.2715 li
102.984 43.559 li
103.539 43.0587 li
104.281 42.6596 li
105.098 42.3677 li
105.924 42.1318 li
106.743 41.9562 li
107.389 41.8975 li
107.424 41.8917 li
107.877 41.7784 li
108.029 41.7784 li
108.089 41.7784 li
108.089 41.3284 li
cp
f
93.509 73.8334 mo
90.269 77.4934 li
90.089 72.6334 li
93.509 73.8334 li
cp
0 0 0 1 cmyk
ef
93.509 73.8334 mo
93.3406 73.6843 li
90.4731 76.9235 li
90.3261 72.955 li
93.4345 74.0457 li
93.509 73.8334 li
93.3406 73.6843 li
93.509 73.8334 li
93.5835 73.6211 li
89.852 72.3118 li
90.065 78.0633 li
93.8994 73.7319 li
93.5835 73.6211 li
93.509 73.8334 li
cp
.749721 .679194 .670497 .901457 cmyk
f
.749721 .679194 .670497 .901457 cmyk
OEXTJD+SymbolMT*1 [13.5998 0 0 -13.5998 0 0 ]msf
77.8618 69.9766 mo
(g)sh
OEXTJF+TimesNewRomanPSMT*1 [11.2 0 0 -11.2 0 0 ]msf
83.4531 73.1768 mo
(r)sh
125.284 113.188 mo
125.284 135.688 li
0 0 0 0 cmyk
f
125.034 116.206 mo
125.034 132.671 li
125.534 132.671 li
125.534 116.206 li
.749721 .679194 .670497 .901457 cmyk
f
125.284 113.188 mo
124.757 114.608 123.858 116.37 122.906 117.462 cv
125.284 116.602 li
127.661 117.462 li
126.709 116.37 125.81 114.608 125.284 113.188 cv
cp
f
125.284 135.688 mo
124.757 134.268 123.858 132.507 122.906 131.415 cv
125.284 132.275 li
127.661 131.415 li
126.709 132.507 125.81 134.268 125.284 135.688 cv
cp
f
%ADOBeginSubsetFont: SymbolMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJD+SymbolMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g90 <1C60D8A8C9B6232B175FC4BF8E5C00E258382E8A090FA5AFA1743EAA10
B3E5311514F5A4F0A4409F0CA8A363E359FD11BB7D1F38BB1EC8146EB7629145
F5109B77CBF3541350751DF685C80711C83575D90B744FB675FFCA5D4CCB1A8A
70E94F29BD2EF361AB2A457EBB4B83D3DBFB3E65AE2E7ACC842AFC412A06386B
25A005504288F5F198EB3C0828EBE187FBC5F34D71D279F7912C27D6ED123BB7
F8A30D91218B80A4377C3E18FCB82416820BFCF3EDCD5EAC89075E1F0E31FA2B
7611D4B2828470166DEC1A299B704FE69F2E777164BA603DB006ECA87348B76E
7452A264B7895BE53BBCB15651917B670269E3B4BABC103D33E8F3DCB2CD1E5F
929905E5AF359B63E98C606DEBBE94A29C76> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJD+SymbolMT /Encoding get
dup 119 /g90 put
pop
%ADOEndSubsetFont
/OEXTJD+SymbolMT*1 
[40{/.notdef}rp /g11 /g12 26{/.notdef}rp /g39 18{/.notdef}rp /g58 15{/.notdef}rp 
/g74 15{/.notdef}rp /g90 136{/.notdef}rp]
OEXTJD+SymbolMT nf
OEXTJD+SymbolMT*1 [13.5998 0 0 -13.5998 0 0 ]msf
107.784 125.438 mo
(w)sh
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
OEXTJE+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/q <1C60D8A8C9B7E897EED043C74253B54ADC1CD15CC5D2369EED179E418749
FCECA224FAD8A34EB9BD7877CC97BC141452C1C22D35DEC4354AEA53EC7F1B70
2A353EE3D0B6B3B48164FE3D7F142CEB2DFE49B221F1E445CD43E52605D76F9A
D0357E0FCE05AB18BD03B9B30164C19713955B60B364B411D31A9471BA6FA77C
647175A8A5ADCE0BBC58F86560C14B95155E265ED4AAA17097630979807FC1CE
9546F9CDC26D3E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJE+MyriadPro-Regular /Encoding get
dup 113 /q put
pop
%ADOEndSubsetFont
/OEXTJE+MyriadPro-Regular*1 
[40{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 12{/.notdef}rp /greater 
3{/.notdef}rp /B 33{/.notdef}rp /d 12{/.notdef}rp /q /r /.notdef 
/t 7{/.notdef}rp /bar 131{/.notdef}rp]
OEXTJE+MyriadPro-Regular nf
OEXTJE+MyriadPro-Regular*1 [11.2 0 0 -11.2 0 0 ]msf
117.114 128.639 mo
(q)sh
159.741 125.439 mo
186.081 125.439 li
186.081 124.439 li
159.741 124.439 li
f
175.994 124.69 mo
175.994 127.52 172.723 129.59 169.758 127.325 cv
167.493 124.36 169.564 121.09 172.394 121.09 cv
174.381 121.09 175.994 122.703 175.994 124.69 cv
cp
.27158 .251408 0 0 cmyk
ef
175.994 124.69 mo
175.769 124.69 li
175.765 126.553 174.257 128.061 172.394 128.065 cv
171.603 128.064 170.744 127.794 169.895 127.147 cv
169.758 127.325 li
169.937 127.189 li
169.289 126.34 169.019 125.481 169.019 124.69 cv
169.022 122.827 170.531 121.318 172.394 121.315 cv
174.257 121.318 175.765 122.827 175.769 124.69 cv
175.994 124.69 li
176.219 124.69 li
176.219 122.578 174.505 120.865 172.394 120.865 cv
170.282 120.865 168.569 122.578 168.569 124.69 cv
168.568 125.584 168.878 126.545 169.579 127.462 cv
169.598 127.486 li
169.622 127.504 li
170.539 128.205 171.499 128.515 172.394 128.515 cv
174.505 128.515 176.219 126.801 176.219 124.69 cv
175.994 124.69 li
cp
.867155 .762753 0 0 cmyk
f
289.757 64.8618 mo
289.757 66.8491 288.144 68.4619 286.157 68.4619 cv
284.17 68.4619 282.557 66.8491 282.557 64.8618 cv
282.557 62.8746 284.17 61.2618 286.157 61.2618 cv
288.144 61.2618 289.757 62.8746 289.757 64.8618 cv
cp
.749721 .679194 .670497 .901457 cmyk
ef
289.757 64.8618 mo
289.532 64.8618 li
289.528 66.7246 288.02 68.2335 286.157 68.2368 cv
284.294 68.2335 282.785 66.7246 282.782 64.8618 cv
282.785 62.9991 284.294 61.4902 286.157 61.4868 cv
288.02 61.4902 289.528 62.9991 289.532 64.8618 cv
289.757 64.8618 li
289.982 64.8618 li
289.982 62.7502 288.268 61.0371 286.157 61.0368 cv
284.045 61.0371 282.332 62.7502 282.332 64.8618 cv
282.332 66.9735 284.045 68.6866 286.157 68.6869 cv
288.268 68.6866 289.982 66.9735 289.982 64.8618 cv
289.757 64.8618 li
cp
f
260.145 64.8618 mo
260.145 66.8491 258.532 68.4619 256.545 68.4619 cv
254.558 68.4619 252.945 66.8491 252.945 64.8618 cv
252.945 62.8746 254.558 61.2618 256.545 61.2618 cv
258.532 61.2618 260.145 62.8746 260.145 64.8618 cv
cp
ef
260.145 64.8618 mo
259.92 64.8618 li
259.917 66.7246 258.408 68.2335 256.545 68.2368 cv
254.682 68.2335 253.173 66.7246 253.17 64.8618 cv
253.173 62.9991 254.682 61.4902 256.545 61.4868 cv
258.408 61.4902 259.917 62.9991 259.92 64.8618 cv
260.145 64.8618 li
260.37 64.8618 li
260.37 62.7502 258.657 61.0371 256.545 61.0368 cv
254.433 61.0371 252.72 62.7502 252.72 64.8618 cv
252.72 66.9735 254.433 68.6866 256.545 68.6869 cv
258.657 68.6866 260.37 66.9735 260.37 64.8618 cv
260.145 64.8618 li
cp
f
260.145 64.8618 mo
260.145 66.8491 258.532 68.4619 256.545 68.4619 cv
254.558 68.4619 252.945 66.8491 252.945 64.8618 cv
252.945 62.8746 254.558 61.2618 256.545 61.2618 cv
258.532 61.2618 260.145 62.8746 260.145 64.8618 cv
cp
ef
260.145 64.8618 mo
259.92 64.8618 li
259.917 66.7246 258.408 68.2335 256.545 68.2368 cv
254.682 68.2335 253.173 66.7246 253.17 64.8618 cv
253.173 62.9991 254.682 61.4902 256.545 61.4868 cv
258.408 61.4902 259.917 62.9991 259.92 64.8618 cv
260.145 64.8618 li
260.37 64.8618 li
260.37 62.7502 258.657 61.0371 256.545 61.0368 cv
254.433 61.0371 252.72 62.7502 252.72 64.8618 cv
252.72 66.9735 254.433 68.6866 256.545 68.6869 cv
258.657 68.6866 260.37 66.9735 260.37 64.8618 cv
260.145 64.8618 li
cp
f
274.951 64.8618 mo
274.951 66.8491 273.338 68.4619 271.351 68.4619 cv
269.364 68.4619 267.751 66.8491 267.751 64.8618 cv
267.751 62.8746 269.364 61.2618 271.351 61.2618 cv
273.338 61.2618 274.951 62.8746 274.951 64.8618 cv
cp
ef
274.951 64.8618 mo
274.726 64.8618 li
274.722 66.7246 273.214 68.2335 271.351 68.2368 cv
269.488 68.2335 267.979 66.7246 267.976 64.8618 cv
267.979 62.9991 269.488 61.4902 271.351 61.4868 cv
273.214 61.4902 274.722 62.9991 274.726 64.8618 cv
274.951 64.8618 li
275.176 64.8618 li
275.176 62.7502 273.463 61.0371 271.351 61.0368 cv
269.239 61.0371 267.526 62.7502 267.526 64.8618 cv
267.526 66.9735 269.239 68.6866 271.351 68.6869 cv
273.463 68.6866 275.176 66.9735 275.176 64.8618 cv
274.951 64.8618 li
cp
f
245.339 64.8618 mo
245.339 66.8491 243.726 68.4619 241.739 68.4619 cv
239.752 68.4619 238.139 66.8491 238.139 64.8618 cv
238.139 62.8746 239.752 61.2618 241.739 61.2618 cv
243.726 61.2618 245.339 62.8746 245.339 64.8618 cv
cp
ef
245.339 64.8618 mo
245.114 64.8618 li
245.111 66.7246 243.602 68.2335 241.739 68.2368 cv
239.876 68.2335 238.367 66.7246 238.364 64.8618 cv
238.367 62.9991 239.876 61.4902 241.739 61.4868 cv
243.602 61.4902 245.111 62.9991 245.114 64.8618 cv
245.339 64.8618 li
245.564 64.8618 li
245.564 62.7502 243.851 61.0371 241.739 61.0368 cv
239.627 61.0371 237.914 62.7502 237.914 64.8618 cv
237.914 66.9735 239.627 68.6866 241.739 68.6869 cv
243.851 68.6866 245.564 66.9735 245.564 64.8618 cv
245.339 64.8618 li
cp
f
245.339 64.8618 mo
245.339 66.8491 243.726 68.4619 241.739 68.4619 cv
239.752 68.4619 238.139 66.8491 238.139 64.8618 cv
238.139 62.8746 239.752 61.2618 241.739 61.2618 cv
243.726 61.2618 245.339 62.8746 245.339 64.8618 cv
cp
ef
245.339 64.8618 mo
245.114 64.8618 li
245.111 66.7246 243.602 68.2335 241.739 68.2368 cv
239.876 68.2335 238.367 66.7246 238.364 64.8618 cv
238.367 62.9991 239.876 61.4902 241.739 61.4868 cv
243.602 61.4902 245.111 62.9991 245.114 64.8618 cv
245.339 64.8618 li
245.564 64.8618 li
245.564 62.7502 243.851 61.0371 241.739 61.0368 cv
239.627 61.0371 237.914 62.7502 237.914 64.8618 cv
237.914 66.9735 239.627 68.6866 241.739 68.6869 cv
243.851 68.6866 245.564 66.9735 245.564 64.8618 cv
245.339 64.8618 li
cp
f
316.211 41.5808 mo
316.211 43.5681 314.598 45.1809 312.611 45.1809 cv
310.624 45.1809 309.011 43.5681 309.011 41.5808 cv
309.011 39.5936 310.624 37.9808 312.611 37.9808 cv
314.598 37.9808 316.211 39.5936 316.211 41.5808 cv
cp
0 .633692 .380835 0 cmyk
ef
316.211 41.5808 mo
315.986 41.5808 li
315.982 43.4436 314.473 44.9525 312.611 44.9558 cv
310.748 44.9525 309.239 43.4436 309.236 41.5808 cv
309.239 39.7181 310.748 38.2092 312.611 38.2058 cv
314.473 38.2092 315.982 39.7181 315.986 41.5808 cv
316.211 41.5808 li
316.436 41.5808 li
316.435 39.4692 314.722 37.7561 312.611 37.7558 cv
310.499 37.7561 308.786 39.4692 308.786 41.5808 cv
308.786 43.6925 310.499 45.4056 312.611 45.4058 cv
314.722 45.4056 316.435 43.6925 316.436 41.5808 cv
316.211 41.5808 li
cp
0 .993347 1 0 cmyk
f
299.668 42.0808 mo
326.008 42.0808 li
326.008 41.0808 li
299.668 41.0808 li
.749721 .679194 .670497 .901457 cmyk
f
299.668 113.954 mo
326.008 113.954 li
326.008 112.954 li
299.668 112.954 li
f
315.921 113.204 mo
315.921 115.192 314.308 116.804 312.321 116.804 cv
310.334 116.804 308.721 115.192 308.721 113.204 cv
308.721 111.217 310.334 109.604 312.321 109.604 cv
314.308 109.604 315.921 111.217 315.921 113.204 cv
cp
.27158 .251408 0 0 cmyk
ef
315.921 113.204 mo
315.696 113.204 li
315.692 115.067 314.183 116.576 312.321 116.579 cv
310.458 116.576 308.949 115.067 308.946 113.204 cv
308.949 111.342 310.458 109.833 312.321 109.829 cv
314.183 109.833 315.692 111.342 315.696 113.204 cv
315.921 113.204 li
316.146 113.204 li
316.146 111.093 314.432 109.38 312.321 109.379 cv
310.209 109.38 308.496 111.093 308.496 113.204 cv
308.496 115.316 310.209 117.029 312.321 117.029 cv
314.432 117.029 316.146 115.316 316.146 113.204 cv
315.921 113.204 li
cp
.867155 .762753 0 0 cmyk
f
300.02 136.954 mo
326.36 136.954 li
326.36 135.954 li
300.02 135.954 li
.749721 .679194 .670497 .901457 cmyk
f
316.273 136.204 mo
316.273 138.192 314.66 139.804 312.673 139.804 cv
310.686 139.804 309.073 138.192 309.073 136.204 cv
309.073 134.217 310.686 132.604 312.673 132.604 cv
314.66 132.604 316.273 134.217 316.273 136.204 cv
cp
.27158 .251408 0 0 cmyk
ef
316.273 136.204 mo
316.048 136.204 li
316.045 138.067 314.536 139.576 312.673 139.579 cv
310.81 139.576 309.301 138.067 309.298 136.204 cv
309.301 134.342 310.81 132.833 312.673 132.829 cv
314.536 132.833 316.045 134.342 316.048 136.204 cv
316.273 136.204 li
316.498 136.204 li
316.498 134.093 314.785 132.38 312.673 132.379 cv
310.561 132.38 308.848 134.093 308.848 136.204 cv
308.848 138.316 310.561 140.029 312.673 140.029 cv
314.785 140.029 316.498 138.316 316.498 136.204 cv
316.273 136.204 li
cp
.867155 .762753 0 0 cmyk
f
311.946 12.6469 mo
311.946 108.927 li
312.696 108.927 li
312.696 12.6469 li
.88748 .788327 0 0 cmyk
f
312.321 8.12056 mo
311.53 10.2504 310.182 12.893 308.754 14.5311 cv
312.321 13.2409 li
315.887 14.5311 li
314.459 12.893 313.11 10.2504 312.321 8.12056 cv
cp
f
312.321 113.454 mo
311.53 111.324 310.182 108.681 308.754 107.043 cv
312.321 108.333 li
315.887 107.043 li
314.459 108.681 313.11 111.324 312.321 113.454 cv
cp
f
299.151 7.62056 mo
301.151 7.62056 li
301.151 6.62056 li
299.151 6.62056 li
.749721 .679194 .670497 .901457 cmyk
f
305.619 7.62056 mo
310.087 7.62056 li
310.087 6.62056 li
305.619 6.62056 li
cp
314.555 7.62056 mo
319.023 7.62056 li
319.023 6.62056 li
314.555 6.62056 li
cp
f
323.491 7.62056 mo
325.491 7.62056 li
325.491 6.62056 li
323.491 6.62056 li
f
304.424 33.0604 mo
298.318 29.9204 289.36 27.5561 279.015 25.9614 cv
268.671 24.3688 256.946 23.5543 245.339 23.5542 cv
234.43 23.5543 223.627 24.2738 214.175 25.748 cv
204.722 27.2245 196.624 29.4465 191.091 32.4963 cv
191.574 33.3718 li
196.926 30.4161 204.944 28.1981 214.329 26.7361 cv
223.716 25.2718 234.474 24.5541 245.339 24.5542 cv
256.899 24.5541 268.58 25.3663 278.862 26.9497 cv
289.143 28.5311 298.03 30.8921 303.966 33.9496 cv
304.424 33.0604 li
cp
.0697032 .968292 1 .00579843 cmyk
f
309.21 36.8635 mo
307.401 34.434 305.424 31.0081 304.628 28.2219 cv
303.483 33.1479 li
299.452 36.2008 li
302.321 35.7919 306.255 36.2011 309.21 36.8635 cv
cp
f
186.484 36.5327 mo
188.179 34.0219 189.995 30.5081 190.661 27.688 cv
192.034 32.5557 li
196.202 35.4185 li
193.317 35.1429 189.406 35.7341 186.484 36.5327 cv
cp
f
320.81 42.1392 mo
320.87 42.1392 li
321.022 42.1392 li
321.475 42.2525 li
321.51 42.2583 li
322.156 42.317 li
322.975 42.4926 li
323.801 42.7285 li
324.618 43.0203 li
325.36 43.4195 li
325.915 43.9198 li
326.354 44.6323 li
326.463 45.3929 li
326.355 46.0908 li
326.035 46.5708 li
325.647 46.9593 li
325.133 47.3019 li
324.601 47.5975 li
324.551 47.6351 li
324.131 48.0551 li
324.103 48.0894 li
323.743 48.6294 li
323.708 48.72 li
323.588 49.5 li
323.587 49.566 li
323.707 50.406 li
323.736 50.4875 li
324.156 51.2075 li
324.209 51.2699 li
324.809 51.7499 li
324.866 51.7831 li
325.466 52.0231 li
325.55 52.0392 li
326.21 52.0392 li
326.254 52.0348 li
326.854 51.9148 li
326.859 51.9138 li
327.375 51.7992 li
327.967 51.7992 li
328.502 52.0135 li
329.037 52.3878 li
329.413 53.0857 li
329.523 53.853 li
329.414 54.5563 li
329.095 55.0881 li
328.66 55.4691 li
328.141 55.7575 li
328.131 55.7634 li
327.651 56.0634 li
327.622 56.0848 li
327.142 56.5048 li
327.097 56.5584 li
326.737 57.1584 li
326.708 57.2372 li
326.588 57.9572 li
326.587 58.0239 li
326.707 58.9239 li
326.732 59.0009 li
327.152 59.7808 li
327.209 59.8499 li
327.809 60.3299 li
327.891 60.3712 li
328.551 60.5512 li
328.61 60.5592 li
329.21 60.5592 li
329.23 60.5583 li
329.89 60.4983 li
329.914 60.4948 li
330.492 60.3792 li
331.03 60.3792 li
331.618 60.593 li
332.157 61.0237 li
332.534 61.6696 li
332.643 62.4329 li
332.535 63.1307 li
332.224 63.5973 li
331.78 63.9303 li
331.253 64.2819 li
330.721 64.5775 li
330.695 64.5942 li
330.215 64.9542 li
330.163 65.0093 li
329.803 65.5493 li
329.768 65.6399 li
329.648 66.4199 li
329.647 66.486 li
329.767 67.326 li
329.796 67.4075 li
330.216 68.1275 li
330.259 68.1814 li
330.859 68.7214 li
330.919 68.7598 li
331.459 68.9998 li
331.55 69.0191 li
332.03 69.0191 li
332.57 69.0191 li
332.598 69.0174 li
333.064 68.9591 li
333.55 68.9591 li
334.158 69.18 li
334.907 69.5836 li
335.654 70.1583 li
336.352 70.9722 li
336.736 71.5214 li
336.773 71.7433 li
336.703 71.8493 li
336.677 71.903 li
336.617 72.083 li
336.605 72.1542 li
336.605 72.5142 li
336.608 72.5511 li
336.728 73.2711 li
336.739 73.3132 li
337.099 74.2718 li
337.458 75.289 li
337.458 75.2898 li
337.758 76.1298 li
337.762 76.1407 li
338.06 76.8546 li
338.658 78.5298 li
339.082 78.3785 li
338.482 76.6985 li
338.478 76.6876 li
338.18 75.9731 li
337.882 75.1385 li
337.882 75.1393 li
337.522 74.1193 li
337.521 74.1152 li
337.168 73.1756 li
337.055 72.4955 li
337.055 72.1907 li
337.094 72.0739 li
337.197 71.919 li
337.232 71.7571 li
337.172 71.3971 li
337.134 71.3051 li
336.714 70.7051 li
336.701 70.6877 li
335.981 69.8477 li
335.947 69.8158 li
335.167 69.2158 li
335.137 69.196 li
334.357 68.776 li
334.327 68.7627 li
333.667 68.5227 li
333.59 68.5091 li
333.05 68.5091 li
333.022 68.5109 li
332.556 68.5691 li
332.03 68.5691 li
331.598 68.5691 li
331.134 68.363 li
330.587 67.8704 li
330.206 67.2187 li
330.097 66.4554 li
330.205 65.7575 li
330.516 65.291 li
330.953 64.9633 li
331.479 64.6708 li
331.495 64.6614 li
332.035 64.3014 li
332.045 64.2942 li
332.525 63.9342 li
332.577 63.879 li
332.937 63.339 li
332.972 63.2484 li
333.092 62.4684 li
333.093 62.4023 li
332.973 61.5624 li
332.944 61.4808 li
332.524 60.7608 li
332.471 60.6985 li
331.871 60.2185 li
331.807 60.1827 li
331.147 59.9427 li
331.07 59.9292 li
330.47 59.9292 li
330.426 59.9335 li
329.838 60.0512 li
329.2 60.1092 li
328.64 60.1092 li
328.054 59.9494 li
327.526 59.5272 li
327.148 58.8237 li
327.037 57.9979 li
327.145 57.3534 li
327.465 56.8203 li
327.905 56.4354 li
328.364 56.148 li
328.899 55.8509 li
328.938 55.8235 li
329.418 55.4035 li
329.463 55.3499 li
329.823 54.7499 li
329.852 54.6684 li
329.972 53.8884 li
329.973 53.8223 li
329.853 52.9823 li
329.828 52.9075 li
329.408 52.1275 li
329.339 52.0498 li
328.739 51.6298 li
328.694 51.6053 li
328.094 51.3653 li
328.01 51.3492 li
327.35 51.3492 li
327.301 51.3545 li
326.763 51.474 li
326.188 51.5892 li
325.593 51.5892 li
325.065 51.3776 li
324.523 50.9446 li
324.147 50.2988 li
324.037 49.5354 li
324.145 48.8375 li
324.465 48.3575 li
324.847 47.9755 li
325.359 47.6908 li
325.375 47.6814 li
325.915 47.3214 li
325.949 47.2933 li
326.369 46.8733 li
326.397 46.839 li
326.757 46.299 li
326.792 46.2084 li
326.912 45.4284 li
326.913 45.3624 li
326.793 44.5224 li
326.762 44.4363 li
326.282 43.6563 li
326.241 43.6069 li
325.641 43.0669 li
325.597 43.0361 li
324.817 42.6161 li
324.786 42.6023 li
323.946 42.3023 li
323.932 42.2978 li
323.092 42.0578 li
323.077 42.0542 li
322.237 41.8742 li
322.21 41.8701 li
321.568 41.8117 li
321.105 41.6959 li
321.05 41.6892 li
320.87 41.6892 li
320.81 41.6892 li
320.81 42.1392 li
cp
.749721 .679194 .670497 .901457 cmyk
f
335.39 74.1942 mo
338.63 77.8542 li
338.81 72.9942 li
335.39 74.1942 li
cp
0 0 0 1 cmyk
ef
335.39 74.1942 mo
335.222 74.3433 li
338.834 78.4242 li
339.047 72.6725 li
335 74.0927 li
335.222 74.3433 li
335.39 74.1942 li
335.465 74.4065 li
338.573 73.3158 li
338.426 77.2842 li
335.558 74.045 li
335.39 74.1942 li
335.465 74.4065 li
335.39 74.1942 li
cp
.749721 .679194 .670497 .901457 cmyk
f
OEXTJD+SymbolMT*1 [13.5998 0 0 -13.5998 0 0 ]msf
337.041 67.0195 mo
(g)sh
OEXTJF+TimesNewRomanPSMT*1 [11.2 0 0 -11.2 0 0 ]msf
342.632 70.2197 mo
(r)sh
287.867 125.887 mo
314.207 125.887 li
314.207 124.887 li
287.867 124.887 li
f
304.12 125.138 mo
304.12 127.968 300.85 130.038 297.885 127.774 cv
295.62 124.809 297.69 121.538 300.52 121.538 cv
302.507 121.538 304.12 123.151 304.12 125.138 cv
cp
.27158 .251408 0 0 cmyk
ef
304.12 125.138 mo
303.895 125.138 li
303.892 127.001 302.383 128.51 300.52 128.513 cv
299.729 128.513 298.87 128.242 298.021 127.595 cv
297.885 127.774 li
298.063 127.637 li
297.416 126.788 297.146 125.929 297.145 125.138 cv
297.148 123.275 298.657 121.766 300.52 121.763 cv
302.383 121.766 303.892 123.275 303.895 125.138 cv
304.12 125.138 li
304.345 125.138 li
304.345 123.026 302.632 121.313 300.52 121.313 cv
298.408 121.313 296.695 123.026 296.695 125.138 cv
296.695 126.033 297.005 126.993 297.706 127.91 cv
297.724 127.934 li
297.748 127.952 li
298.665 128.653 299.625 128.963 300.52 128.963 cv
302.632 128.963 304.345 127.25 304.345 125.138 cv
304.12 125.138 li
cp
.867155 .762753 0 0 cmyk
f
.749721 .679194 .670497 .901457 cmyk
OEXTJE+MyriadPro-Regular*1 [16.9998 0 0 -16.9998 0 0 ]msf
241.739 38.0288 mo
(B)sh
304.891 27.2971 mo
301.399 25.4373 296.315 23.8244 290.018 22.4296 cv
271.133 18.2523 241.337 16.0815 211.76 16.0803 cv
192.645 16.0804 173.628 16.9886 157.72 18.857 cv
149.766 19.7914 142.59 20.9656 136.561 22.3894 cv
130.532 23.8147 125.654 25.4832 122.272 27.4389 cv
122.773 28.3044 li
126.007 26.4303 130.816 24.7725 136.791 23.3626 cv
154.723 19.1254 183.138 17.0789 211.76 17.0803 cv
231.443 17.0802 251.232 18.0458 267.796 19.9209 cv
276.078 20.8583 283.553 22.0233 289.802 23.406 cv
296.049 24.7871 301.072 26.3924 304.421 28.1796 cv
304.891 27.2971 li
cp
.0697032 .968292 1 .00579843 cmyk
f
309.21 31.6967 mo
307.706 29.0679 306.153 25.4297 305.697 22.5682 cv
303.969 27.3215 li
299.602 29.8692 li
302.499 29.8071 306.356 30.685 309.21 31.6967 cv
cp
f
118.097 31.9775 mo
119.52 29.3035 120.959 25.619 121.327 22.7448 cv
123.2 27.4424 li
127.645 29.8538 li
124.747 29.8813 120.919 30.878 118.097 31.9775 cv
cp
f
.749721 .679194 .670497 .901457 cmyk
OEXTJE+MyriadPro-Regular*1 [16.9998 0 0 -16.9998 0 0 ]msf
211.773 14.229 mo
(B)sh
gsave
23.7325 165.25 mo
183.769 165.25 li
183.769 264.414 li
23.7325 264.414 li
23.7325 165.25 li
eclp
27.3152 215.002 mo
27.3561 214.982 li
27.2097 214.689 li
27.2097 215.016 li
27.2711 215.016 li
27.3114 215.016 li
27.4281 214.987 li
27.608 214.947 li
27.6244 214.943 li
27.7018 214.918 li
27.7239 214.91 li
27.7465 214.899 li
27.8057 214.887 li
27.81 214.886 li
27.9966 214.845 li
28.0361 214.836 li
28.1132 214.797 li
28.1146 214.797 li
28.1739 214.785 li
28.194 214.781 li
28.3973 214.713 li
28.4022 214.712 li
28.7956 214.567 li
28.6825 214.259 li
28.6825 214.587 li
28.7234 214.587 li
28.8007 214.587 li
28.8985 214.538 li
28.9881 214.502 li
28.9938 214.5 li
29.1836 214.415 li
29.5372 214.258 li
29.5837 214.243 li
29.6057 214.235 li
29.6674 214.204 li
29.7492 214.164 li
29.9539 214.061 li
30.322 213.877 li
30.3696 213.853 li
30.4481 213.775 li
30.2166 213.544 li
30.32 213.854 li
30.3814 213.834 li
30.4154 213.822 li
30.5485 213.742 li
30.7531 213.62 li
30.7582 213.617 li
31.1722 213.348 li
31.201 213.329 li
31.2432 213.287 li
31.2709 213.268 li
31.3667 213.211 li
31.3857 213.199 li
31.6036 213.025 li
32.0084 212.721 li
32.027 212.707 li
32.0615 212.673 li
32.0958 212.65 li
32.1228 212.632 li
32.2351 212.52 li
32.4256 212.367 li
32.4397 212.356 li
32.8412 211.954 li
32.8425 211.953 li
33.6381 211.138 li
33.6708 211.116 li
33.7253 211.08 li
33.7845 210.991 li
33.8638 210.911 li
33.8754 210.9 li
34.0699 210.662 li
34.438 210.212 li
34.4409 210.209 li
35.2277 209.194 li
35.2752 209.123 li
35.3134 209.066 li
35.4124 208.927 li
35.4133 208.926 li
35.5993 208.657 li
35.5978 208.659 li
35.9865 208.107 li
35.9899 208.102 li
36.7602 206.915 li
36.7961 206.844 li
36.8398 206.785 li
36.852 206.769 li
36.9422 206.611 li
37.1225 206.311 li
37.5089 205.701 li
37.5135 205.693 li
38.2552 204.375 li
39.7494 201.652 li
42.9846 195.592 li
43.0143 195.532 li
43.0579 195.474 li
43.0757 195.45 li
43.1656 195.27 li
43.3646 194.932 li
43.3661 194.93 li
43.7348 194.274 li
44.4953 192.979 li
44.5279 192.914 li
44.5715 192.856 li
44.5838 192.84 li
44.6757 192.679 li
44.6766 192.677 li
44.8556 192.359 li
45.238 191.775 li
45.995 190.609 li
46.0294 190.557 li
46.0852 190.483 li
46.0873 190.48 li
46.192 190.334 li
46.1951 190.329 li
46.398 190.025 li
46.8004 189.482 li
47.6361 188.395 li
47.6673 188.333 li
47.6911 188.309 li
47.7017 188.299 li
47.8134 188.164 li
48.0161 187.921 li
48.4176 187.46 li
49.2504 186.585 li
49.2707 186.555 li
49.2776 186.55 li
49.3046 186.532 li
49.4298 186.407 li
49.6079 186.229 li
50.0105 185.866 li
50.017 185.861 li
50.041 185.836 li
50.0753 185.814 li
50.1023 185.796 li
50.2147 185.683 li
50.4051 185.531 li
50.4034 185.532 li
50.782 185.233 li
50.8323 185.2 li
50.8592 185.182 li
50.9101 185.131 li
50.99 185.067 li
51.1861 184.93 li
51.587 184.649 li
52.3644 184.171 li
52.3924 184.157 li
52.4333 184.136 li
52.4446 184.131 li
52.5527 184.066 li
52.7259 183.97 li
53.0673 183.799 li
53.1067 183.786 li
53.1285 183.778 li
53.178 183.754 li
53.2676 183.718 li
53.2733 183.716 li
53.4632 183.631 li
53.8313 183.468 li
53.8384 183.464 li
53.8648 183.451 li
53.9041 183.438 li
53.9262 183.431 li
54.0079 183.39 li
54.17 183.336 li
54.1749 183.334 li
54.5683 183.189 li
54.4552 182.882 li
54.4552 183.209 li
54.4961 183.209 li
54.5733 183.209 li
54.6443 183.174 li
54.7036 183.162 li
54.7236 183.158 li
54.9268 183.09 li
55.2447 182.984 li
55.2529 182.984 li
55.3302 182.984 li
55.401 182.949 li
55.4603 182.937 li
55.4756 182.934 li
55.6487 182.882 li
55.662 182.882 li
55.7392 182.882 li
55.8102 182.847 li
55.8695 182.835 li
56.0739 182.794 li
56.0939 182.79 li
56.1746 182.763 li
56.0711 182.453 li
56.0711 182.78 li
56.112 182.78 li
56.1443 182.78 li
56.2784 182.753 li
56.483 182.712 li
56.8603 182.637 li
56.8688 182.637 li
56.9219 182.637 li
56.9833 182.616 li
57.0325 182.616 li
57.0648 182.616 li
57.2693 182.575 li
57.2779 182.575 li
57.3393 182.575 li
57.3716 182.575 li
57.4917 182.551 li
57.6619 182.532 li
57.6962 182.529 li
57.7905 182.497 li
57.687 182.187 li
57.687 182.514 li
57.7279 182.514 li
57.7602 182.514 li
57.8785 182.49 li
58.0673 182.471 li
58.4601 182.432 li
58.5052 182.432 li
58.5461 182.432 li
58.6279 182.432 li
58.6442 182.432 li
58.8487 182.412 li
58.8734 182.412 li
58.9143 182.412 li
58.9466 182.412 li
59.0489 182.391 li
59.2007 182.391 li
59.262 182.391 li
59.3395 182.391 li
59.3804 182.371 li
59.4052 182.371 li
59.5893 182.371 li
59.6302 182.371 li
59.7074 182.371 li
59.7483 182.35 li
59.7734 182.35 li
59.9575 182.35 li
60.0188 182.35 li
60.0597 182.35 li
60.0921 182.35 li
60.1944 182.33 li
60.3461 182.33 li
60.387 182.33 li
60.4484 182.33 li
60.5302 182.33 li
60.5484 182.33 li
60.7324 182.309 li
60.7757 182.309 li
60.8166 182.309 li
60.9188 182.309 li
60.9597 182.309 li
61.0006 182.309 li
61.1029 182.309 li
61.1438 182.309 li
61.2052 182.309 li
61.287 182.309 li
61.4916 182.309 li
61.5325 182.309 li
61.5734 182.309 li
61.6757 182.309 li
61.7166 182.309 li
61.7938 182.309 li
61.8347 182.289 li
61.8597 182.289 li
61.9007 182.289 li
61.9416 182.289 li
62.0438 182.289 li
62.2279 182.289 li
62.2688 182.289 li
62.3097 182.289 li
62.412 182.289 li
62.4529 182.289 li
62.5143 182.289 li
62.5961 182.289 li
62.637 182.289 li
62.6984 182.289 li
62.7802 182.289 li
62.8211 182.289 li
62.8825 182.289 li
62.9643 182.289 li
63.0257 182.289 li
63.0666 182.289 li
63.1075 182.289 li
63.1484 182.289 li
63.2097 182.289 li
63.2506 182.289 li
63.3325 182.289 li
63.3938 182.289 li
63.4347 182.289 li
63.4757 182.289 li
63.5166 182.289 li
63.5779 182.289 li
63.6188 182.289 li
63.7211 182.289 li
63.762 182.289 li
63.8029 182.289 li
63.8438 182.289 li
63.9052 182.289 li
63.9461 182.289 li
63.987 182.289 li
64.0279 182.289 li
64.0893 182.289 li
64.1302 182.289 li
64.1711 182.289 li
64.2325 182.289 li
64.2734 182.289 li
64.3143 182.289 li
64.3552 182.289 li
64.4166 182.289 li
64.4575 182.289 li
64.4984 182.289 li
64.5597 182.289 li
64.6007 182.289 li
64.662 182.289 li
64.7029 182.289 li
64.7643 182.289 li
64.8052 182.289 li
64.8666 182.289 li
64.9075 182.289 li
64.9688 182.289 li
65.0097 182.289 li
65.0711 182.289 li
65.112 182.289 li
65.1529 182.289 li
65.2143 182.289 li
65.2552 182.289 li
65.3575 182.289 li
65.4597 182.289 li
65.5211 182.289 li
65.562 182.289 li
65.6234 182.289 li
65.6643 182.289 li
65.7257 182.289 li
65.7666 182.289 li
65.8075 182.289 li
65.8688 182.289 li
65.9097 182.289 li
65.9711 182.289 li
66.012 182.289 li
66.0734 182.289 li
66.1143 182.289 li
66.1757 182.289 li
66.2166 182.289 li
66.2779 182.289 li
66.3188 182.289 li
66.3802 182.289 li
66.4211 182.289 li
66.4825 182.289 li
66.5234 182.289 li
66.5643 182.289 li
66.6256 182.289 li
66.6666 182.289 li
66.7279 182.289 li
66.7688 182.289 li
66.8302 182.289 li
66.8711 182.289 li
66.9325 182.289 li
66.9734 182.289 li
67.0347 182.289 li
67.0757 182.289 li
67.137 182.289 li
67.1779 182.289 li
67.2393 182.289 li
67.2802 182.289 li
67.3211 182.289 li
67.3825 182.289 li
67.4234 182.289 li
67.4847 182.289 li
67.5257 182.289 li
67.587 182.289 li
67.6893 182.289 li
67.7302 182.289 li
67.7711 182.289 li
67.8734 182.289 li
67.9143 182.289 li
67.9757 182.289 li
68.0575 182.289 li
68.0984 182.289 li
68.1597 182.289 li
68.2416 182.289 li
68.3029 182.289 li
68.3438 182.289 li
68.4461 182.289 li
68.487 182.289 li
68.5279 182.289 li
68.6302 182.289 li
68.6711 182.289 li
68.712 182.289 li
68.8143 182.289 li
68.8552 182.289 li
68.9166 182.289 li
68.9801 182.289 li
69.1463 182.307 li
69.1643 182.309 li
69.2438 182.309 li
69.2847 182.309 li
69.387 182.309 li
69.4279 182.309 li
69.4688 182.309 li
69.5711 182.309 li
69.612 182.309 li
69.6529 182.309 li
69.7552 182.309 li
69.9393 182.309 li
69.9802 182.309 li
70.0416 182.309 li
70.1072 182.309 li
70.2954 182.328 li
70.3117 182.33 li
70.3688 182.33 li
70.4097 182.33 li
70.512 182.33 li
70.6961 182.33 li
70.737 182.33 li
70.766 182.33 li
70.8365 182.344 li
70.8683 182.35 li
71.1052 182.35 li
71.1461 182.35 li
71.1751 182.35 li
71.2456 182.364 li
71.2774 182.371 li
71.5143 182.371 li
71.5552 182.371 li
71.5841 182.371 li
71.6545 182.385 li
71.6864 182.391 li
71.9234 182.391 li
71.9234 182.064 li
71.7771 182.357 li
71.818 182.377 li
71.887 182.412 li
72.0257 182.412 li
72.1119 182.412 li
72.2999 182.431 li
72.3162 182.432 li
72.3734 182.432 li
72.4024 182.432 li
72.4729 182.446 li
72.4884 182.449 li
72.709 182.471 li
72.7253 182.473 li
72.7825 182.473 li
72.8115 182.473 li
72.8819 182.487 li
72.8976 182.49 li
73.1181 182.512 li
73.1344 182.514 li
73.1916 182.514 li
73.2206 182.514 li
73.291 182.528 li
73.3069 182.531 li
73.5182 182.552 li
73.8706 182.608 li
73.9063 182.62 li
73.9566 182.637 li
74.0183 182.637 li
74.0888 182.651 li
74.2932 182.692 li
74.3251 182.698 li
74.4188 182.698 li
74.4188 182.371 li
74.2725 182.664 li
74.3134 182.684 li
74.3825 182.719 li
74.5296 182.719 li
74.6594 182.745 li
74.6611 182.745 li
74.7302 182.78 li
74.8286 182.78 li
74.8642 182.789 li
75.0611 182.848 li
75.0758 182.852 li
75.4571 182.929 li
75.4589 182.929 li
75.4797 182.94 li
75.5631 182.968 li
75.5824 182.974 li
75.6846 182.995 li
75.8494 183.049 li
75.8541 183.051 li
76.2409 183.167 li
76.2566 183.175 li
76.2774 183.185 li
76.3608 183.213 li
76.38 183.22 li
76.4728 183.238 li
76.6496 183.309 li
76.6531 183.31 li
77.0295 183.449 li
77.0543 183.461 li
77.075 183.472 li
77.1363 183.492 li
77.1975 183.523 li
77.2042 183.526 li
77.395 183.611 li
77.3983 183.612 li
77.7798 183.773 li
77.8108 183.788 li
77.8111 183.789 li
77.841 183.803 li
77.9323 183.858 li
77.9495 183.869 li
78.1385 183.953 li
78.494 184.15 li
78.5003 184.154 li
78.5292 184.168 li
78.5737 184.198 li
78.5907 184.209 li
78.6723 184.25 li
78.8395 184.361 li
78.8481 184.367 li
79.2315 184.589 li
79.9545 185.111 li
79.9951 185.14 li
80.104 185.177 li
80.2075 184.866 li
79.9761 185.098 li
80.017 185.139 li
80.0297 185.151 li
80.1461 185.245 li
80.3508 185.408 li
80.7202 185.704 li
80.7329 185.723 li
80.7692 185.777 li
80.8731 185.846 li
80.957 185.914 li
81.1481 186.086 li
81.5306 186.468 li
81.5535 186.491 li
81.5874 186.514 li
81.592 186.521 li
81.61 186.547 li
81.7351 186.673 li
81.9369 186.874 li
82.3381 187.296 li
83.1377 188.215 li
83.167 188.259 li
83.185 188.286 li
83.2383 188.339 li
83.3255 188.444 li
83.5047 188.683 li
83.5071 188.686 li
83.8943 189.175 li
84.6422 190.206 li
86.1411 192.515 li
86.1739 192.581 li
86.187 192.607 li
86.2527 192.695 li
86.3441 192.859 li
86.3482 192.867 li
86.5548 193.197 li
86.9601 193.886 li
87.7754 195.333 li
89.4105 198.358 li
89.4101 198.358 li
92.6331 204.352 li
92.6916 204.43 li
92.716 204.479 li
92.7948 204.656 li
92.8041 204.677 li
93.018 205.019 li
93.3835 205.649 li
93.3851 205.651 li
94.1471 206.908 li
94.1807 206.958 li
94.2124 207.022 li
94.2239 207.045 li
94.3335 207.198 li
94.5109 207.494 li
94.5148 207.5 li
94.8874 208.059 li
94.8895 208.062 li
95.6345 209.13 li
95.6648 209.19 li
95.6885 209.237 li
95.7682 209.317 li
95.8548 209.438 li
95.858 209.443 li
96.0663 209.714 li
96.0681 209.716 li
96.4703 210.219 li
96.5034 210.268 li
96.5214 210.295 li
96.5951 210.369 li
96.6879 210.48 li
96.8924 210.726 li
96.8968 210.731 li
97.2942 211.168 li
97.3215 211.209 li
97.3395 211.236 li
97.4238 211.32 li
97.5199 211.417 li
97.6983 211.615 li
97.704 211.621 li
98.1192 212.036 li
98.127 212.044 li
98.9452 212.76 li
98.9784 212.793 li
99.033 212.848 li
99.0943 212.868 li
99.1215 212.895 li
99.1417 212.916 li
99.3679 213.074 li
99.734 213.338 li
99.7388 213.342 li
99.8055 213.386 li
99.8226 213.398 li
99.8704 213.422 li
99.9549 213.472 li
100.133 213.591 li
100.138 213.594 li
100.506 213.819 li
100.562 213.857 li
100.579 213.868 li
100.627 213.892 li
100.719 213.947 li
100.723 213.95 li
100.912 214.055 li
100.921 214.06 li
101.316 214.247 li
101.354 214.266 li
101.395 214.286 li
101.408 214.292 li
101.517 214.336 li
101.695 214.415 li
101.705 214.42 li
102.086 214.56 li
102.111 214.573 li
102.152 214.593 li
102.191 214.613 li
102.317 214.638 li
102.459 214.685 li
102.479 214.695 li
102.52 214.716 li
102.559 214.735 li
102.685 214.76 li
102.827 214.808 li
102.847 214.818 li
102.916 214.853 li
102.978 214.853 li
102.991 214.859 li
103.027 214.877 li
103.234 214.923 li
103.279 214.938 li
103.329 214.955 li
103.383 214.955 li
103.414 214.963 li
103.441 214.972 li
103.461 214.982 li
103.53 215.016 li
103.648 215.016 li
104.017 215.016 li
104.017 214.362 li
103.648 214.362 li
103.607 214.362 li
103.607 214.689 li
103.754 214.396 li
103.713 214.376 li
103.692 214.365 li
103.609 214.338 li
103.597 214.334 li
103.503 214.31 li
103.464 214.3 li
103.436 214.3 li
103.425 214.297 li
103.408 214.291 li
103.247 214.256 li
103.202 214.233 li
103.132 214.198 li
102.994 214.198 li
102.994 214.525 li
103.14 214.233 li
103.1 214.212 li
103.079 214.202 li
102.872 214.133 li
102.853 214.127 li
102.774 214.111 li
102.772 214.11 li
102.731 214.089 li
102.71 214.079 li
102.504 214.01 li
102.485 214.004 li
102.406 213.988 li
102.404 213.987 li
102.363 213.967 li
102.347 213.959 li
101.951 213.813 li
101.777 213.735 li
101.771 213.733 li
101.676 213.695 li
101.647 213.68 li
101.606 213.66 li
101.603 213.658 li
101.221 213.477 li
101.05 213.383 li
100.953 213.324 li
100.942 213.318 li
100.908 213.301 li
100.864 213.271 li
100.859 213.268 li
100.491 213.043 li
100.312 212.924 li
100.305 212.919 li
100.196 212.854 li
100.185 212.847 li
100.152 212.83 li
100.112 212.804 li
99.7491 212.542 li
99.7472 212.54 li
99.5641 212.412 li
99.5026 212.351 li
99.4479 212.296 li
99.3132 212.251 li
99.2097 212.562 li
99.4411 212.33 li
99.4002 212.289 li
99.3926 212.282 li
98.5744 211.566 li
98.1791 211.171 li
98.0007 210.972 li
97.995 210.966 li
97.8866 210.858 li
97.8482 210.819 li
97.8253 210.785 li
97.8116 210.764 li
97.3907 210.301 li
97.1907 210.061 li
97.0884 209.939 li
97.0789 209.927 li
97.03 209.878 li
97.007 209.844 li
96.9992 209.832 li
96.5833 209.312 li
96.384 209.053 li
96.2851 208.915 li
96.2694 208.893 li
96.2264 208.85 li
96.2093 208.815 li
96.1986 208.794 li
95.4299 207.693 li
95.0681 207.15 li
94.8881 206.85 li
94.8813 206.839 li
94.7865 206.706 li
94.757 206.647 li
94.7479 206.629 li
94.6996 206.556 li
93.9479 205.317 li
93.5814 204.686 li
93.5788 204.682 li
93.3835 204.369 li
93.3111 204.206 li
93.3081 204.199 li
93.2638 204.111 li
93.2506 204.084 li
93.1864 203.999 li
89.9866 198.048 li
89.9863 198.047 li
88.3486 195.017 li
87.5277 193.56 li
87.1168 192.862 li
87.1146 192.858 li
86.9122 192.534 li
86.814 192.357 li
86.8032 192.338 li
86.7461 192.262 li
86.7183 192.206 li
86.7101 192.19 li
85.1818 189.835 li
84.416 188.78 li
84.0262 188.288 li
83.8443 188.045 li
83.8393 188.038 li
83.7316 187.909 li
83.722 187.898 li
83.6936 187.869 li
83.6706 187.835 li
83.659 187.817 li
82.8222 186.855 li
82.4081 186.42 li
82.4055 186.417 li
82.198 186.21 li
82.1186 186.13 li
82.0956 186.096 li
82.0593 186.042 li
81.9706 185.982 li
81.6048 185.617 li
81.5988 185.611 li
81.3878 185.421 li
81.3806 185.414 li
81.271 185.327 li
81.26 185.318 li
81.2412 185.305 li
81.2366 185.298 li
81.2084 185.256 li
80.7596 184.897 li
80.5551 184.733 li
80.4669 184.663 li
80.4388 184.635 li
80.3842 184.58 li
80.2971 184.551 li
79.6013 184.049 li
79.5879 184.039 li
79.1938 183.811 li
79.0186 183.694 li
79.0015 183.683 li
78.9196 183.642 li
78.8753 183.612 li
78.8583 183.601 li
78.8056 183.574 li
78.4437 183.373 li
78.431 183.366 li
78.2518 183.287 li
78.1667 183.236 li
78.1557 183.229 li
78.1038 183.203 li
78.1041 183.203 li
78.0632 183.183 li
78.0533 183.178 li
77.6572 183.011 li
77.4836 182.934 li
77.4083 182.896 li
77.3877 182.886 li
77.3264 182.865 li
77.3061 182.855 li
77.2899 182.847 li
76.8893 182.7 li
76.6881 182.619 li
76.6602 182.608 li
76.5485 182.586 li
76.5284 182.579 li
76.5083 182.569 li
76.4831 182.556 li
76.0516 182.427 li
75.8724 182.367 li
75.853 182.361 li
75.7509 182.34 li
75.7307 182.334 li
75.7106 182.324 li
75.6714 182.304 li
75.2346 182.217 li
75.0447 182.16 li
75.0373 182.157 li
74.9482 182.135 li
74.9091 182.125 li
74.8075 182.125 li
74.8075 182.453 li
74.9538 182.16 li
74.9129 182.139 li
74.8737 182.12 li
74.6262 182.07 li
74.5943 182.064 li
74.4597 182.064 li
74.4597 182.391 li
74.6061 182.099 li
74.5651 182.078 li
74.496 182.044 li
74.3899 182.044 li
74.2172 182.009 li
74.1148 181.989 li
74.083 181.982 li
74.0628 181.982 li
74.0518 181.979 li
74.0263 181.97 li
73.6108 181.904 li
73.6012 181.903 li
73.4036 181.883 li
73.3171 181.866 li
73.2852 181.859 li
73.1916 181.859 li
73.1667 181.859 li
72.9947 181.842 li
72.908 181.825 li
72.8762 181.819 li
72.7825 181.819 li
72.7579 181.819 li
72.5854 181.801 li
72.4989 181.784 li
72.4671 181.778 li
72.3734 181.778 li
72.3485 181.778 li
72.1605 181.759 li
72.1441 181.757 li
72.0257 181.757 li
71.9643 181.757 li
71.9643 182.084 li
72.1106 181.792 li
72.0697 181.771 li
72.0006 181.737 li
71.7513 181.737 li
71.6809 181.723 li
71.649 181.716 li
71.5552 181.716 li
71.5143 181.716 li
71.3421 181.716 li
71.2716 181.702 li
71.2398 181.696 li
71.1461 181.696 li
71.1052 181.696 li
70.9329 181.696 li
70.8625 181.682 li
70.8307 181.675 li
70.737 181.675 li
70.6961 181.675 li
70.512 181.675 li
70.4097 181.675 li
70.3688 181.675 li
70.3442 181.675 li
70.1559 181.657 li
70.1396 181.655 li
70.0416 181.655 li
69.9802 181.655 li
69.9393 181.655 li
69.7552 181.655 li
69.6529 181.655 li
69.612 181.655 li
69.5711 181.655 li
69.4688 181.655 li
69.4279 181.655 li
69.387 181.655 li
69.2847 181.655 li
69.2438 181.655 li
69.2004 181.655 li
69.0345 181.636 li
69.0166 181.634 li
68.9166 181.634 li
68.8552 181.634 li
68.8143 181.634 li
68.712 181.634 li
68.6711 181.634 li
68.6302 181.634 li
68.5279 181.634 li
68.487 181.634 li
68.4461 181.634 li
68.3438 181.634 li
68.3029 181.634 li
68.2416 181.634 li
68.1597 181.634 li
68.0984 181.634 li
68.0575 181.634 li
67.9757 181.634 li
67.9143 181.634 li
67.8734 181.634 li
67.7711 181.634 li
67.7302 181.634 li
67.6893 181.634 li
67.587 181.634 li
67.5257 181.634 li
67.4847 181.634 li
67.4234 181.634 li
67.3825 181.634 li
67.3211 181.634 li
67.2802 181.634 li
67.2393 181.634 li
67.1779 181.634 li
67.137 181.634 li
67.0757 181.634 li
67.0347 181.634 li
66.9734 181.634 li
66.9325 181.634 li
66.8711 181.634 li
66.8302 181.634 li
66.7688 181.634 li
66.7279 181.634 li
66.6666 181.634 li
66.6256 181.634 li
66.5643 181.634 li
66.5234 181.634 li
66.4825 181.634 li
66.4211 181.634 li
66.3802 181.634 li
66.3188 181.634 li
66.2779 181.634 li
66.2166 181.634 li
66.1757 181.634 li
66.1143 181.634 li
66.0734 181.634 li
66.012 181.634 li
65.9711 181.634 li
65.9097 181.634 li
65.8688 181.634 li
65.8075 181.634 li
65.7666 181.634 li
65.7257 181.634 li
65.6643 181.634 li
65.6234 181.634 li
65.562 181.634 li
65.5211 181.634 li
65.4597 181.634 li
65.3575 181.634 li
65.2552 181.634 li
65.2143 181.634 li
65.1529 181.634 li
65.112 181.634 li
65.0711 181.634 li
65.0097 181.634 li
64.9688 181.634 li
64.9075 181.634 li
64.8666 181.634 li
64.8052 181.634 li
64.7643 181.634 li
64.7029 181.634 li
64.662 181.634 li
64.6007 181.634 li
64.5597 181.634 li
64.4984 181.634 li
64.4575 181.634 li
64.4166 181.634 li
64.3552 181.634 li
64.3143 181.634 li
64.2734 181.634 li
64.2325 181.634 li
64.1711 181.634 li
64.1302 181.634 li
64.0893 181.634 li
64.0279 181.634 li
63.987 181.634 li
63.9461 181.634 li
63.9052 181.634 li
63.8438 181.634 li
63.8029 181.634 li
63.762 181.634 li
63.7211 181.634 li
63.6188 181.634 li
63.5779 181.634 li
63.5166 181.634 li
63.4757 181.634 li
63.4347 181.634 li
63.3938 181.634 li
63.3325 181.634 li
63.2506 181.634 li
63.2097 181.634 li
63.1484 181.634 li
63.1075 181.634 li
63.0666 181.634 li
63.0257 181.634 li
62.9643 181.634 li
62.8825 181.634 li
62.8211 181.634 li
62.7802 181.634 li
62.6984 181.634 li
62.637 181.634 li
62.5961 181.634 li
62.5143 181.634 li
62.4529 181.634 li
62.412 181.634 li
62.3097 181.634 li
62.2688 181.634 li
62.2279 181.634 li
62.0438 181.634 li
61.9416 181.634 li
61.9007 181.634 li
61.8597 181.634 li
61.7575 181.634 li
61.6802 181.634 li
61.5702 181.689 li
61.7166 181.982 li
61.7166 181.655 li
61.6757 181.655 li
61.5734 181.655 li
61.5325 181.655 li
61.4916 181.655 li
61.287 181.655 li
61.2052 181.655 li
61.1438 181.655 li
61.1029 181.655 li
61.0006 181.655 li
60.9597 181.655 li
60.9188 181.655 li
60.8166 181.655 li
60.7757 181.655 li
60.7143 181.655 li
60.6961 181.655 li
60.5121 181.675 li
60.4484 181.675 li
60.387 181.675 li
60.3461 181.675 li
60.162 181.675 li
60.1296 181.675 li
60.0274 181.696 li
60.0188 181.696 li
59.9575 181.696 li
59.7734 181.696 li
59.6711 181.696 li
59.5939 181.696 li
59.4839 181.751 li
59.6302 182.044 li
59.6302 181.716 li
59.5893 181.716 li
59.4052 181.716 li
59.3029 181.716 li
59.2255 181.716 li
59.1153 181.771 li
59.262 182.064 li
59.262 181.737 li
59.2007 181.737 li
59.0166 181.737 li
58.9843 181.737 li
58.882 181.757 li
58.8734 181.757 li
58.8325 181.757 li
58.8164 181.757 li
58.6117 181.778 li
58.5461 181.778 li
58.5052 181.778 li
58.4438 181.778 li
58.4275 181.778 li
58.0022 181.82 li
57.7976 181.841 li
57.7817 181.842 li
57.6956 181.859 li
57.687 181.859 li
57.6339 181.859 li
57.555 181.886 li
57.4053 181.902 li
57.3914 181.904 li
57.3069 181.921 li
57.2779 181.921 li
57.237 181.921 li
57.2047 181.921 li
57.0001 181.962 li
56.9302 181.962 li
56.8771 181.962 li
56.7654 181.999 li
56.8688 182.309 li
56.8688 181.982 li
56.8279 181.982 li
56.7955 181.982 li
56.3546 182.07 li
56.1501 182.111 li
56.0797 182.125 li
56.0711 182.125 li
56.018 182.125 li
55.9256 182.156 li
55.741 182.193 li
55.6386 182.214 li
55.5957 182.222 li
55.5157 182.262 li
55.662 182.555 li
55.662 182.228 li
55.6007 182.228 li
55.5526 182.228 li
55.3167 182.298 li
55.2297 182.316 li
55.1867 182.324 li
55.1066 182.364 li
55.2529 182.657 li
55.2529 182.33 li
55.1916 182.33 li
55.1385 182.33 li
54.7199 182.469 li
54.5551 182.524 li
54.4727 182.541 li
54.4298 182.549 li
54.3498 182.589 li
54.4961 182.882 li
54.4961 182.555 li
54.4552 182.555 li
54.3968 182.555 li
53.9581 182.717 li
53.779 182.776 li
53.757 182.784 li
53.6751 182.824 li
53.6358 182.838 li
53.6138 182.845 li
53.5588 182.872 li
53.1973 183.033 li
53.019 183.112 li
52.9223 183.151 li
52.9097 183.156 li
52.8772 183.172 li
52.8378 183.185 li
52.8159 183.193 li
52.427 183.387 li
52.4208 183.39 li
52.2304 183.496 li
52.2256 183.499 li
52.1295 183.556 li
52.0998 183.571 li
52.0589 183.592 li
52.0461 183.598 li
51.2359 184.097 li
51.2279 184.102 li
50.8107 184.394 li
50.6061 184.537 li
50.5976 184.543 li
50.4872 184.631 li
50.4731 184.642 li
50.4421 184.673 li
50.4076 184.696 li
50.3967 184.704 li
49.9979 185.019 li
49.995 185.021 li
49.7917 185.183 li
49.7776 185.195 li
49.6853 185.287 li
49.651 185.31 li
49.6239 185.328 li
49.5661 185.386 li
49.1635 185.748 li
49.1573 185.754 li
48.967 185.944 li
48.8876 186.023 li
48.8533 186.046 li
48.7988 186.083 li
48.7373 186.175 li
47.9337 187.019 li
47.5196 187.495 li
47.5174 187.497 li
47.3106 187.745 li
47.2178 187.857 li
47.167 187.908 li
47.1294 187.945 li
47.0788 188.046 li
46.2783 189.087 li
45.8672 189.642 li
45.8623 189.649 li
45.6561 189.958 li
45.5589 190.094 li
45.5002 190.172 li
45.4947 190.179 li
45.4487 190.248 li
45.4477 190.25 li
44.6898 191.418 li
44.3019 192.01 li
44.2958 192.019 li
44.1063 192.356 li
44.1074 192.354 li
44.0358 192.479 li
43.9866 192.545 li
43.9688 192.569 li
43.9197 192.667 li
43.1669 193.949 li
42.7987 194.603 li
42.5958 194.948 li
42.5902 194.958 li
42.5166 195.105 li
42.473 195.163 li
42.4552 195.187 li
42.403 195.291 li
39.1745 201.34 li
37.6829 204.057 li
36.9515 205.357 li
36.5674 205.964 li
36.5653 205.967 li
36.3791 206.277 li
36.3774 206.28 li
36.3039 206.409 li
36.2547 206.475 li
36.237 206.498 li
36.1912 206.59 li
35.4478 207.735 li
35.0625 208.283 li
35.0617 208.284 li
34.8787 208.548 li
34.7776 208.69 li
34.7744 208.694 li
34.7306 208.76 li
34.6962 208.811 li
33.9283 209.802 li
33.5633 210.248 li
33.3895 210.46 li
33.2988 210.551 li
33.2758 210.574 li
33.2532 210.608 li
33.2464 210.612 li
33.2178 210.631 li
32.3771 211.493 li
32.0025 211.867 li
31.8121 212.02 li
31.798 212.031 li
31.7058 212.123 li
31.6714 212.146 li
31.6443 212.164 li
31.597 212.212 li
31.2066 212.504 li
31.2024 212.508 li
31.0111 212.661 li
30.9278 212.711 li
30.9213 212.715 li
30.8533 212.76 li
30.8262 212.778 li
30.7867 212.817 li
30.4116 213.061 li
30.2118 213.181 li
30.1404 213.224 li
30.1131 213.233 li
30.0397 213.257 li
29.9817 213.316 li
29.6611 213.476 li
29.4565 213.578 li
29.3748 213.619 li
29.3547 213.629 li
29.3154 213.642 li
29.3005 213.647 li
28.9177 213.817 li
28.7394 213.896 li
28.6428 213.935 li
28.63 213.94 li
28.5771 213.967 li
28.7234 214.259 li
28.7234 213.932 li
28.6825 213.932 li
28.6241 213.932 li
28.1854 214.094 li
28.0255 214.147 li
27.9433 214.164 li
27.9003 214.172 li
27.8203 214.212 li
27.8151 214.215 li
27.674 214.246 li
27.5751 214.266 li
27.5322 214.274 li
27.4729 214.304 li
27.4493 214.312 li
27.282 214.349 li
27.2786 214.35 li
27.2308 214.362 li
27.2097 214.362 li
27.1325 214.362 li
26.7298 214.563 li
27.0224 215.149 li
cp
.883879 .768521 0 0 cmyk
f
103.792 215.016 mo
103.832 215.016 li
103.886 215.016 li
103.998 214.979 li
103.894 214.669 li
103.894 214.996 li
103.935 214.996 li
104.012 214.996 li
104.083 214.96 li
104.142 214.949 li
104.185 214.94 li
104.265 214.9 li
104.119 214.607 li
104.119 214.934 li
104.16 214.934 li
104.192 214.934 li
104.326 214.908 li
104.346 214.904 li
104.55 214.836 li
104.572 214.828 li
104.634 214.797 li
104.487 214.505 li
104.487 214.832 li
104.548 214.832 li
104.626 214.832 li
104.74 214.775 li
104.885 214.743 li
104.91 214.737 li
105.293 214.588 li
105.347 214.57 li
105.244 214.259 li
105.244 214.587 li
105.285 214.587 li
105.348 214.587 li
105.509 214.522 li
105.713 214.441 li
105.719 214.438 li
106.135 214.251 li
106.141 214.248 li
106.167 214.235 li
106.206 214.222 li
106.24 214.211 li
106.363 214.138 li
106.556 214.041 li
106.559 214.039 li
106.951 213.833 li
106.966 213.825 li
107.024 213.786 li
107.047 213.775 li
107.058 213.769 li
107.171 213.702 li
107.376 213.579 li
107.381 213.576 li
107.795 213.307 li
107.824 213.288 li
107.866 213.246 li
107.894 213.227 li
107.99 213.17 li
108.008 213.158 li
108.23 212.981 li
108.607 212.684 li
108.657 212.65 li
108.684 212.632 li
108.735 212.581 li
108.823 212.51 li
108.83 212.505 li
109.02 212.336 li
109.024 212.332 li
109.376 212 li
109.414 211.975 li
109.468 211.939 li
109.517 211.865 li
109.58 211.815 li
109.594 211.804 li
109.791 211.607 li
109.797 211.601 li
110.166 211.191 li
110.2 211.157 li
110.262 211.095 li
110.275 211.083 li
110.361 210.974 li
110.559 210.757 li
110.564 210.751 li
110.938 210.294 li
110.94 210.292 li
111.719 209.301 li
111.751 209.237 li
111.775 209.214 li
111.794 209.194 li
111.912 209.029 li
112.117 208.743 li
112.118 208.742 li
112.529 208.145 li
112.532 208.141 li
113.356 206.863 li
115 204.07 li
118.223 198.075 li
118.265 197.969 li
118.293 197.913 li
118.387 197.762 li
118.396 197.749 li
118.584 197.372 li
118.949 196.703 li
119.708 195.328 li
119.752 195.24 li
119.79 195.164 li
119.889 194.987 li
120.072 194.661 li
120.438 194.01 li
121.184 192.76 li
121.235 192.692 li
121.253 192.669 li
121.3 192.574 li
121.394 192.424 li
121.597 192.099 li
122.005 191.466 li
122.784 190.269 li
122.821 190.232 li
122.858 190.194 li
122.911 190.088 li
122.999 189.966 li
123.202 189.681 li
123.606 189.136 li
124.429 188.107 li
124.46 188.061 li
124.478 188.043 li
124.488 188.033 li
124.6 187.899 li
124.781 187.678 li
125.16 187.259 li
125.911 186.487 li
125.95 186.448 li
125.991 186.407 li
126.093 186.305 li
126.267 186.13 li
126.646 185.812 li
127.372 185.203 li
127.379 185.2 li
127.426 185.176 li
127.476 185.126 li
127.544 185.086 li
127.561 185.075 li
127.756 184.924 li
128.098 184.677 li
128.115 184.668 li
128.133 184.659 li
128.212 184.607 li
128.22 184.601 li
128.291 184.548 li
128.455 184.457 li
128.458 184.455 li
128.84 184.234 li
128.872 184.218 li
128.919 184.194 li
128.95 184.163 li
128.99 184.147 li
129.01 184.14 li
129.212 184.027 li
129.574 183.826 li
129.608 183.809 li
129.637 183.795 li
129.727 183.759 li
129.732 183.757 li
129.922 183.672 li
130.276 183.515 li
130.322 183.5 li
130.345 183.492 li
130.394 183.467 li
130.484 183.432 li
130.682 183.352 li
131.084 183.212 li
131.103 183.205 li
131.163 183.175 li
131.017 182.882 li
131.017 183.209 li
131.057 183.209 li
131.121 183.209 li
131.268 183.151 li
131.458 183.093 li
131.867 182.971 li
131.773 182.657 li
131.773 182.984 li
131.814 182.984 li
131.867 182.984 li
131.96 182.954 li
132.042 182.937 li
132.057 182.934 li
132.276 182.868 li
132.182 182.555 li
132.182 182.882 li
132.223 182.882 li
132.276 182.882 li
132.369 182.851 li
132.451 182.835 li
132.455 182.834 li
132.642 182.793 li
132.658 182.789 li
132.736 182.763 li
132.632 182.453 li
132.632 182.78 li
132.673 182.78 li
132.706 182.78 li
132.84 182.753 li
133.044 182.712 li
133.422 182.637 li
133.43 182.637 li
133.471 182.637 li
133.503 182.637 li
133.624 182.613 li
133.794 182.594 li
133.852 182.587 li
133.945 182.541 li
133.798 182.248 li
133.798 182.575 li
133.86 182.575 li
133.9 182.575 li
133.998 182.551 li
134.162 182.534 li
134.187 182.534 li
134.264 182.534 li
134.305 182.514 li
134.33 182.514 li
134.348 182.514 li
134.55 182.492 li
134.901 182.453 li
134.944 182.453 li
134.985 182.453 li
135.025 182.453 li
135.123 182.428 li
135.287 182.412 li
135.312 182.412 li
135.353 182.412 li
135.455 182.412 li
135.473 182.412 li
135.657 182.391 li
135.68 182.391 li
135.742 182.391 li
135.823 182.391 li
135.842 182.391 li
136.026 182.371 li
136.069 182.371 li
136.11 182.371 li
136.212 182.371 li
136.23 182.371 li
136.414 182.35 li
136.437 182.35 li
136.498 182.35 li
136.601 182.35 li
136.617 182.35 li
136.821 182.33 li
136.846 182.33 li
136.907 182.33 li
137.01 182.33 li
137.214 182.33 li
137.255 182.33 li
137.308 182.33 li
137.37 182.309 li
137.419 182.309 li
137.46 182.309 li
137.521 182.309 li
137.623 182.309 li
137.664 182.309 li
137.726 182.309 li
137.828 182.309 li
138.032 182.309 li
138.073 182.309 li
138.135 182.309 li
138.217 182.309 li
138.278 182.309 li
138.355 182.309 li
138.396 182.289 li
138.421 182.289 li
138.482 182.289 li
138.523 182.289 li
138.626 182.289 li
138.687 182.289 li
138.728 182.289 li
138.83 182.289 li
138.892 182.289 li
138.932 182.289 li
139.035 182.289 li
139.096 182.289 li
139.137 182.289 li
139.239 182.289 li
139.301 182.289 li
139.342 182.289 li
139.403 182.289 li
139.444 182.289 li
139.505 182.289 li
139.546 182.289 li
139.648 182.289 li
139.71 182.289 li
139.751 182.289 li
139.792 182.289 li
139.853 182.289 li
139.894 182.289 li
139.935 182.289 li
140.037 182.289 li
140.078 182.289 li
140.119 182.289 li
140.18 182.289 li
140.221 182.289 li
140.262 182.289 li
140.323 182.289 li
140.364 182.289 li
140.405 182.289 li
140.467 182.289 li
140.507 182.289 li
140.548 182.289 li
140.61 182.289 li
140.651 182.289 li
140.692 182.289 li
140.753 182.289 li
140.794 182.289 li
140.835 182.289 li
140.896 182.289 li
140.937 182.289 li
140.978 182.289 li
141.039 182.289 li
141.08 182.289 li
141.121 182.289 li
141.182 182.289 li
141.223 182.289 li
141.264 182.289 li
141.326 182.289 li
141.367 182.289 li
141.407 182.289 li
141.469 182.289 li
141.51 182.289 li
141.551 182.289 li
141.612 182.289 li
141.653 182.289 li
141.694 182.289 li
141.755 182.289 li
141.796 182.289 li
141.837 182.289 li
141.898 182.289 li
141.939 182.289 li
142.042 182.289 li
142.123 182.289 li
142.164 182.289 li
142.226 182.289 li
142.267 182.289 li
142.307 182.289 li
142.369 182.289 li
142.41 182.289 li
142.451 182.289 li
142.512 182.289 li
142.553 182.289 li
142.594 182.289 li
142.655 182.289 li
142.696 182.289 li
142.737 182.289 li
142.798 182.289 li
142.839 182.289 li
142.88 182.289 li
142.921 182.289 li
142.982 182.289 li
143.023 182.289 li
143.064 182.289 li
143.126 182.289 li
143.167 182.289 li
143.207 182.289 li
143.248 182.289 li
143.31 182.289 li
143.351 182.289 li
143.392 182.289 li
143.453 182.289 li
143.494 182.289 li
143.535 182.289 li
143.576 182.289 li
143.637 182.289 li
143.678 182.289 li
143.719 182.289 li
143.821 182.289 li
143.862 182.289 li
143.903 182.289 li
143.964 182.289 li
144.005 182.289 li
144.046 182.289 li
144.087 182.289 li
144.189 182.289 li
144.23 182.289 li
144.292 182.289 li
144.332 182.289 li
144.373 182.289 li
144.414 182.289 li
144.476 182.289 li
144.557 182.289 li
144.619 182.289 li
144.66 182.289 li
144.742 182.289 li
144.803 182.289 li
144.844 182.289 li
144.946 182.289 li
144.987 182.289 li
145.028 182.289 li
145.13 182.289 li
145.171 182.289 li
145.212 182.289 li
145.314 182.289 li
145.355 182.289 li
145.396 182.289 li
145.498 182.289 li
145.682 182.289 li
145.682 181.962 li
145.536 182.254 li
145.577 182.275 li
145.646 182.309 li
145.785 182.309 li
145.887 182.309 li
145.928 182.309 li
145.989 182.309 li
146.092 182.309 li
146.132 182.309 li
146.194 182.309 li
146.296 182.309 li
146.501 182.309 li
146.542 182.309 li
146.603 182.309 li
146.685 182.309 li
146.746 182.309 li
146.746 181.982 li
146.6 182.275 li
146.641 182.295 li
146.71 182.33 li
146.889 182.33 li
146.951 182.33 li
146.992 182.33 li
147.094 182.33 li
147.298 182.33 li
147.36 182.33 li
147.36 182.003 li
147.213 182.295 li
147.254 182.316 li
147.323 182.35 li
147.503 182.35 li
147.707 182.35 li
147.748 182.35 li
147.777 182.35 li
147.848 182.364 li
147.88 182.371 li
148.117 182.371 li
148.157 182.371 li
148.157 182.044 li
148.054 182.354 li
148.115 182.374 li
148.166 182.391 li
148.305 182.391 li
148.493 182.41 li
148.509 182.412 li
148.567 182.412 li
148.607 182.412 li
148.693 182.412 li
148.882 182.431 li
148.898 182.432 li
148.976 182.432 li
148.984 182.432 li
149.055 182.446 li
149.069 182.449 li
149.267 182.471 li
149.285 182.473 li
149.344 182.473 li
149.352 182.473 li
149.423 182.487 li
149.437 182.49 li
149.635 182.512 li
149.653 182.514 li
149.732 182.514 li
149.733 182.514 li
149.776 182.525 li
149.799 182.53 li
150.016 182.552 li
150.374 182.612 li
150.401 182.616 li
150.469 182.616 li
150.49 182.616 li
150.533 182.627 li
150.54 182.629 li
150.752 182.671 li
150.784 182.678 li
150.857 182.678 li
150.866 182.678 li
150.933 182.691 li
151.114 182.731 li
151.149 182.739 li
151.173 182.739 li
151.184 182.743 li
151.195 182.747 li
151.289 182.77 li
151.297 182.772 li
151.505 182.814 li
151.854 182.891 li
151.899 182.906 li
151.95 182.923 li
151.981 182.923 li
152.025 182.941 li
152.052 182.952 li
152.271 182.995 li
152.661 183.112 li
152.696 183.124 li
152.716 183.134 li
152.728 183.14 li
152.843 183.186 li
152.856 183.191 li
153.068 183.255 li
153.47 183.396 li
153.473 183.397 li
153.514 183.41 li
153.534 183.42 li
153.546 183.426 li
153.661 183.472 li
153.859 183.552 li
154.262 183.733 li
154.277 183.74 li
154.354 183.765 li
154.457 183.455 li
154.226 183.686 li
154.267 183.727 li
154.314 183.775 li
154.466 183.836 li
154.653 183.929 li
155.057 184.151 li
155.083 184.165 li
155.172 184.195 li
155.276 183.884 li
155.044 184.116 li
155.085 184.157 li
155.133 184.204 li
155.273 184.26 li
155.447 184.365 li
155.827 184.625 li
155.865 184.651 li
155.97 184.686 li
156.073 184.375 li
155.842 184.607 li
155.883 184.648 li
155.911 184.676 li
156.038 184.752 li
156.229 184.886 li
156.634 185.189 li
156.657 185.207 li
156.706 185.232 li
156.739 185.253 li
156.824 185.321 li
157.001 185.479 li
157.004 185.481 li
157.411 185.827 li
158.199 186.555 li
158.256 186.611 li
158.284 186.639 li
158.354 186.728 li
158.371 186.748 li
158.583 186.939 li
158.938 187.334 li
159.679 188.175 li
159.708 188.218 li
159.749 188.28 li
159.759 188.294 li
159.872 188.43 li
159.87 188.428 li
160.05 188.648 li
160.414 189.133 li
160.413 189.131 li
161.152 190.131 li
161.181 190.188 li
161.194 190.214 li
161.271 190.316 li
161.371 190.457 li
161.571 190.737 li
161.974 191.361 li
162.768 192.644 li
164.399 195.437 li
167.427 201.105 li
167.486 201.204 li
167.522 201.274 li
167.603 201.438 li
167.608 201.448 li
167.815 201.799 li
168.18 202.488 li
168.18 202.489 li
168.914 203.855 li
168.953 203.933 li
168.967 203.959 li
169.028 204.041 li
169.097 204.179 li
169.1 204.186 li
169.288 204.52 li
169.656 205.174 li
169.659 205.179 li
170.412 206.42 li
170.447 206.49 li
170.46 206.516 li
170.531 206.611 li
170.625 206.762 li
170.83 207.09 li
170.828 207.087 li
171.217 207.721 li
171.222 207.73 li
172.032 208.884 li
172.062 208.944 li
172.086 208.992 li
172.166 209.072 li
172.253 209.193 li
172.256 209.198 li
172.462 209.465 li
172.848 209.993 li
172.855 210.003 li
173.669 210.959 li
173.699 211.005 li
173.717 211.032 li
173.781 211.095 li
173.877 211.192 li
174.055 211.39 li
174.061 211.396 li
174.456 211.791 li
174.474 211.809 li
174.496 211.843 li
174.525 211.886 li
174.653 211.988 li
174.824 212.159 li
174.831 212.166 li
175.206 212.499 li
175.223 212.515 li
175.276 212.55 li
175.294 212.568 li
175.307 212.581 li
175.424 212.674 li
175.426 212.676 li
175.611 212.82 li
175.979 213.106 li
175.989 213.114 li
176.033 213.143 li
176.051 213.161 li
176.067 213.178 li
176.168 213.253 li
176.181 213.263 li
176.394 213.391 li
176.755 213.632 li
176.817 213.673 li
176.834 213.684 li
176.882 213.708 li
176.973 213.763 li
176.979 213.766 li
177.21 213.892 li
177.618 214.117 li
177.644 214.131 li
177.734 214.161 li
177.837 213.85 li
177.605 214.082 li
177.646 214.123 li
177.694 214.17 li
177.852 214.233 li
178.07 214.332 li
178.077 214.335 li
178.493 214.502 li
178.501 214.505 li
178.55 214.522 li
178.57 214.532 li
178.591 214.542 li
178.727 214.587 li
179.226 214.787 li
179.469 214.18 li
178.961 213.976 li
178.952 213.972 li
178.842 213.936 li
178.822 213.926 li
178.801 213.915 li
178.727 213.891 li
178.334 213.733 li
178.116 213.634 li
178.109 213.631 li
177.999 213.587 li
177.878 213.891 li
178.109 213.66 li
178.069 213.619 li
178.014 213.564 li
177.907 213.529 li
177.524 213.318 li
177.523 213.318 li
177.304 213.198 li
177.208 213.14 li
177.197 213.134 li
177.163 213.117 li
177.119 213.087 li
176.75 212.842 li
176.744 212.837 li
176.547 212.719 li
176.497 212.682 li
176.473 212.658 li
176.45 212.635 li
176.372 212.582 li
176.013 212.303 li
175.831 212.162 li
175.744 212.092 li
175.716 212.064 li
175.693 212.041 li
175.624 211.995 li
175.28 211.689 li
175.103 211.512 li
175.09 211.499 li
175.013 211.438 li
175 211.419 li
174.982 211.392 li
174.918 211.328 li
174.536 210.946 li
174.358 210.747 li
174.352 210.741 li
174.243 210.633 li
174.225 210.615 li
174.203 210.58 li
174.192 210.564 li
173.369 209.597 li
172.988 209.075 li
172.985 209.072 li
172.782 208.808 li
172.683 208.669 li
172.667 208.647 li
172.624 208.604 li
172.607 208.57 li
172.596 208.548 li
171.77 207.371 li
171.386 206.745 li
171.18 206.416 li
171.078 206.252 li
171.071 206.24 li
171.019 206.171 li
170.991 206.115 li
170.985 206.104 li
170.224 204.848 li
169.859 204.199 li
169.678 203.878 li
169.6 203.722 li
169.587 203.696 li
169.526 203.614 li
169.498 203.559 li
169.496 203.555 li
168.757 202.18 li
168.758 202.181 li
168.39 201.486 li
168.387 201.48 li
168.184 201.135 li
168.107 200.981 li
168.066 200.899 li
168.06 200.888 li
167.997 200.782 li
164.97 195.118 li
163.329 192.307 li
162.527 191.012 li
162.117 190.375 li
162.112 190.369 li
161.903 190.076 li
161.801 189.933 li
161.799 189.93 li
161.753 189.869 li
161.725 189.813 li
161.712 189.788 li
160.939 188.742 li
160.569 188.249 li
160.565 188.244 li
160.377 188.014 li
160.375 188.012 li
160.284 187.902 li
160.252 187.855 li
160.212 187.794 li
160.199 187.776 li
159.427 186.898 li
159.058 186.488 li
159.046 186.475 li
158.848 186.298 li
158.783 186.216 li
158.772 186.202 li
158.719 186.149 li
158.657 186.087 li
158.653 186.083 li
157.845 185.337 li
157.433 184.987 li
157.252 184.826 li
157.246 184.821 li
157.137 184.733 li
157.126 184.725 li
157.053 184.676 li
157.036 184.665 li
157.003 184.648 li
156.617 184.359 li
156.613 184.356 li
156.404 184.21 li
156.395 184.203 li
156.317 184.156 li
156.305 184.144 li
156.25 184.089 li
156.159 184.059 li
155.808 183.819 li
155.8 183.813 li
155.587 183.686 li
155.565 183.672 li
155.438 183.621 li
155.317 183.925 li
155.548 183.694 li
155.507 183.653 li
155.452 183.598 li
155.346 183.563 li
154.963 183.352 li
154.957 183.349 li
154.747 183.244 li
154.735 183.238 li
154.62 183.192 li
154.498 183.496 li
154.73 183.265 li
154.689 183.224 li
154.634 183.169 li
154.515 183.129 li
154.121 182.952 li
154.115 182.949 li
153.904 182.865 li
153.815 182.829 li
153.786 182.814 li
153.765 182.804 li
153.684 182.777 li
153.277 182.635 li
153.269 182.632 li
153.072 182.573 li
152.996 182.542 li
152.967 182.528 li
152.947 182.518 li
152.863 182.49 li
152.858 182.488 li
152.445 182.364 li
152.43 182.36 li
152.24 182.322 li
152.165 182.292 li
152.107 182.269 li
152.056 182.269 li
152.045 182.265 li
152.029 182.26 li
151.644 182.174 li
151.642 182.173 li
151.441 182.133 li
151.379 182.118 li
151.329 182.101 li
151.279 182.084 li
151.221 182.084 li
151.072 182.051 li
151.068 182.051 li
150.963 182.029 li
150.931 182.023 li
150.857 182.023 li
150.849 182.023 li
150.684 181.99 li
150.61 181.971 li
150.57 181.962 li
150.469 181.962 li
150.455 181.962 li
150.114 181.905 li
150.103 181.903 li
149.911 181.884 li
149.853 181.869 li
149.814 181.859 li
149.732 181.859 li
149.689 181.859 li
149.537 181.843 li
149.449 181.825 li
149.417 181.819 li
149.344 181.819 li
149.321 181.819 li
149.169 181.802 li
149.081 181.784 li
149.049 181.778 li
148.976 181.778 li
148.931 181.778 li
148.742 181.759 li
148.726 181.757 li
148.607 181.757 li
148.567 181.757 li
148.542 181.757 li
148.354 181.738 li
148.337 181.737 li
148.272 181.737 li
148.261 181.733 li
148.211 181.716 li
148.117 181.716 li
147.944 181.716 li
147.874 181.702 li
147.842 181.696 li
147.748 181.696 li
147.707 181.696 li
147.503 181.696 li
147.401 181.696 li
147.401 182.023 li
147.547 181.73 li
147.506 181.71 li
147.437 181.675 li
147.298 181.675 li
147.094 181.675 li
146.992 181.675 li
146.951 181.675 li
146.889 181.675 li
146.787 181.675 li
146.787 182.003 li
146.933 181.71 li
146.892 181.689 li
146.823 181.655 li
146.685 181.655 li
146.603 181.655 li
146.542 181.655 li
146.501 181.655 li
146.296 181.655 li
146.194 181.655 li
146.132 181.655 li
146.092 181.655 li
145.989 181.655 li
145.928 181.655 li
145.887 181.655 li
145.785 181.655 li
145.723 181.655 li
145.723 181.982 li
145.87 181.689 li
145.829 181.669 li
145.76 181.634 li
145.498 181.634 li
145.396 181.634 li
145.355 181.634 li
145.314 181.634 li
145.212 181.634 li
145.171 181.634 li
145.13 181.634 li
145.028 181.634 li
144.987 181.634 li
144.946 181.634 li
144.844 181.634 li
144.803 181.634 li
144.742 181.634 li
144.66 181.634 li
144.619 181.634 li
144.557 181.634 li
144.476 181.634 li
144.414 181.634 li
144.373 181.634 li
144.332 181.634 li
144.292 181.634 li
144.23 181.634 li
144.189 181.634 li
144.087 181.634 li
144.046 181.634 li
144.005 181.634 li
143.964 181.634 li
143.903 181.634 li
143.862 181.634 li
143.821 181.634 li
143.719 181.634 li
143.678 181.634 li
143.637 181.634 li
143.576 181.634 li
143.535 181.634 li
143.494 181.634 li
143.453 181.634 li
143.392 181.634 li
143.351 181.634 li
143.31 181.634 li
143.248 181.634 li
143.207 181.634 li
143.167 181.634 li
143.126 181.634 li
143.064 181.634 li
143.023 181.634 li
142.982 181.634 li
142.921 181.634 li
142.88 181.634 li
142.839 181.634 li
142.798 181.634 li
142.737 181.634 li
142.696 181.634 li
142.655 181.634 li
142.594 181.634 li
142.553 181.634 li
142.512 181.634 li
142.451 181.634 li
142.41 181.634 li
142.369 181.634 li
142.307 181.634 li
142.267 181.634 li
142.226 181.634 li
142.164 181.634 li
142.123 181.634 li
142.042 181.634 li
141.939 181.634 li
141.898 181.634 li
141.837 181.634 li
141.796 181.634 li
141.755 181.634 li
141.694 181.634 li
141.653 181.634 li
141.612 181.634 li
141.551 181.634 li
141.51 181.634 li
141.469 181.634 li
141.407 181.634 li
141.367 181.634 li
141.326 181.634 li
141.264 181.634 li
141.223 181.634 li
141.182 181.634 li
141.121 181.634 li
141.08 181.634 li
141.039 181.634 li
140.978 181.634 li
140.937 181.634 li
140.896 181.634 li
140.835 181.634 li
140.794 181.634 li
140.753 181.634 li
140.692 181.634 li
140.651 181.634 li
140.61 181.634 li
140.548 181.634 li
140.507 181.634 li
140.467 181.634 li
140.405 181.634 li
140.364 181.634 li
140.323 181.634 li
140.262 181.634 li
140.221 181.634 li
140.18 181.634 li
140.119 181.634 li
140.078 181.634 li
140.037 181.634 li
139.935 181.634 li
139.894 181.634 li
139.853 181.634 li
139.792 181.634 li
139.751 181.634 li
139.71 181.634 li
139.648 181.634 li
139.546 181.634 li
139.505 181.634 li
139.444 181.634 li
139.403 181.634 li
139.342 181.634 li
139.301 181.634 li
139.239 181.634 li
139.137 181.634 li
139.096 181.634 li
139.035 181.634 li
138.932 181.634 li
138.892 181.634 li
138.83 181.634 li
138.728 181.634 li
138.687 181.634 li
138.626 181.634 li
138.523 181.634 li
138.482 181.634 li
138.421 181.634 li
138.319 181.634 li
138.242 181.634 li
138.132 181.689 li
138.278 181.982 li
138.278 181.655 li
138.217 181.655 li
138.135 181.655 li
138.073 181.655 li
138.032 181.655 li
137.828 181.655 li
137.726 181.655 li
137.664 181.655 li
137.623 181.655 li
137.521 181.655 li
137.46 181.655 li
137.419 181.655 li
137.317 181.655 li
137.263 181.655 li
137.152 181.692 li
137.255 182.003 li
137.255 181.675 li
137.214 181.675 li
137.01 181.675 li
136.907 181.675 li
136.846 181.675 li
136.805 181.675 li
136.789 181.675 li
136.585 181.696 li
136.498 181.696 li
136.437 181.696 li
136.396 181.696 li
136.378 181.696 li
136.194 181.716 li
136.11 181.716 li
136.069 181.716 li
136.007 181.716 li
135.989 181.716 li
135.805 181.737 li
135.742 181.737 li
135.68 181.737 li
135.639 181.737 li
135.621 181.737 li
135.437 181.757 li
135.353 181.757 li
135.312 181.757 li
135.271 181.757 li
135.255 181.757 li
135.034 181.779 li
135.01 181.782 li
134.944 181.798 li
134.944 181.798 li
134.882 181.798 li
134.864 181.798 li
134.478 181.841 li
134.312 181.859 li
134.228 181.859 li
134.151 181.859 li
134.041 181.914 li
134.187 182.207 li
134.187 181.88 li
134.146 181.88 li
134.13 181.88 li
133.909 181.902 li
133.885 181.904 li
133.819 181.921 li
133.798 181.921 li
133.721 181.921 li
133.663 181.95 li
133.537 181.964 li
133.523 181.965 li
133.439 181.982 li
133.43 181.982 li
133.389 181.982 li
133.357 181.982 li
132.916 182.07 li
132.711 182.111 li
132.641 182.125 li
132.632 182.125 li
132.579 182.125 li
132.484 182.157 li
132.32 182.194 li
132.22 182.214 li
132.2 182.218 li
132.12 182.244 li
132.223 182.555 li
132.223 182.228 li
132.182 182.228 li
132.134 182.228 li
131.899 182.298 li
131.811 182.316 li
131.792 182.32 li
131.711 182.347 li
131.814 182.657 li
131.814 182.33 li
131.773 182.33 li
131.725 182.33 li
131.27 182.466 li
131.066 182.528 li
131.052 182.532 li
130.936 182.578 li
131.057 182.882 li
131.057 182.555 li
131.017 182.555 li
130.939 182.555 li
130.848 182.601 li
130.458 182.737 li
130.452 182.739 li
130.24 182.824 li
130.138 182.865 li
130.125 182.87 li
130.093 182.886 li
130.054 182.899 li
130.039 182.904 li
129.656 183.074 li
129.478 183.153 li
129.381 183.192 li
129.369 183.197 li
129.316 183.224 li
129.275 183.244 li
129.269 183.247 li
128.894 183.455 li
128.728 183.547 li
128.645 183.581 li
128.583 183.606 li
128.494 183.694 li
128.726 183.925 li
128.579 183.633 li
128.538 183.653 li
128.53 183.657 li
128.134 183.887 li
127.953 183.987 li
127.933 183.998 li
127.841 184.067 li
127.804 184.092 li
127.782 184.103 li
127.758 184.115 li
127.368 184.396 li
127.363 184.4 li
127.19 184.534 li
127.105 184.586 li
127.071 184.606 li
127.001 184.676 li
127.232 184.907 li
127.086 184.614 li
127.045 184.635 li
127.011 184.652 li
126.225 185.311 li
126.224 185.311 li
125.835 185.639 li
125.825 185.648 li
125.631 185.842 li
125.528 185.944 li
125.487 185.985 li
125.446 186.026 li
125.444 186.028 li
124.682 186.811 li
124.29 187.244 li
124.284 187.25 li
124.095 187.482 li
124.097 187.479 li
124.004 187.591 li
123.974 187.621 li
123.951 187.644 li
123.9 187.721 li
123.087 188.737 li
122.674 189.294 li
122.672 189.296 li
122.466 189.585 li
122.364 189.728 li
122.349 189.749 li
122.32 189.807 li
122.297 189.83 li
122.272 189.855 li
121.456 191.111 li
121.046 191.746 li
121.044 191.748 li
120.839 192.077 li
120.737 192.241 li
120.728 192.254 li
120.694 192.323 li
120.65 192.381 li
120.64 192.395 li
119.872 193.682 li
119.502 194.34 li
119.318 194.667 li
119.215 194.853 li
119.211 194.859 li
119.167 194.947 li
119.129 195.023 li
118.376 196.388 li
118.007 197.064 li
118.004 197.069 li
117.824 197.429 li
117.73 197.579 li
117.722 197.592 li
117.674 197.688 li
117.668 197.7 li
117.629 197.798 li
114.429 203.749 li
112.799 206.519 li
111.987 207.778 li
111.583 208.365 li
111.38 208.649 li
111.293 208.77 li
111.251 208.812 li
111.213 208.85 li
111.164 208.949 li
110.43 209.882 li
110.069 210.323 li
109.87 210.542 li
109.863 210.549 li
109.786 210.645 li
109.737 210.694 li
109.697 210.735 li
109.69 210.741 li
109.322 211.15 li
109.157 211.315 li
109.069 211.386 li
109.029 211.417 li
108.996 211.467 li
108.99 211.471 li
108.967 211.487 li
108.582 211.85 li
108.408 212.005 li
108.312 212.081 li
108.298 212.093 li
108.267 212.123 li
108.233 212.146 li
108.222 212.153 li
107.823 212.468 li
107.82 212.471 li
107.634 212.62 li
107.55 212.67 li
107.544 212.674 li
107.476 212.719 li
107.449 212.737 li
107.409 212.776 li
107.034 213.02 li
106.835 213.14 li
106.743 213.195 li
106.713 213.21 li
106.695 213.219 li
106.631 213.262 li
106.261 213.456 li
106.059 213.558 li
106.048 213.563 li
105.965 213.613 li
105.938 213.622 li
105.916 213.629 li
105.86 213.657 li
105.464 213.835 li
105.265 213.915 li
105.163 213.956 li
105.285 214.259 li
105.285 213.932 li
105.244 213.932 li
105.191 213.932 li
105.079 213.969 li
105.071 213.972 li
104.719 214.109 li
104.559 214.145 li
104.52 214.153 li
104.402 214.212 li
104.548 214.505 li
104.548 214.178 li
104.487 214.178 li
104.41 214.178 li
104.32 214.222 li
104.178 214.27 li
104.127 214.28 li
104.119 214.28 li
104.042 214.28 li
103.971 214.315 li
103.911 214.327 li
103.868 214.336 li
103.788 214.376 li
103.935 214.669 li
103.935 214.341 li
103.894 214.341 li
103.841 214.341 li
103.729 214.379 li
103.832 214.689 li
103.832 214.362 li
103.464 214.362 li
103.464 215.016 li
cp
f
178.898 214.655 mo
178.938 214.675 li
179.008 214.709 li
179.083 214.709 li
179.127 214.727 li
179.14 214.732 li
179.354 214.797 li
179.411 214.815 li
179.472 214.836 li
179.491 214.842 li
179.598 214.864 li
179.784 214.919 li
179.84 214.938 li
179.891 214.955 li
179.922 214.955 li
179.966 214.972 li
180.024 214.996 li
180.148 214.996 li
180.148 214.669 li
180.002 214.961 li
180.043 214.982 li
180.112 215.016 li
180.251 215.016 li
180.251 214.689 li
180.104 214.982 li
180.438 215.149 li
180.731 214.563 li
180.397 214.396 li
180.328 214.362 li
180.189 214.362 li
180.189 214.689 li
180.336 214.396 li
180.295 214.376 li
180.226 214.341 li
180.15 214.341 li
180.106 214.324 li
180.048 214.3 li
179.997 214.3 li
179.986 214.297 li
179.981 214.295 li
179.772 214.232 li
179.757 214.228 li
179.66 214.208 li
179.618 214.195 li
179.556 214.174 li
179.551 214.172 li
179.356 214.114 li
179.268 214.078 li
179.209 214.055 li
179.085 214.055 li
179.085 214.382 li
179.231 214.089 li
178.897 213.923 li
178.605 214.508 li
cp
f
27.1688 259.341 mo
27.2097 259.341 li
27.2711 259.341 li
27.312 259.341 li
27.3529 259.341 li
27.4143 259.341 li
27.4552 259.341 li
27.4961 259.341 li
27.537 259.341 li
27.5984 259.341 li
27.6393 259.341 li
27.6802 259.341 li
27.7416 259.341 li
27.7825 259.341 li
27.8598 259.341 li
27.9007 259.321 li
27.9257 259.321 li
27.9666 259.321 li
28.0075 259.321 li
28.1097 259.321 li
28.187 259.321 li
28.297 259.266 li
28.1507 258.973 li
28.1507 259.3 li
28.212 259.3 li
28.2938 259.3 li
28.3347 259.3 li
28.3878 259.3 li
28.4492 259.28 li
28.4779 259.28 li
28.4941 259.28 li
28.6985 259.259 li
28.7234 259.259 li
28.7643 259.259 li
28.7964 259.259 li
28.9167 259.235 li
29.0868 259.217 li
29.1448 259.21 li
29.2379 259.164 li
29.0916 258.871 li
29.0916 259.198 li
29.1325 259.198 li
29.1648 259.198 li
29.2849 259.174 li
29.437 259.157 li
29.4802 259.157 li
29.5574 259.157 li
29.6352 259.118 li
29.6591 259.112 li
29.84 259.094 li
29.8596 259.092 li
30.2466 259.006 li
30.2861 258.997 li
30.3631 258.959 li
30.2166 258.666 li
30.2166 258.994 li
30.2779 258.994 li
30.3409 258.994 li
30.4738 258.94 li
30.6489 258.905 li
30.6557 258.904 li
31.0732 258.8 li
31.1081 258.791 li
31.16 258.765 li
31.1805 258.758 li
31.2626 258.742 li
31.2775 258.739 li
31.497 258.673 li
31.5044 258.671 li
31.9201 258.525 li
31.9397 258.518 li
31.9784 258.499 li
31.9986 258.492 li
32.0807 258.476 li
32.1104 258.47 li
32.3427 258.377 li
32.3439 258.376 li
32.7367 258.211 li
32.7433 258.208 li
33.5437 257.868 li
33.5929 257.852 li
33.6149 257.844 li
33.6643 257.82 li
33.754 257.784 li
33.7735 257.776 li
33.9699 257.667 li
34.3311 257.486 li
34.3351 257.484 li
35.1144 257.074 li
35.1584 257.051 li
35.2344 256.975 li
35.0029 256.744 li
35.1492 257.036 li
35.1902 257.016 li
35.2016 257.01 li
35.3088 256.946 li
35.4892 256.846 li
35.4972 256.841 li
35.8936 256.591 li
35.8952 256.59 li
36.6384 256.108 li
36.6629 256.095 li
36.681 256.086 li
36.7595 256.034 li
36.7669 256.029 li
36.8488 255.968 li
37.0254 255.85 li
37.027 255.849 li
37.4173 255.582 li
37.4258 255.576 li
38.1698 254.997 li
38.1725 254.995 li
39.7073 253.734 li
39.7389 253.686 li
39.7459 253.682 li
39.7576 253.674 li
39.871 253.583 li
39.8785 253.577 li
40.09 253.387 li
40.0927 253.384 li
40.4848 253.013 li
41.3087 252.23 li
42.9361 250.541 li
45.9766 247.007 li
49.2609 242.615 li
52.4805 237.816 li
55.4717 232.981 li
58.7277 227.432 li
61.7775 222.048 li
64.7463 216.684 li
67.976 210.817 li
67.9752 210.819 li
70.982 205.419 li
70.9804 205.422 li
74.2308 199.718 li
77.4375 194.408 li
80.4176 189.754 li
83.6609 185.164 li
86.6908 181.315 li
86.7209 181.27 li
86.7593 181.232 li
86.7699 181.221 li
86.877 181.093 li
87.0769 180.873 li
87.0814 180.868 li
87.4906 180.377 li
88.3016 179.485 li
89.9326 177.772 li
89.9477 177.757 li
89.9821 177.734 li
90.0092 177.716 li
90.1344 177.591 li
90.3389 177.386 li
90.7196 177.006 li
91.5624 176.268 li
91.6095 176.198 li
91.6146 176.192 li
91.7029 176.122 li
91.7101 176.116 li
91.9147 175.932 li
92.3165 175.61 li
92.3179 175.609 li
93.1048 174.964 li
93.1526 174.932 li
93.1797 174.914 li
93.2271 174.866 li
93.2856 174.822 li
93.4861 174.682 li
93.4927 174.677 li
93.8613 174.391 li
94.5915 173.878 li
94.6106 173.868 li
94.6581 173.844 li
94.7081 173.794 li
94.7759 173.754 li
94.7827 173.75 li
94.9731 173.623 li
95.3345 173.382 li
96.0737 172.942 li
96.0828 172.938 li
96.1223 172.925 li
96.1564 172.913 li
96.2896 172.833 li
96.4831 172.717 li
96.8811 172.518 li
96.9286 172.494 li
97.007 172.416 li
96.7757 172.184 li
96.8791 172.495 li
96.9405 172.475 li
96.9495 172.471 li
97.0608 172.427 li
97.0733 172.422 li
97.2902 172.314 li
97.6993 172.109 li
97.7194 172.099 li
97.7587 172.086 li
97.768 172.083 li
97.8791 172.038 li
97.8844 172.036 li
98.0744 171.952 li
98.079 171.95 li
98.4721 171.773 li
99.2769 171.491 li
99.2966 171.484 li
99.3352 171.465 li
99.3627 171.456 li
99.4323 171.438 li
99.4398 171.436 li
99.6516 171.373 li
99.6564 171.371 li
100.029 171.247 li
100.09 171.227 li
99.987 170.916 li
99.987 171.244 li
100.028 171.244 li
100.06 171.244 li
100.194 171.217 li
100.214 171.213 li
100.402 171.15 li
100.753 171.072 li
100.77 171.068 li
100.847 171.043 li
100.744 170.732 li
100.744 171.059 li
100.785 171.059 li
100.817 171.059 li
100.951 171.033 li
100.955 171.032 li
101.142 170.99 li
101.181 170.982 li
101.258 170.943 li
101.112 170.65 li
101.112 170.978 li
101.173 170.978 li
101.214 170.978 li
101.327 170.949 li
101.492 170.916 li
101.501 170.916 li
101.542 170.916 li
101.574 170.916 li
101.708 170.889 li
101.712 170.889 li
101.864 170.855 li
101.869 170.855 li
101.93 170.855 li
101.97 170.855 li
102.068 170.83 li
102.233 170.814 li
102.257 170.814 li
102.298 170.814 li
102.331 170.814 li
102.433 170.794 li
102.442 170.794 li
102.482 170.794 li
102.515 170.794 li
102.617 170.773 li
102.626 170.773 li
102.667 170.773 li
102.769 170.773 li
102.846 170.773 li
102.956 170.718 li
102.81 170.425 li
102.81 170.753 li
102.871 170.753 li
102.953 170.753 li
102.994 170.753 li
103.055 170.753 li
103.096 170.753 li
103.173 170.753 li
103.283 170.698 li
103.137 170.405 li
103.137 170.732 li
103.198 170.732 li
103.239 170.732 li
103.28 170.732 li
103.321 170.732 li
103.382 170.732 li
103.423 170.732 li
103.464 170.732 li
103.505 170.732 li
103.567 170.732 li
103.607 170.732 li
103.648 170.732 li
104.017 170.732 li
104.017 170.078 li
103.648 170.078 li
103.607 170.078 li
103.567 170.078 li
103.505 170.078 li
103.464 170.078 li
103.423 170.078 li
103.382 170.078 li
103.321 170.078 li
103.28 170.078 li
103.239 170.078 li
103.198 170.078 li
103.137 170.078 li
103.06 170.078 li
102.95 170.133 li
103.096 170.425 li
103.096 170.098 li
103.055 170.098 li
102.994 170.098 li
102.953 170.098 li
102.871 170.098 li
102.81 170.098 li
102.732 170.098 li
102.692 170.119 li
102.667 170.119 li
102.626 170.119 li
102.585 170.119 li
102.552 170.119 li
102.45 170.139 li
102.442 170.139 li
102.401 170.139 li
102.368 170.139 li
102.266 170.159 li
102.257 170.159 li
102.217 170.159 li
102.2 170.159 li
101.979 170.182 li
101.956 170.184 li
101.89 170.2 li
101.869 170.2 li
101.828 170.2 li
101.792 170.2 li
101.575 170.249 li
101.509 170.262 li
101.501 170.262 li
101.46 170.262 li
101.427 170.262 li
101.191 170.309 li
101.183 170.31 li
101.133 170.323 li
101.112 170.323 li
101.035 170.323 li
100.961 170.36 li
100.819 170.391 li
100.752 170.405 li
100.744 170.405 li
100.691 170.405 li
100.595 170.437 li
100.243 170.515 li
100.227 170.519 li
100.046 170.579 li
99.9955 170.589 li
99.987 170.589 li
99.9339 170.589 li
99.8222 170.626 li
99.4584 170.747 li
99.2662 170.805 li
99.1917 170.824 li
99.1795 170.827 li
99.1063 170.851 li
99.0842 170.859 li
99.0409 170.88 li
98.2425 171.16 li
98.2292 171.164 li
97.8073 171.354 li
97.8087 171.354 li
97.6309 171.433 li
97.5423 171.468 li
97.4904 171.485 li
97.4683 171.493 li
97.4066 171.524 li
96.9975 171.728 li
96.805 171.824 li
96.7244 171.857 li
96.6722 171.874 li
96.5989 171.898 li
96.5409 171.956 li
96.1793 172.137 li
96.1681 172.143 li
95.9528 172.272 li
95.8812 172.315 li
95.854 172.324 li
95.832 172.331 li
95.7702 172.362 li
95.7594 172.368 li
94.9925 172.824 li
94.9851 172.828 li
94.61 173.078 li
94.4321 173.197 li
94.3367 173.254 li
94.3023 173.275 li
94.2329 173.344 li
94.4643 173.575 li
94.318 173.283 li
94.2771 173.303 li
94.2553 173.314 li
93.4784 173.86 li
93.4721 173.864 li
93.1039 174.151 li
92.9061 174.289 li
92.9017 174.292 li
92.8157 174.357 li
92.797 174.371 li
92.7625 174.405 li
92.7282 174.428 li
92.7145 174.437 li
91.9062 175.1 li
91.4985 175.427 li
91.4911 175.433 li
91.2866 175.617 li
91.1916 175.693 li
91.1775 175.704 li
91.1238 175.758 li
91.1009 175.78 li
91.0661 175.833 li
90.2724 176.527 li
89.8761 176.923 li
89.6715 177.128 li
89.5921 177.207 li
89.5578 177.23 li
89.5308 177.248 li
89.467 177.312 li
89.4647 177.314 li
87.8219 179.039 li
86.9971 179.947 li
86.5878 180.438 li
86.388 180.657 li
86.3833 180.663 li
86.2861 180.779 li
86.2352 180.83 li
86.2122 180.853 li
86.1604 180.931 li
83.1359 184.773 li
79.8744 189.388 li
76.8817 194.062 li
73.6656 199.388 li
70.4112 205.098 li
67.4034 210.5 li
64.1708 216.372 li
61.2052 221.731 li
61.2068 221.728 li
58.1597 227.106 li
54.9114 232.643 li
51.9299 237.462 li
48.7267 242.236 li
45.4657 246.598 li
42.4515 250.101 li
40.8473 251.766 li
40.0343 252.538 li
39.6488 252.903 li
39.4547 253.078 li
39.3708 253.145 li
39.3213 253.178 li
39.2669 253.214 li
39.2167 253.29 li
37.7648 254.483 li
37.0393 255.047 li
36.6602 255.307 li
36.4782 255.428 li
36.4708 255.433 li
36.3891 255.494 li
36.3519 255.519 li
36.3293 255.53 li
36.3129 255.539 li
35.543 256.038 li
35.1633 256.278 li
34.9871 256.376 li
34.9828 256.378 li
34.8864 256.436 li
34.8566 256.451 li
34.8091 256.475 li
34.7656 256.518 li
34.0347 256.903 li
33.6702 257.085 li
33.6635 257.088 li
33.4916 257.184 li
33.4087 257.217 li
33.3962 257.222 li
33.3637 257.238 li
33.3243 257.251 li
33.3119 257.255 li
32.4817 257.608 li
32.0977 257.77 li
31.9228 257.84 li
31.8501 257.854 li
31.83 257.858 li
31.7495 257.885 li
31.7275 257.893 li
31.6842 257.914 li
31.3012 258.048 li
31.1193 258.103 li
31.0319 258.12 li
31.0119 258.124 li
30.9313 258.151 li
30.9094 258.159 li
30.8796 258.173 li
30.5128 258.265 li
30.316 258.304 li
30.2866 258.31 li
30.1564 258.362 li
30.2779 258.666 li
30.2779 258.339 li
30.2166 258.339 li
30.1393 258.339 li
30.0652 258.376 li
29.7555 258.445 li
29.5704 258.463 li
29.5465 258.466 li
29.4418 258.492 li
29.407 258.501 li
29.3339 258.537 li
29.4802 258.83 li
29.4802 258.503 li
29.4188 258.503 li
29.4009 258.503 li
29.1986 258.525 li
29.1847 258.527 li
29.1001 258.544 li
29.0916 258.544 li
29.0143 258.544 li
28.9565 258.572 li
28.8304 258.586 li
28.8165 258.588 li
28.732 258.605 li
28.7234 258.605 li
28.6825 258.605 li
28.6663 258.605 li
28.4619 258.625 li
28.3961 258.625 li
28.343 258.625 li
28.2313 258.663 li
28.3347 258.973 li
28.3347 258.646 li
28.2938 258.646 li
28.212 258.646 li
28.1507 258.646 li
28.0734 258.646 li
28.0326 258.666 li
28.0075 258.666 li
27.9666 258.666 li
27.9257 258.666 li
27.8234 258.666 li
27.7461 258.666 li
27.636 258.721 li
27.7825 259.014 li
27.7825 258.687 li
27.7416 258.687 li
27.6802 258.687 li
27.6393 258.687 li
27.5984 258.687 li
27.537 258.687 li
27.4961 258.687 li
27.4552 258.687 li
27.4143 258.687 li
27.3529 258.687 li
27.312 258.687 li
27.2711 258.687 li
27.2097 258.687 li
26.8415 258.687 li
26.8415 259.341 li
cp
0 .993347 1 0 cmyk
f
103.792 259.341 mo
103.832 259.341 li
103.894 259.341 li
103.935 259.341 li
103.976 259.341 li
104.037 259.341 li
104.078 259.341 li
104.119 259.341 li
104.16 259.341 li
104.221 259.341 li
104.262 259.341 li
104.303 259.341 li
104.344 259.341 li
104.376 259.341 li
104.478 259.321 li
104.487 259.321 li
104.548 259.321 li
104.63 259.321 li
104.671 259.321 li
104.724 259.321 li
104.786 259.3 li
104.814 259.3 li
104.855 259.3 li
104.917 259.3 li
104.957 259.3 li
105.056 259.275 li
105.201 259.259 li
105.244 259.259 li
105.285 259.259 li
105.317 259.259 li
105.435 259.236 li
105.608 259.219 li
105.653 259.219 li
105.73 259.219 li
105.801 259.183 li
105.844 259.174 li
106.033 259.156 li
106.093 259.15 li
106.188 259.102 li
106.042 258.809 li
106.042 259.137 li
106.103 259.137 li
106.135 259.137 li
106.269 259.11 li
106.474 259.069 li
106.476 259.069 li
106.866 258.987 li
106.884 258.983 li
106.963 258.956 li
106.86 258.646 li
106.86 258.973 li
106.901 258.973 li
106.933 258.973 li
107.067 258.946 li
107.082 258.943 li
107.294 258.88 li
107.696 258.779 li
107.731 258.771 li
107.783 258.744 li
107.803 258.738 li
107.885 258.721 li
107.901 258.718 li
108.12 258.652 li
108.13 258.65 li
108.522 258.505 li
108.579 258.486 li
108.476 258.175 li
108.476 258.503 li
108.517 258.503 li
108.58 258.503 li
108.731 258.442 li
108.906 258.384 li
108.922 258.379 li
109.299 258.211 li
110.051 257.906 li
110.063 257.901 li
110.115 257.875 li
110.133 257.866 li
110.195 257.825 li
110.246 257.799 li
110.438 257.722 li
110.451 257.717 li
110.831 257.527 li
110.836 257.525 li
111.597 257.113 li
111.639 257.091 li
111.714 257.016 li
111.482 256.784 li
111.586 257.095 li
111.647 257.075 li
111.681 257.063 li
111.814 256.983 li
112.019 256.861 li
112.428 256.615 li
112.433 256.612 li
113.285 256.058 li
113.35 255.993 li
113.119 255.762 li
113.222 256.072 li
113.284 256.052 li
113.339 256.033 li
113.479 255.922 li
113.675 255.784 li
114.084 255.498 li
114.09 255.494 li
114.931 254.842 li
114.964 254.809 li
114.998 254.786 li
115.01 254.778 li
115.121 254.689 li
115.304 254.547 li
115.309 254.543 li
115.724 254.191 li
115.725 254.189 li
116.529 253.489 li
118.177 251.945 li
118.221 251.879 li
118.239 251.861 li
118.341 251.759 li
118.525 251.575 li
118.528 251.572 li
118.9 251.18 li
119.661 250.378 li
121.163 248.669 li
124.427 244.544 li
127.463 240.215 li
130.435 235.603 li
133.671 230.237 li
136.681 225.016 li
139.934 219.164 li
142.983 213.64 li
145.969 208.241 li
149.198 202.498 li
152.222 197.328 li
155.489 192.039 li
158.693 187.264 li
161.689 183.229 li
164.946 179.398 li
164.962 179.375 li
164.969 179.37 li
165.011 179.342 li
165.118 179.208 li
165.294 179.013 li
165.676 178.611 li
166.428 177.838 li
167.917 176.43 li
167.955 176.405 li
167.982 176.387 li
168.046 176.323 li
168.115 176.254 li
168.305 176.101 li
168.311 176.096 li
168.682 175.767 li
169.385 175.181 li
169.392 175.177 li
169.411 175.168 li
169.489 175.116 li
169.516 175.098 li
169.606 175.007 li
169.774 174.877 li
170.136 174.595 li
170.887 174.068 li
170.91 174.052 li
170.948 174.014 li
170.976 173.995 li
171.071 173.938 li
171.081 173.932 li
171.295 173.782 li
171.107 173.514 li
171.292 173.784 li
171.673 173.524 li
172.472 173.044 li
172.502 173.03 li
172.52 173.02 li
172.57 172.987 li
172.64 172.959 li
172.665 172.949 li
172.889 172.814 li
173.264 172.597 li
174.071 172.214 li
174.122 172.19 li
174.202 172.109 li
173.971 171.878 li
174.117 172.17 li
174.146 172.156 li
174.236 172.12 li
174.242 172.118 li
174.429 172.035 li
174.814 171.872 li
174.824 171.868 li
174.874 171.843 li
174.903 171.829 li
174.984 171.797 li
175.159 171.738 li
175.166 171.736 li
175.535 171.592 li
175.588 171.574 li
175.611 171.567 li
175.633 171.556 li
175.692 171.544 li
175.712 171.54 li
175.915 171.472 li
176.284 171.349 li
176.345 171.329 li
176.367 171.322 li
176.397 171.307 li
176.444 171.295 li
176.451 171.293 li
176.659 171.231 li
176.982 171.141 li
176.998 171.141 li
177.076 171.141 li
177.147 171.106 li
177.203 171.095 li
177.425 171.054 li
177.471 171.046 li
177.533 171.015 li
177.553 171.008 li
177.635 170.992 li
177.808 170.957 li
177.837 170.957 li
177.914 170.957 li
177.955 170.937 li
177.98 170.937 li
178.01 170.937 li
178.264 170.891 li
178.31 170.882 li
178.392 170.841 li
178.246 170.548 li
178.246 170.875 li
178.307 170.875 li
178.34 170.875 li
178.458 170.852 li
178.63 170.834 li
178.676 170.834 li
178.753 170.834 li
178.794 170.814 li
178.839 170.814 li
178.917 170.814 li
179.027 170.759 li
178.88 170.466 li
178.88 170.794 li
178.942 170.794 li
179.044 170.794 li
179.121 170.794 li
179.231 170.739 li
179.085 170.446 li
179.085 170.773 li
179.146 170.773 li
179.248 170.773 li
179.31 170.773 li
179.387 170.773 li
179.428 170.753 li
179.453 170.753 li
179.514 170.753 li
179.576 170.753 li
179.617 170.753 li
179.678 170.753 li
179.755 170.753 li
179.865 170.698 li
179.719 170.405 li
179.719 170.732 li
179.78 170.732 li
179.821 170.732 li
179.882 170.732 li
179.944 170.732 li
179.985 170.732 li
180.046 170.732 li
180.087 170.732 li
180.148 170.732 li
180.189 170.732 li
180.251 170.732 li
180.619 170.732 li
180.619 170.078 li
180.251 170.078 li
180.189 170.078 li
180.148 170.078 li
180.087 170.078 li
180.046 170.078 li
179.985 170.078 li
179.944 170.078 li
179.882 170.078 li
179.821 170.078 li
179.78 170.078 li
179.719 170.078 li
179.642 170.078 li
179.532 170.133 li
179.678 170.425 li
179.678 170.098 li
179.617 170.098 li
179.576 170.098 li
179.514 170.098 li
179.453 170.098 li
179.351 170.098 li
179.273 170.098 li
179.163 170.153 li
179.31 170.446 li
179.31 170.119 li
179.248 170.119 li
179.146 170.119 li
179.085 170.119 li
179.007 170.119 li
178.967 170.139 li
178.942 170.139 li
178.88 170.139 li
178.803 170.139 li
178.762 170.159 li
178.717 170.159 li
178.639 170.159 li
178.529 170.214 li
178.676 170.507 li
178.676 170.18 li
178.614 170.18 li
178.598 170.18 li
178.377 170.202 li
178.361 170.204 li
178.275 170.221 li
178.246 170.221 li
178.169 170.221 li
178.101 170.255 li
177.951 170.282 li
177.878 170.282 li
177.801 170.282 li
177.691 170.337 li
177.837 170.63 li
177.837 170.303 li
177.776 170.303 li
177.743 170.303 li
177.507 170.35 li
177.405 170.37 li
177.385 170.374 li
177.304 170.401 li
177.282 170.409 li
177.262 170.419 li
177.083 170.451 li
177.08 170.452 li
176.975 170.473 li
176.932 170.481 li
176.852 170.521 li
176.998 170.814 li
176.998 170.487 li
176.937 170.487 li
176.892 170.487 li
176.481 170.601 li
176.479 170.602 li
176.278 170.662 li
176.203 170.681 li
176.168 170.689 li
176.116 170.715 li
176.077 170.729 li
175.708 170.851 li
175.544 170.906 li
175.461 170.923 li
175.418 170.931 li
175.359 170.961 li
175.32 170.974 li
175.312 170.977 li
174.944 171.12 li
174.768 171.179 li
174.759 171.181 li
174.647 171.226 li
174.635 171.231 li
174.582 171.258 li
174.55 171.273 li
174.171 171.433 li
174.168 171.434 li
173.987 171.515 li
173.891 171.553 li
173.878 171.558 li
173.825 171.585 li
173.777 171.609 li
173.739 171.647 li
172.972 172.012 li
172.96 172.017 li
172.559 172.249 li
172.558 172.25 li
172.373 172.361 li
172.295 172.392 li
172.263 172.405 li
172.191 172.453 li
172.168 172.464 li
172.157 172.47 li
171.328 172.967 li
171.319 172.973 li
170.923 173.244 li
170.725 173.383 li
170.632 173.438 li
170.625 173.442 li
170.558 173.487 li
170.531 173.505 li
170.487 173.549 li
169.753 174.064 li
169.747 174.069 li
169.372 174.36 li
169.188 174.503 li
169.172 174.516 li
169.099 174.589 li
169.082 174.601 li
169.059 174.612 li
169.025 174.629 li
168.255 175.27 li
167.889 175.596 li
167.692 175.754 li
167.677 175.765 li
167.583 175.86 li
167.565 175.878 li
167.531 175.901 li
167.507 175.916 li
165.969 177.371 li
165.206 178.155 li
164.816 178.566 li
164.813 178.569 li
164.626 178.777 li
164.619 178.784 li
164.563 178.854 li
164.544 178.867 li
164.49 178.903 li
164.423 179.003 li
161.176 182.821 li
158.158 186.887 li
154.939 191.685 li
151.661 196.991 li
148.631 202.17 li
145.397 207.922 li
142.41 213.324 li
139.362 218.847 li
136.111 224.694 li
133.107 229.905 li
129.88 235.257 li
126.92 239.849 li
123.902 244.153 li
120.66 248.25 li
119.177 249.936 li
118.425 250.73 li
118.06 251.115 li
117.878 251.296 li
117.776 251.398 li
117.735 251.439 li
117.712 251.462 li
117.674 251.519 li
116.091 253.003 li
115.299 253.693 li
114.897 254.035 li
114.718 254.174 li
114.714 254.177 li
114.623 254.25 li
114.574 254.283 li
114.547 254.301 li
114.498 254.35 li
113.702 254.966 li
113.299 255.248 li
113.095 255.391 li
113.086 255.397 li
113.021 255.449 li
113.015 255.451 li
112.942 255.476 li
112.871 255.547 li
112.086 256.057 li
111.682 256.299 li
111.478 256.422 li
111.406 256.465 li
111.379 256.474 li
111.306 256.498 li
111.244 256.56 li
110.533 256.944 li
110.183 257.12 li
109.99 257.197 li
109.978 257.202 li
109.884 257.249 li
109.866 257.258 li
109.804 257.298 li
109.793 257.304 li
109.048 257.606 li
109.044 257.608 li
108.685 257.768 li
108.515 257.824 li
108.506 257.827 li
108.395 257.871 li
108.517 258.175 li
108.517 257.848 li
108.476 257.848 li
108.423 257.848 li
108.311 257.885 li
108.307 257.887 li
107.922 258.028 li
107.742 258.083 li
107.655 258.1 li
107.634 258.104 li
107.554 258.131 li
107.532 258.138 li
107.502 258.153 li
107.128 258.247 li
107.12 258.248 li
106.924 258.307 li
106.868 258.319 li
106.86 258.319 li
106.807 258.319 li
106.713 258.35 li
106.344 258.428 li
106.141 258.468 li
106.071 258.482 li
106.042 258.482 li
105.964 258.482 li
105.908 258.51 li
105.763 258.525 li
105.748 258.526 li
105.63 258.55 li
105.587 258.559 li
105.507 258.599 li
105.653 258.891 li
105.653 258.564 li
105.592 258.564 li
105.575 258.564 li
105.354 258.586 li
105.338 258.588 li
105.252 258.605 li
105.244 258.605 li
105.182 258.605 li
105.165 258.605 li
104.962 258.627 li
104.94 258.63 li
104.876 258.646 li
104.855 258.646 li
104.814 258.646 li
104.732 258.646 li
104.679 258.646 li
104.568 258.683 li
104.671 258.994 li
104.671 258.666 li
104.63 258.666 li
104.548 258.666 li
104.487 258.666 li
104.446 258.666 li
104.414 258.666 li
104.311 258.687 li
104.303 258.687 li
104.262 258.687 li
104.221 258.687 li
104.16 258.687 li
104.119 258.687 li
104.078 258.687 li
104.037 258.687 li
103.976 258.687 li
103.935 258.687 li
103.894 258.687 li
103.832 258.687 li
103.464 258.687 li
103.464 259.341 li
cp
f
grestore
183.585 263.841 mo
23.8757 263.841 li
23.8757 264.046 li
183.585 264.046 li
.597711 .511803 .507713 .201297 cmyk
f
24.0802 264.046 mo
24.0802 165.373 li
23.8757 165.373 li
23.8757 264.046 li
f
23.8757 165.578 mo
183.585 165.578 li
183.585 165.373 li
23.8757 165.373 li
f
183.38 165.373 mo
183.38 264.046 li
183.585 264.046 li
183.585 165.373 li
f
27.2711 263.944 mo
27.2711 262.634 li
27.0666 262.634 li
27.0666 263.944 li
f
32.937 263.944 mo
32.937 263.166 li
32.7325 263.166 li
32.7325 263.944 li
f
38.6234 263.944 mo
38.6234 263.166 li
38.4188 263.166 li
38.4188 263.944 li
f
44.2893 263.944 mo
44.2893 263.166 li
44.0847 263.166 li
44.0847 263.944 li
f
49.9552 263.944 mo
49.9552 263.166 li
49.7506 263.166 li
49.7506 263.944 li
f
55.6211 263.944 mo
55.6211 262.634 li
55.4166 262.634 li
55.4166 263.944 li
f
61.3075 263.944 mo
61.3075 263.166 li
61.1029 263.166 li
61.1029 263.944 li
f
66.9734 263.944 mo
66.9734 263.166 li
66.7688 263.166 li
66.7688 263.944 li
f
72.6393 263.944 mo
72.6393 263.166 li
72.4347 263.166 li
72.4347 263.944 li
f
78.3257 263.944 mo
78.3257 263.166 li
78.1211 263.166 li
78.1211 263.944 li
f
83.9916 263.944 mo
83.9916 262.634 li
83.787 262.634 li
83.787 263.944 li
f
89.6575 263.944 mo
89.6575 263.166 li
89.4529 263.166 li
89.4529 263.944 li
f
95.3234 263.944 mo
95.3234 263.166 li
95.1188 263.166 li
95.1188 263.944 li
f
101.01 263.944 mo
101.01 263.166 li
100.805 263.166 li
100.805 263.944 li
f
106.676 263.944 mo
106.676 263.166 li
106.471 263.166 li
106.471 263.944 li
f
112.342 263.944 mo
112.342 262.634 li
112.137 262.634 li
112.137 263.944 li
f
118.007 263.944 mo
118.007 263.166 li
117.803 263.166 li
117.803 263.944 li
f
123.694 263.944 mo
123.694 263.166 li
123.489 263.166 li
123.489 263.944 li
f
129.36 263.944 mo
129.36 263.166 li
129.155 263.166 li
129.155 263.944 li
f
135.026 263.944 mo
135.026 263.166 li
134.821 263.166 li
134.821 263.944 li
f
140.712 263.944 mo
140.712 262.634 li
140.507 262.634 li
140.507 263.944 li
f
146.378 263.944 mo
146.378 263.166 li
146.173 263.166 li
146.173 263.944 li
f
152.044 263.944 mo
152.044 263.166 li
151.839 263.166 li
151.839 263.944 li
f
157.71 263.944 mo
157.71 263.166 li
157.505 263.166 li
157.505 263.944 li
f
163.396 263.944 mo
163.396 263.166 li
163.192 263.166 li
163.192 263.944 li
f
169.062 263.944 mo
169.062 262.634 li
168.857 262.634 li
168.857 263.944 li
f
174.728 263.944 mo
174.728 263.166 li
174.523 263.166 li
174.523 263.944 li
f
180.394 263.944 mo
180.394 263.166 li
180.189 263.166 li
180.189 263.944 li
f
23.9779 261.039 mo
24.7552 261.039 li
24.7552 260.834 li
23.9779 260.834 li
f
23.9779 257.194 mo
24.7552 257.194 li
24.7552 256.989 li
23.9779 256.989 li
f
23.9779 253.348 mo
25.287 253.348 li
25.287 253.144 li
23.9779 253.144 li
f
23.9779 249.482 mo
24.7552 249.482 li
24.7552 249.278 li
23.9779 249.278 li
f
23.9779 245.637 mo
24.7552 245.637 li
24.7552 245.432 li
23.9779 245.432 li
f
23.9779 241.791 mo
24.7552 241.791 li
24.7552 241.587 li
23.9779 241.587 li
f
23.9779 237.925 mo
24.7552 237.925 li
24.7552 237.721 li
23.9779 237.721 li
f
23.9779 234.08 mo
25.287 234.08 li
25.287 233.875 li
23.9779 233.875 li
f
23.9779 230.214 mo
24.7552 230.214 li
24.7552 230.009 li
23.9779 230.009 li
f
23.9779 226.369 mo
24.7552 226.369 li
24.7552 226.164 li
23.9779 226.164 li
f
23.9779 218.657 mo
24.7552 218.657 li
24.7552 218.453 li
23.9779 218.453 li
f
23.9779 214.812 mo
25.287 214.812 li
25.287 214.607 li
23.9779 214.607 li
f
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
def
/FontBBox {-665 -325 2000 1040} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3A
BC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A1
0425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E3
1D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC
60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A
5B546505C954A88> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OEXTJG+ArialMT /ArialMT findfont ct_VMDictPut
/OEXTJG+ArialMT*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
OEXTJG+ArialMT nf
OEXTJG+ArialMT*1 [8.4948 0 0 -8.48369 0 0 ]msf
18.4517 217.13 mo
(0)sh
23.9779 210.966 mo
24.7552 210.966 li
24.7552 210.762 li
23.9779 210.762 li
.597711 .511803 .507713 .201297 cmyk
f
23.9779 207.1 mo
24.7552 207.1 li
24.7552 206.896 li
23.9779 206.896 li
f
23.9779 203.255 mo
24.7552 203.255 li
24.7552 203.05 li
23.9779 203.05 li
f
23.9779 199.409 mo
24.7552 199.409 li
24.7552 199.205 li
23.9779 199.205 li
f
23.9779 195.544 mo
25.287 195.544 li
25.287 195.339 li
23.9779 195.339 li
f
23.9779 191.698 mo
24.7552 191.698 li
24.7552 191.494 li
23.9779 191.494 li
f
23.9779 187.832 mo
24.7552 187.832 li
24.7552 187.628 li
23.9779 187.628 li
f
23.9779 183.987 mo
24.7552 183.987 li
24.7552 183.782 li
23.9779 183.782 li
f
23.9779 180.141 mo
24.7552 180.141 li
24.7552 179.937 li
23.9779 179.937 li
f
23.9779 176.275 mo
25.287 176.275 li
25.287 176.071 li
23.9779 176.071 li
f
23.9779 172.43 mo
24.7552 172.43 li
24.7552 172.225 li
23.9779 172.225 li
f
23.9779 168.584 mo
24.7552 168.584 li
24.7552 168.38 li
23.9779 168.38 li
f
27.0666 165.475 mo
27.0666 166.785 li
27.2711 166.785 li
27.2711 165.475 li
f
32.7325 165.475 mo
32.7325 166.253 li
32.937 166.253 li
32.937 165.475 li
f
38.4188 165.475 mo
38.4188 166.253 li
38.6234 166.253 li
38.6234 165.475 li
f
44.0847 165.475 mo
44.0847 166.253 li
44.2893 166.253 li
44.2893 165.475 li
f
49.7506 165.475 mo
49.7506 166.253 li
49.9552 166.253 li
49.9552 165.475 li
f
55.4166 165.475 mo
55.4166 166.785 li
55.6211 166.785 li
55.6211 165.475 li
f
61.1029 165.475 mo
61.1029 166.253 li
61.3075 166.253 li
61.3075 165.475 li
f
66.7688 165.475 mo
66.7688 166.253 li
66.9734 166.253 li
66.9734 165.475 li
f
72.4347 165.475 mo
72.4347 166.253 li
72.6393 166.253 li
72.6393 165.475 li
f
78.1211 165.475 mo
78.1211 166.253 li
78.3257 166.253 li
78.3257 165.475 li
f
83.787 165.475 mo
83.787 166.785 li
83.9916 166.785 li
83.9916 165.475 li
f
89.4529 165.475 mo
89.4529 166.253 li
89.6575 166.253 li
89.6575 165.475 li
f
95.1188 165.475 mo
95.1188 166.253 li
95.3234 166.253 li
95.3234 165.475 li
f
100.805 165.475 mo
100.805 166.253 li
101.01 166.253 li
101.01 165.475 li
f
106.471 165.475 mo
106.471 166.253 li
106.676 166.253 li
106.676 165.475 li
f
112.137 165.475 mo
112.137 166.785 li
112.342 166.785 li
112.342 165.475 li
f
117.803 165.475 mo
117.803 166.253 li
118.007 166.253 li
118.007 165.475 li
f
123.489 165.475 mo
123.489 166.253 li
123.694 166.253 li
123.694 165.475 li
f
129.155 165.475 mo
129.155 166.253 li
129.36 166.253 li
129.36 165.475 li
f
134.821 165.475 mo
134.821 166.253 li
135.026 166.253 li
135.026 165.475 li
f
140.507 165.475 mo
140.507 166.785 li
140.712 166.785 li
140.712 165.475 li
f
146.173 165.475 mo
146.173 166.253 li
146.378 166.253 li
146.378 165.475 li
f
151.839 165.475 mo
151.839 166.253 li
152.044 166.253 li
152.044 165.475 li
f
157.505 165.475 mo
157.505 166.253 li
157.71 166.253 li
157.71 165.475 li
f
163.192 165.475 mo
163.192 166.253 li
163.396 166.253 li
163.396 165.475 li
f
168.857 165.475 mo
168.857 166.785 li
169.062 166.785 li
169.062 165.475 li
f
174.523 165.475 mo
174.523 166.253 li
174.728 166.253 li
174.728 165.475 li
f
180.189 165.475 mo
180.189 166.253 li
180.394 166.253 li
180.394 165.475 li
f
183.482 260.834 mo
182.705 260.834 li
182.705 261.039 li
183.482 261.039 li
f
183.482 256.989 mo
182.705 256.989 li
182.705 257.194 li
183.482 257.194 li
f
183.482 253.144 mo
182.194 253.144 li
182.194 253.348 li
183.482 253.348 li
f
183.482 249.278 mo
182.705 249.278 li
182.705 249.482 li
183.482 249.482 li
f
183.482 245.432 mo
182.705 245.432 li
182.705 245.637 li
183.482 245.637 li
f
183.482 241.587 mo
182.705 241.587 li
182.705 241.791 li
183.482 241.791 li
f
183.482 237.721 mo
182.705 237.721 li
182.705 237.925 li
183.482 237.925 li
f
183.482 233.875 mo
182.194 233.875 li
182.194 234.08 li
183.482 234.08 li
f
183.482 230.009 mo
182.705 230.009 li
182.705 230.214 li
183.482 230.214 li
f
183.482 226.164 mo
182.705 226.164 li
182.705 226.369 li
183.482 226.369 li
f
183.482 222.319 mo
182.705 222.319 li
182.705 222.523 li
183.482 222.523 li
f
183.482 218.453 mo
182.705 218.453 li
182.705 218.657 li
183.482 218.657 li
f
183.482 214.607 mo
182.194 214.607 li
182.194 214.812 li
183.482 214.812 li
f
183.482 210.762 mo
182.705 210.762 li
182.705 210.966 li
183.482 210.966 li
f
183.482 206.896 mo
182.705 206.896 li
182.705 207.1 li
183.482 207.1 li
f
183.482 203.05 mo
182.705 203.05 li
182.705 203.255 li
183.482 203.255 li
f
183.482 199.205 mo
182.705 199.205 li
182.705 199.409 li
183.482 199.409 li
f
183.482 195.339 mo
182.194 195.339 li
182.194 195.544 li
183.482 195.544 li
f
183.482 191.494 mo
182.705 191.494 li
182.705 191.698 li
183.482 191.698 li
f
183.482 187.628 mo
182.705 187.628 li
182.705 187.832 li
183.482 187.832 li
f
183.482 183.782 mo
182.705 183.782 li
182.705 183.987 li
183.482 183.987 li
f
183.482 179.937 mo
182.705 179.937 li
182.705 180.141 li
183.482 180.141 li
f
183.482 176.071 mo
182.194 176.071 li
182.194 176.275 li
183.482 176.275 li
f
183.482 172.225 mo
182.705 172.225 li
182.705 172.43 li
183.482 172.43 li
f
183.482 168.38 mo
182.705 168.38 li
182.705 168.584 li
183.482 168.584 li
f
23.9779 214.75 mo
183.482 214.75 li
183.482 214.669 li
23.9779 214.669 li
f
.749721 .679194 .670497 .901457 cmyk
OEXTJE+MyriadPro-Regular*1 [15.7086 0 0 -15 0 0 ]msf
100.221 278.165 mo
(t)sh
%ADOBeginSubsetFont: SymbolMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJD+SymbolMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g3 <1C60D8A8C9B8707C25> |-
/g15 <1C60D8A8C9B8707CDCEBD720EFC872F6202427E0DC160E0D9FF84BE943
BEE0ADD9580AD115B54E6C20AAADE171AF100EC7A995D9087D9516034494C1A7
1E011ADD190087F158B2F06247840DBFE499A4B3B80E943E820BAA4B52716040
45355454CD6938B6906B1461F3370995EE50814A23> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJD+SymbolMT /Encoding get
dup 32 /g3 put
dup 44 /g15 put
pop
%ADOEndSubsetFont
/OEXTJD+SymbolMT*1 
[32{/.notdef}rp /g3 7{/.notdef}rp /g11 /g12 2{/.notdef}rp /g15 23{/.notdef}rp 
/g39 18{/.notdef}rp /g58 15{/.notdef}rp /g74 15{/.notdef}rp /g90 136{/.notdef}rp]
OEXTJD+SymbolMT nf
OEXTJD+SymbolMT*1 [8.8399 0 0 -8.8399 0 0 ]msf
47.0151 197.873 mo
(W\()
[6.78955 0 ]xsh
OEXTJF+TimesNewRomanPSMT*1 [8.8399 0 0 -8.8399 0 0 ]msf
56.7485 197.873 mo
(t)sh
OEXTJD+SymbolMT*1 [8.8399 0 0 -8.8399 0 0 ]msf
59.2046 197.873 mo
(\))sh
OEXTJD+SymbolMT*1 [0 -15.7086 -15 0 0 0 ]msf
13.2002 244.97 mo
(W \()
[-12.0654 -3.92676 0 ]ysh
OEXTJE+MyriadPro-Regular*1 [0 -15.7086 -15 0 0 0 ]msf
13.2002 223.747 mo
(t)sh
OEXTJD+SymbolMT*1 [0 -15.7086 -15 0 0 0 ]msf
13.2002 218.547 mo
(\), D\()
[-5.23145 -3.92676 -3.92676 -9.61133 0 ]ysh
OEXTJE+MyriadPro-Regular*1 [0 -15.7086 -15 0 0 0 ]msf
13.2002 190.62 mo
(t)sh
OEXTJD+SymbolMT*1 [0 -15.7086 -15 0 0 0 ]msf
13.2002 185.42 mo
(\))sh
OEXTJD+SymbolMT*1 [8.8399 0 0 -8.8399 0 0 ]msf
40.3638 229.122 mo
(D\()
[5.4082 0 ]xsh
OEXTJF+TimesNewRomanPSMT*1 [8.8399 0 0 -8.8399 0 0 ]msf
48.7158 229.122 mo
(t)sh
OEXTJD+SymbolMT*1 [8.8399 0 0 -8.8399 0 0 ]msf
51.1719 229.122 mo
(\))sh
103.643 169.974 mo
103.643 259.041 li
104.297 259.041 li
104.297 169.974 li
0 .993347 1 0 cmyk
f
.698207 .674464 .638605 .739437 cmyk
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
OEXTJE+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B896187A> |-
/c <1C60D8A8C9B77BBBDC3E0FE76B551D0A83C57AF160CCFFDAD04ED1BC9C85
7824C5D2B529D52FE463A93EC53B358141F6EED9D8424AE5C5437D71AE2A700C
140AC6F47A146152237D6C7AD4A89BE54FF3BB17> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJE+MyriadPro-Regular /Encoding get
dup 32 /space put
dup 99 /c put
pop
%ADOEndSubsetFont
/OEXTJE+MyriadPro-Regular*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
12{/.notdef}rp /greater 3{/.notdef}rp /B 32{/.notdef}rp /c /d 12{/.notdef}rp 
/q /r /.notdef /t 7{/.notdef}rp /bar 131{/.notdef}rp]
OEXTJE+MyriadPro-Regular nf
OEXTJE+MyriadPro-Regular*1 [12.42 0 0 -12.42 0 0 ]msf
221.437 174.982 mo
(c\) )
[5.56445 3.52734 0 ]xsh
380.784 259.28 mo
221.246 259.28 li
221.246 259.25 li
221.295 259.248 li
221.637 259.248 li
222.027 259.245 li
222.079 259.242 li
222.421 259.242 li
222.812 259.237 li
223.009 259.237 li
223.202 259.234 li
223.594 259.231 li
224.378 259.223 li
224.432 259.223 li
224.483 259.221 li
224.591 259.221 li
224.801 259.218 li
225.227 259.212 li
225.278 259.212 li
225.332 259.21 li
225.437 259.21 li
226.076 259.202 li
226.127 259.199 li
226.181 259.199 li
226.286 259.197 li
226.925 259.188 li
227.772 259.172 li
227.823 259.17 li
227.871 259.17 li
227.971 259.167 li
228.168 259.164 li
228.564 259.153 li
228.664 259.153 li
228.763 259.15 li
228.96 259.145 li
229.356 259.134 li
229.408 259.134 li
229.456 259.132 li
229.556 259.129 li
229.753 259.123 li
230.149 259.113 li
230.944 259.088 li
231.041 259.083 li
231.332 259.075 li
231.72 259.059 li
231.769 259.056 li
231.817 259.056 li
231.914 259.051 li
232.496 259.027 li
232.545 259.027 li
232.69 259.018 li
232.885 259.01 li
233.272 258.992 li
234.051 258.951 li
234.102 258.948 li
234.156 258.945 li
234.262 258.94 li
234.892 258.9 li
234.946 258.897 li
234.997 258.894 li
235.103 258.886 li
235.315 258.873 li
235.736 258.843 li
235.787 258.84 li
235.841 258.838 li
236.157 258.814 li
236.579 258.781 li
237.421 258.709 li
237.472 258.703 li
237.52 258.698 li
237.617 258.689 li
237.814 258.671 li
238.208 258.63 li
238.995 258.546 li
239.092 258.536 li
239.191 258.522 li
239.389 258.501 li
239.782 258.453 li
240.568 258.344 li
240.62 258.337 li
240.674 258.331 li
240.782 258.315 li
241.421 258.218 li
242.272 258.073 li
242.326 258.064 li
242.38 258.053 li
242.485 258.035 li
243.124 257.913 li
243.978 257.733 li
244.029 257.722 li
244.081 257.708 li
244.186 257.687 li
244.396 257.639 li
244.814 257.538 li
245.652 257.32 li
245.703 257.307 li
245.754 257.291 li
245.859 257.264 li
246.07 257.205 li
246.488 257.08 li
247.323 256.814 li
247.375 256.797 li
247.52 256.749 li
247.714 256.681 li
248.105 256.544 li
248.886 256.245 li
248.984 256.207 li
249.08 256.167 li
249.278 256.086 li
249.665 255.922 li
250.447 255.568 li
250.501 255.544 li
250.552 255.517 li
250.658 255.466 li
250.87 255.364 li
251.293 255.15 li
252.14 254.692 li
252.194 254.663 li
252.245 254.633 li
252.353 254.571 li
252.563 254.45 li
252.986 254.194 li
253.832 253.652 li
253.881 253.62 li
253.932 253.587 li
254.029 253.52 li
254.228 253.383 li
254.622 253.105 li
255.414 252.512 li
255.512 252.437 li
255.611 252.359 li
255.808 252.202 li
256.204 251.876 li
256.994 251.194 li
257.091 251.108 li
257.382 250.841 li
257.767 250.477 li
258.544 249.712 li
258.593 249.66 li
258.641 249.612 li
258.737 249.51 li
258.929 249.307 li
259.317 248.892 li
260.093 248.021 li
260.145 247.962 li
260.199 247.901 li
260.301 247.776 li
260.511 247.529 li
260.932 247.016 li
261.773 245.944 li
263.454 243.593 li
263.552 243.447 li
263.652 243.302 li
263.846 243.006 li
264.239 242.399 li
265.023 241.146 li
266.592 238.443 li
266.646 238.348 li
266.697 238.251 li
266.805 238.057 li
267.018 237.667 li
267.441 236.874 li
268.293 235.227 li
269.991 231.715 li
273.33 224.014 li
276.444 216.009 li
279.82 206.73 li
282.972 197.889 li
286.386 188.644 li
286.44 188.509 li
286.491 188.374 li
286.596 188.102 li
286.807 187.563 li
287.225 186.498 li
288.062 184.418 li
289.739 180.496 li
289.79 180.385 li
289.936 180.062 li
290.13 179.633 li
290.524 178.792 li
291.305 177.176 li
291.499 176.787 li
291.696 176.404 li
292.087 175.658 li
292.868 174.243 li
292.922 174.151 li
292.974 174.06 li
293.082 173.876 li
293.292 173.521 li
293.718 172.831 li
293.769 172.747 li
293.823 172.664 li
293.927 172.499 li
294.141 172.176 li
294.564 171.555 li
294.617 171.48 li
294.669 171.404 li
294.777 171.256 li
294.987 170.968 li
295.413 170.421 li
296.259 169.434 li
296.311 169.381 li
296.359 169.329 li
296.458 169.224 li
296.656 169.025 li
297.052 168.65 li
297.1 168.607 li
297.151 168.561 li
297.248 168.477 li
297.448 168.31 li
297.844 168.006 li
297.893 167.968 li
297.941 167.933 li
298.041 167.865 li
298.238 167.734 li
298.289 167.704 li
298.337 167.671 li
298.437 167.612 li
298.634 167.499 li
298.685 167.472 li
298.733 167.445 li
298.833 167.394 li
299.03 167.3 li
299.081 167.278 li
299.13 167.257 li
299.229 167.213 li
299.426 167.135 li
299.475 167.119 li
299.523 167.1 li
299.62 167.068 li
299.669 167.055 li
299.717 167.038 li
299.911 166.984 li
300.008 166.96 li
300.106 166.939 li
300.202 166.919 li
300.396 166.887 li
300.445 166.882 li
300.494 166.874 li
300.591 166.863 li
300.639 166.86 li
300.687 166.855 li
300.882 166.844 li
301.124 166.844 li
301.172 166.847 li
301.221 166.847 li
301.27 166.85 li
301.318 166.855 li
301.367 166.857 li
301.415 166.863 li
301.464 166.866 li
301.561 166.877 li
301.609 166.885 li
301.658 166.89 li
301.804 166.914 li
301.852 166.925 li
301.949 166.944 li
302.046 166.966 li
302.143 166.99 li
302.24 167.017 li
302.337 167.046 li
302.531 167.111 li
302.582 167.13 li
302.637 167.148 li
302.742 167.189 li
302.952 167.278 li
303.003 167.302 li
303.057 167.326 li
303.162 167.378 li
303.372 167.486 li
303.426 167.516 li
303.477 167.545 li
303.583 167.607 li
303.792 167.736 li
304.216 168.025 li
304.267 168.065 li
304.321 168.103 li
304.426 168.183 li
304.636 168.353 li
305.057 168.723 li
305.108 168.771 li
305.162 168.82 li
305.267 168.92 li
305.477 169.129 li
305.898 169.574 li
305.946 169.628 li
305.998 169.682 li
306.094 169.793 li
306.291 170.022 li
306.685 170.505 li
307.469 171.561 li
307.518 171.631 li
307.569 171.701 li
307.666 171.844 li
307.863 172.135 li
308.256 172.739 li
309.041 174.035 li
309.148 174.218 li
309.253 174.404 li
309.466 174.785 li
309.892 175.564 li
310.744 177.216 li
312.447 180.852 li
312.499 180.968 li
312.553 181.086 li
312.655 181.323 li
312.865 181.803 li
313.283 182.779 li
314.118 184.792 li
315.792 189.032 li
318.911 197.479 li
322.293 206.964 li
325.449 215.646 li
328.543 223.635 li
331.905 231.427 li
331.953 231.532 li
332.002 231.639 li
332.099 231.85 li
332.296 232.267 li
332.686 233.092 li
333.471 234.693 li
335.037 237.712 li
335.091 237.809 li
335.145 237.909 li
335.249 238.103 li
335.463 238.485 li
335.886 239.243 li
336.735 240.696 li
338.435 243.383 li
338.484 243.458 li
338.533 243.531 li
338.633 243.679 li
338.832 243.968 li
339.228 244.54 li
340.02 245.631 li
340.069 245.698 li
340.12 245.763 li
340.22 245.895 li
340.416 246.153 li
340.813 246.663 li
341.605 247.634 li
341.653 247.693 li
341.705 247.749 li
341.996 248.089 li
342.384 248.531 li
343.16 249.374 li
343.209 249.423 li
343.354 249.577 li
343.551 249.776 li
343.939 250.164 li
344.716 250.903 li
344.769 250.951 li
344.82 251 li
344.926 251.097 li
345.139 251.286 li
345.559 251.652 li
346.403 252.345 li
346.456 252.388 li
346.508 252.428 li
346.613 252.512 li
346.824 252.674 li
347.247 252.989 li
348.09 253.579 li
348.139 253.614 li
348.187 253.647 li
348.287 253.711 li
348.484 253.841 li
348.877 254.091 li
349.664 254.563 li
349.713 254.593 li
349.761 254.62 li
349.861 254.676 li
350.058 254.787 li
350.451 255 li
351.238 255.402 li
351.292 255.428 li
351.343 255.455 li
351.451 255.506 li
351.664 255.606 li
352.09 255.8 li
352.945 256.164 li
352.998 256.185 li
353.049 256.207 li
353.157 256.25 li
353.37 256.334 li
353.796 256.496 li
354.65 256.797 li
354.702 256.814 li
354.756 256.833 li
354.858 256.865 li
355.068 256.932 li
355.486 257.064 li
356.324 257.305 li
356.375 257.32 li
356.43 257.333 li
356.535 257.363 li
356.742 257.418 li
357.163 257.525 li
357.998 257.722 li
358.049 257.733 li
358.195 257.765 li
358.389 257.806 li
358.78 257.886 li
359.562 258.037 li
359.61 258.046 li
359.658 258.056 li
359.756 258.073 li
359.952 258.108 li
360.343 258.175 li
361.124 258.296 li
361.176 258.304 li
361.23 258.312 li
361.335 258.326 li
361.548 258.358 li
361.971 258.415 li
362.817 258.52 li
362.871 258.528 li
362.923 258.533 li
363.03 258.546 li
363.241 258.569 li
363.664 258.614 li
364.512 258.698 li
364.61 258.709 li
364.71 258.716 li
364.906 258.736 li
365.302 258.768 li
366.092 258.829 li
366.144 258.832 li
366.192 258.838 li
366.291 258.843 li
366.489 258.859 li
366.885 258.884 li
367.674 258.935 li
368.062 258.956 li
368.45 258.975 li
368.645 258.986 li
368.839 258.994 li
369.224 259.013 li
369.321 259.018 li
369.418 259.021 li
369.612 259.032 li
370 259.048 li
370.776 259.078 li
370.828 259.078 li
370.882 259.081 li
370.987 259.083 li
371.197 259.091 li
371.617 259.105 li
371.668 259.108 li
371.723 259.108 li
371.828 259.11 li
372.038 259.118 li
372.458 259.129 li
372.51 259.132 li
372.563 259.132 li
373.3 259.15 li
374.14 259.17 li
374.189 259.17 li
374.237 259.172 li
374.337 259.172 li
374.531 259.177 li
374.925 259.183 li
374.973 259.185 li
375.022 259.185 li
375.121 259.188 li
375.318 259.191 li
375.709 259.197 li
375.757 259.199 li
375.906 259.199 li
376.102 259.202 li
376.494 259.207 li
377.277 259.218 li
377.334 259.218 li
377.388 259.221 li
377.499 259.221 li
377.717 259.223 li
378.156 259.229 li
378.264 259.229 li
378.375 259.231 li
378.593 259.231 li
379.032 259.237 li
379.251 259.237 li
379.469 259.239 li
379.908 259.242 li
379.962 259.245 li
380.126 259.245 li
380.345 259.248 li
380.727 259.248 li
380.784 259.25 li
380.784 259.28 li
.109895 .0572518 .0158083 0 cmyk
f
221.269 259.647 mo
221.305 259.645 li
221.637 259.645 li
221.64 259.645 li
222.03 259.642 li
222.04 259.642 li
222.09 259.639 li
222.421 259.639 li
222.424 259.639 li
222.815 259.634 li
223.009 259.634 li
223.011 259.634 li
223.208 259.631 li
223.205 259.631 li
223.597 259.628 li
223.604 259.628 li
224.382 259.621 li
224.378 259.621 li
224.432 259.621 li
224.442 259.621 li
224.493 259.618 li
224.591 259.618 li
224.592 259.618 li
224.806 259.615 li
225.229 259.61 li
225.278 259.61 li
225.288 259.61 li
225.342 259.607 li
225.437 259.607 li
225.439 259.607 li
226.081 259.599 li
226.089 259.599 li
226.137 259.597 li
226.181 259.597 li
226.186 259.597 li
226.293 259.594 li
226.93 259.586 li
226.937 259.586 li
227.779 259.57 li
227.786 259.57 li
227.833 259.567 li
227.871 259.567 li
227.877 259.567 li
227.976 259.564 li
228.173 259.561 li
228.175 259.561 li
228.569 259.55 li
228.664 259.551 li
228.67 259.551 li
228.774 259.548 li
228.971 259.542 li
229.361 259.532 li
229.408 259.532 li
229.419 259.532 li
229.473 259.529 li
229.567 259.526 li
229.764 259.521 li
230.159 259.51 li
230.163 259.51 li
230.956 259.485 li
230.96 259.485 li
231.056 259.481 li
231.343 259.472 li
231.346 259.472 li
231.737 259.456 li
231.777 259.454 li
231.817 259.454 li
231.829 259.454 li
231.933 259.448 li
232.504 259.424 li
232.545 259.424 li
232.556 259.424 li
232.71 259.415 li
232.901 259.407 li
232.904 259.407 li
233.291 259.389 li
233.296 259.388 li
234.072 259.348 li
234.124 259.345 li
234.177 259.342 li
234.174 259.342 li
234.28 259.338 li
234.285 259.337 li
234.917 259.297 li
234.967 259.294 li
235.018 259.291 li
235.025 259.291 li
235.132 259.282 li
235.34 259.27 li
235.343 259.269 li
235.761 259.24 li
235.809 259.237 li
235.862 259.235 li
235.866 259.234 li
236.187 259.21 li
236.61 259.177 li
236.612 259.177 li
237.455 259.105 li
237.458 259.104 li
237.514 259.098 li
237.517 259.098 li
237.56 259.093 li
237.651 259.085 li
237.655 259.085 li
237.851 259.066 li
237.856 259.066 li
238.249 259.025 li
239.036 258.942 li
239.134 258.931 li
239.141 258.931 li
239.24 258.917 li
239.431 258.896 li
239.434 258.896 li
239.83 258.847 li
240.623 258.738 li
240.625 258.738 li
240.67 258.731 li
240.714 258.727 li
240.725 258.726 li
240.842 258.707 li
240.848 258.707 li
241.48 258.611 li
241.482 258.611 li
242.339 258.464 li
242.272 258.073 li
242.333 258.465 li
242.386 258.457 li
242.396 258.456 li
242.454 258.444 li
242.554 258.426 li
242.557 258.425 li
243.198 258.304 li
243.203 258.303 li
244.06 258.122 li
244.113 258.11 li
244.123 258.108 li
244.172 258.095 li
244.265 258.076 li
244.271 258.075 li
244.485 258.026 li
244.487 258.025 li
244.906 257.925 li
244.91 257.924 li
245.752 257.705 li
245.756 257.704 li
245.807 257.69 li
245.814 257.688 li
245.863 257.673 li
245.958 257.649 li
245.962 257.648 li
246.178 257.587 li
246.182 257.586 li
246.601 257.461 li
246.605 257.46 li
247.444 257.193 li
247.497 257.175 li
247.645 257.126 li
247.648 257.125 li
247.845 257.057 li
248.236 256.919 li
248.242 256.917 li
249.029 256.616 li
249.126 256.579 li
249.132 256.576 li
249.235 256.533 li
249.08 256.167 li
249.231 256.535 li
249.428 256.454 li
249.431 256.453 li
249.82 256.288 li
249.826 256.285 li
250.611 255.931 li
250.664 255.907 li
250.675 255.902 li
250.732 255.872 li
250.833 255.823 li
250.83 255.824 li
251.042 255.722 li
251.046 255.72 li
251.472 255.505 li
251.477 255.503 li
252.329 255.042 li
252.331 255.04 li
252.385 255.011 li
252.39 255.008 li
252.444 254.976 li
252.245 254.633 li
252.441 254.979 li
252.549 254.917 li
252.553 254.915 li
252.762 254.794 li
252.765 254.792 li
253.192 254.534 li
253.196 254.532 li
254.05 253.985 li
254.096 253.954 li
254.143 253.924 li
254.152 253.919 li
254.257 253.845 li
254.454 253.71 li
254.851 253.43 li
254.856 253.426 li
255.655 252.828 li
255.755 252.751 li
255.856 252.671 li
256.055 252.513 li
256.059 252.51 li
256.457 252.183 li
256.461 252.18 li
257.254 251.495 li
257.355 251.405 li
257.358 251.402 li
257.651 251.134 li
257.653 251.132 li
258.04 250.766 li
258.043 250.763 li
258.827 249.99 li
258.878 249.936 li
258.922 249.893 li
258.926 249.889 li
259.026 249.783 li
259.218 249.581 li
259.221 249.578 li
259.608 249.163 li
259.611 249.16 li
260.39 248.286 li
260.445 248.223 li
260.498 248.163 li
260.502 248.158 li
260.606 248.031 li
260.814 247.786 li
260.817 247.783 li
261.239 247.268 li
261.242 247.264 li
262.091 246.182 li
263.782 243.818 li
263.881 243.669 li
263.979 243.528 li
263.982 243.523 li
264.178 243.223 li
264.179 243.222 li
264.572 242.615 li
264.574 242.613 li
265.363 241.352 li
266.936 238.642 li
266.991 238.545 li
266.994 238.539 li
267.047 238.439 li
267.152 238.25 li
267.155 238.246 li
267.367 237.856 li
267.792 237.061 li
268.648 235.404 li
270.352 231.881 li
273.698 224.166 li
276.815 216.15 li
280.194 206.866 li
283.345 198.026 li
286.757 188.787 li
286.81 188.656 li
286.811 188.651 li
286.863 188.515 li
286.967 188.245 li
286.966 188.247 li
287.177 187.707 li
287.177 187.708 li
287.595 186.643 li
288.43 184.57 li
290.102 180.658 li
290.151 180.552 li
290.152 180.549 li
290.298 180.225 li
290.303 180.215 li
290.492 179.798 li
290.13 179.633 li
290.49 179.802 li
290.884 178.961 li
290.524 178.792 li
290.882 178.965 li
291.662 177.351 li
291.855 176.965 li
291.499 176.787 li
291.853 176.969 li
292.05 176.586 li
292.048 176.589 li
292.438 175.845 li
293.214 174.439 li
293.265 174.352 li
293.266 174.35 li
293.319 174.257 li
293.424 174.077 li
293.632 173.727 li
294.056 173.039 li
294.061 173.031 li
294.105 172.959 li
294.157 172.879 li
294.262 172.714 li
294.471 172.397 li
294.889 171.783 li
294.941 171.711 li
294.943 171.709 li
294.994 171.634 li
295.099 171.489 li
295.098 171.491 li
295.305 171.208 li
295.721 170.673 li
296.553 169.702 li
296.597 169.656 li
296.599 169.654 li
296.648 169.603 li
296.744 169.5 li
296.934 169.308 li
297.32 168.944 li
297.364 168.905 li
297.369 168.9 li
297.415 168.858 li
297.507 168.779 li
297.248 168.477 li
297.504 168.782 li
297.696 168.621 li
298.086 168.321 li
298.131 168.286 li
298.17 168.258 li
298.264 168.194 li
298.261 168.196 li
298.449 168.071 li
298.489 168.048 li
298.499 168.041 li
298.549 168.008 li
298.638 167.955 li
298.826 167.847 li
298.87 167.824 li
298.875 167.821 li
298.92 167.796 li
299.01 167.75 li
299.193 167.662 li
299.235 167.645 li
299.238 167.643 li
299.289 167.621 li
299.382 167.58 li
299.563 167.509 li
299.602 167.495 li
299.61 167.493 li
299.658 167.474 li
299.734 167.449 li
299.772 167.439 li
299.785 167.435 li
299.835 167.418 li
300.011 167.369 li
300.1 167.347 li
300.187 167.328 li
300.273 167.31 li
300.449 167.281 li
300.484 167.278 li
300.498 167.276 li
300.55 167.267 li
300.624 167.259 li
300.662 167.257 li
300.67 167.256 li
300.718 167.252 li
300.893 167.242 li
301.113 167.242 li
301.15 167.244 li
301.161 167.244 li
301.21 167.244 li
301.236 167.246 li
301.273 167.25 li
301.287 167.252 li
301.336 167.254 li
301.37 167.258 li
301.382 167.259 li
301.43 167.262 li
301.505 167.27 li
301.542 167.277 li
301.556 167.279 li
301.605 167.284 li
301.729 167.305 li
301.769 167.313 li
301.772 167.314 li
301.866 167.332 li
301.954 167.352 li
302.042 167.374 li
302.128 167.398 li
302.216 167.425 li
302.4 167.486 li
302.446 167.503 li
302.45 167.505 li
302.501 167.522 li
302.592 167.558 li
302.789 167.641 li
302.833 167.662 li
302.836 167.663 li
302.888 167.686 li
302.984 167.733 li
303.185 167.837 li
303.23 167.861 li
303.277 167.889 li
303.378 167.947 li
303.576 168.07 li
303.981 168.346 li
304.022 168.378 li
304.03 168.384 li
304.085 168.423 li
304.18 168.495 li
304.38 168.657 li
304.79 169.018 li
304.837 169.062 li
304.84 169.065 li
304.892 169.111 li
304.989 169.204 li
305.192 169.407 li
305.605 169.844 li
305.65 169.894 li
305.654 169.898 li
305.705 169.951 li
305.795 170.054 li
305.793 170.051 li
305.987 170.278 li
306.371 170.749 li
307.146 171.794 li
307.193 171.859 li
307.195 171.862 li
307.244 171.93 li
307.338 172.068 li
307.337 172.066 li
307.532 172.355 li
307.919 172.95 li
308.699 174.239 li
308.803 174.416 li
308.907 174.599 li
309.118 174.976 li
309.542 175.751 li
310.387 177.39 li
312.086 181.018 li
312.136 181.13 li
312.139 181.136 li
312.189 181.248 li
312.29 181.481 li
312.292 181.487 li
312.501 181.963 li
312.5 181.96 li
312.917 182.935 li
313.283 182.779 li
312.916 182.931 li
313.75 184.941 li
315.421 189.174 li
318.537 197.614 li
321.92 207.1 li
325.078 215.787 li
328.175 223.785 li
331.542 231.589 li
331.592 231.698 li
331.591 231.694 li
331.639 231.802 li
331.64 231.805 li
331.738 232.017 li
331.739 232.019 li
331.936 232.437 li
332.327 233.262 li
332.329 233.266 li
333.116 234.873 li
334.687 237.9 li
334.743 238.002 li
334.795 238.098 li
334.9 238.292 li
334.901 238.293 li
335.115 238.679 li
335.539 239.437 li
335.54 239.44 li
336.395 240.901 li
338.102 243.599 li
338.151 243.675 li
338.153 243.677 li
338.201 243.75 li
338.201 243.751 li
338.304 243.902 li
338.505 244.194 li
338.901 244.766 li
338.904 244.769 li
339.7 245.866 li
339.748 245.933 li
339.753 245.939 li
339.805 246.005 li
339.902 246.134 li
340.1 246.394 li
340.102 246.397 li
340.499 246.907 li
340.502 246.911 li
341.297 247.885 li
341.345 247.944 li
341.352 247.952 li
341.408 248.013 li
341.695 248.348 li
341.697 248.35 li
342.085 248.793 li
342.089 248.797 li
342.872 249.648 li
342.923 249.7 li
343.066 249.85 li
343.069 249.853 li
343.268 250.055 li
343.658 250.445 li
343.663 250.45 li
344.446 251.195 li
344.5 251.243 li
344.545 251.287 li
344.548 251.29 li
344.658 251.39 li
344.659 251.391 li
344.874 251.583 li
344.877 251.585 li
345.299 251.952 li
345.303 251.956 li
346.15 252.652 li
346.207 252.697 li
346.21 252.7 li
346.263 252.741 li
346.366 252.823 li
346.369 252.826 li
346.581 252.989 li
346.583 252.99 li
347.009 253.308 li
347.014 253.311 li
347.86 253.903 li
347.905 253.936 li
347.911 253.94 li
347.965 253.977 li
347.968 253.979 li
348.07 254.044 li
348.265 254.173 li
348.267 254.174 li
348.664 254.426 li
348.669 254.43 li
349.46 254.904 li
349.664 254.563 li
349.456 254.902 li
349.505 254.932 li
349.511 254.936 li
349.568 254.967 li
349.565 254.966 li
349.665 255.022 li
349.863 255.133 li
349.865 255.135 li
350.261 255.349 li
350.267 255.352 li
351.058 255.756 li
351.06 255.757 li
351.111 255.782 li
351.158 255.807 li
351.165 255.811 li
351.282 255.866 li
351.495 255.966 li
351.496 255.967 li
351.925 256.162 li
351.929 256.164 li
352.789 256.53 li
352.793 256.531 li
352.845 256.552 li
352.892 256.572 li
352.897 256.574 li
353.01 256.62 li
353.225 256.704 li
353.227 256.704 li
353.655 256.867 li
353.659 256.869 li
354.518 257.172 li
354.524 257.174 li
354.577 257.191 li
354.626 257.208 li
354.63 257.21 li
354.738 257.244 li
354.948 257.311 li
355.366 257.443 li
355.372 257.445 li
356.211 257.686 li
356.257 257.7 li
356.27 257.704 li
356.329 257.718 li
356.426 257.746 li
356.431 257.747 li
356.641 257.802 li
356.644 257.803 li
357.064 257.91 li
357.068 257.911 li
357.907 258.109 li
357.912 258.11 li
357.965 258.122 li
358.11 258.153 li
358.115 258.154 li
358.307 258.194 li
358.7 258.275 li
358.701 258.276 li
359.486 258.428 li
359.492 258.429 li
359.535 258.436 li
359.575 258.445 li
359.583 258.446 li
359.689 258.464 li
359.686 258.464 li
359.882 258.499 li
360.276 258.566 li
360.278 258.567 li
361.063 258.689 li
361.061 258.688 li
361.112 258.697 li
361.117 258.697 li
361.175 258.706 li
361.178 258.706 li
361.279 258.719 li
361.488 258.751 li
361.491 258.752 li
361.918 258.809 li
361.922 258.809 li
362.762 258.913 li
362.81 258.921 li
362.819 258.922 li
362.876 258.928 li
362.982 258.941 li
362.986 258.941 li
363.199 258.964 li
363.621 259.009 li
364.468 259.093 li
364.565 259.104 li
364.572 259.104 li
364.675 259.112 li
364.868 259.131 li
364.872 259.132 li
365.27 259.164 li
365.272 259.164 li
366.061 259.226 li
366.066 259.226 li
366.11 259.228 li
366.147 259.233 li
366.158 259.234 li
366.264 259.24 li
366.457 259.255 li
366.46 259.255 li
366.86 259.281 li
367.648 259.332 li
367.65 259.332 li
368.041 259.353 li
368.043 259.353 li
368.431 259.372 li
368.428 259.372 li
368.622 259.383 li
368.625 259.383 li
368.822 259.391 li
368.82 259.391 li
369.205 259.41 li
369.201 259.41 li
369.299 259.415 li
369.305 259.416 li
369.404 259.418 li
369.591 259.428 li
369.595 259.429 li
369.983 259.445 li
370.761 259.475 li
370.769 259.475 li
370.817 259.475 li
370.861 259.478 li
370.865 259.478 li
370.976 259.481 li
370.972 259.481 li
371.183 259.488 li
371.6 259.502 li
371.647 259.504 li
371.658 259.505 li
371.718 259.505 li
371.814 259.507 li
372.024 259.515 li
372.026 259.515 li
372.441 259.526 li
372.488 259.529 li
372.499 259.529 li
372.558 259.529 li
373.289 259.548 li
374.131 259.567 li
374.136 259.567 li
374.178 259.567 li
374.214 259.569 li
374.226 259.57 li
374.333 259.57 li
374.521 259.574 li
374.523 259.575 li
374.911 259.58 li
374.951 259.582 li
374.962 259.583 li
375.016 259.583 li
375.11 259.586 li
375.114 259.586 li
375.313 259.588 li
375.696 259.594 li
375.735 259.596 li
375.746 259.597 li
375.903 259.597 li
376.097 259.599 li
376.489 259.604 li
377.272 259.615 li
377.274 259.615 li
377.324 259.615 li
377.368 259.618 li
377.378 259.618 li
377.496 259.618 li
377.712 259.621 li
378.151 259.626 li
378.154 259.626 li
378.26 259.626 li
378.367 259.628 li
378.371 259.628 li
378.59 259.628 li
379.027 259.634 li
379.029 259.634 li
379.247 259.634 li
379.464 259.637 li
379.467 259.637 li
379.897 259.639 li
379.941 259.642 li
379.952 259.642 li
380.124 259.642 li
380.34 259.645 li
380.342 259.645 li
380.718 259.645 li
381.162 259.666 li
381.2 258.872 li
380.746 258.851 li
380.737 258.85 li
380.347 258.85 li
380.131 258.847 li
380.13 258.847 li
379.972 258.847 li
379.929 258.845 li
379.919 258.845 li
379.471 258.842 li
379.474 258.842 li
379.256 258.839 li
379.253 258.839 li
379.033 258.839 li
378.598 258.834 li
378.595 258.834 li
378.378 258.834 li
378.272 258.832 li
378.267 258.831 li
378.159 258.831 li
377.722 258.826 li
377.504 258.823 li
377.501 258.823 li
377.398 258.823 li
377.354 258.821 li
377.344 258.82 li
377.281 258.82 li
376.499 258.809 li
376.107 258.805 li
375.911 258.802 li
375.91 258.802 li
375.768 258.802 li
375.732 258.8 li
375.723 258.799 li
375.324 258.794 li
375.129 258.791 li
375.033 258.788 li
375.027 258.788 li
374.985 258.788 li
374.947 258.786 li
374.938 258.785 li
374.537 258.78 li
374.531 259.177 li
374.541 258.78 li
374.347 258.775 li
374.342 258.775 li
374.248 258.775 li
374.212 258.773 li
374.2 258.772 li
374.144 258.772 li
373.309 258.753 li
372.573 258.734 li
372.569 258.734 li
372.52 258.734 li
372.48 258.732 li
372.475 258.732 li
372.049 258.721 li
372.053 258.721 li
371.842 258.713 li
371.84 258.713 li
371.733 258.71 li
371.727 258.71 li
371.679 258.71 li
371.639 258.708 li
371.634 258.708 li
371.21 258.694 li
371.001 258.686 li
370.999 258.686 li
370.898 258.683 li
370.848 258.681 li
370.838 258.68 li
370.783 258.68 li
370.015 258.651 li
369.629 258.635 li
369.612 259.032 li
369.633 258.635 li
369.439 258.624 li
369.434 258.624 li
369.337 258.621 li
369.246 258.616 li
369.244 258.616 li
368.858 258.597 li
368.854 258.597 li
368.665 258.589 li
368.473 258.578 li
368.468 258.578 li
368.082 258.559 li
368.084 258.56 li
367.696 258.538 li
367.7 258.538 li
366.91 258.487 li
366.518 258.463 li
366.323 258.447 li
366.317 258.447 li
366.226 258.441 li
366.189 258.437 li
366.177 258.436 li
366.117 258.433 li
365.333 258.372 li
365.335 258.372 li
364.941 258.34 li
364.749 258.321 li
364.744 258.32 li
364.648 258.313 li
364.557 258.303 li
364.555 258.302 li
363.703 258.219 li
363.706 258.219 li
363.283 258.173 li
363.076 258.152 li
362.971 258.139 li
362.969 258.139 li
362.922 258.134 li
362.878 258.127 li
362.871 258.126 li
362.02 258.02 li
362.024 258.021 li
361.604 257.965 li
361.395 257.933 li
361.391 257.932 li
361.282 257.918 li
361.285 257.918 li
361.235 257.911 li
361.188 257.904 li
360.409 257.783 li
360.019 257.716 li
359.825 257.681 li
359.822 257.681 li
359.734 257.666 li
359.693 257.657 li
359.685 257.655 li
359.633 257.646 li
358.858 257.497 li
358.469 257.416 li
358.276 257.376 li
358.279 257.376 li
358.134 257.345 li
358.083 257.334 li
357.257 257.139 li
356.841 257.033 li
356.843 257.033 li
356.638 256.979 li
356.538 256.951 li
356.531 256.949 li
356.481 256.937 li
356.442 256.925 li
356.437 256.923 li
355.6 256.684 li
355.189 256.553 li
354.978 256.486 li
354.881 256.455 li
354.832 256.438 li
354.828 256.437 li
354.777 256.42 li
353.933 256.123 li
353.512 255.962 li
353.515 255.964 li
353.302 255.88 li
353.3 255.879 li
353.202 255.84 li
353.156 255.821 li
353.151 255.818 li
353.096 255.797 li
352.25 255.437 li
351.831 255.246 li
351.621 255.147 li
351.52 255.1 li
351.477 255.077 li
351.473 255.075 li
351.416 255.046 li
351.419 255.047 li
350.636 254.648 li
350.249 254.438 li
350.056 254.33 li
349.957 254.274 li
349.954 254.272 li
349.913 254.25 li
349.872 254.225 li
349.086 253.753 li
348.7 253.507 li
348.506 253.379 li
348.505 253.378 li
348.405 253.314 li
348.367 253.289 li
348.324 253.258 li
348.322 253.256 li
347.479 252.667 li
347.064 252.357 li
346.857 252.198 li
346.756 252.117 li
346.754 252.116 li
346.704 252.077 li
346.652 252.036 li
346.655 252.038 li
345.816 251.348 li
345.4 250.987 li
345.192 250.802 li
345.092 250.71 li
345.045 250.664 li
345.04 250.66 li
344.985 250.611 li
344.217 249.88 li
343.832 249.495 li
343.834 249.497 li
343.64 249.3 li
343.497 249.15 li
343.495 249.147 li
343.449 249.101 li
342.68 248.266 li
342.296 247.828 li
342.007 247.491 li
342.002 247.486 li
341.954 247.433 li
341.913 247.383 li
341.124 246.416 li
340.731 245.911 li
340.536 245.654 li
340.438 245.524 li
340.435 245.52 li
340.386 245.458 li
340.341 245.396 li
340.342 245.398 li
339.552 244.309 li
339.159 243.741 li
338.959 243.453 li
338.962 243.456 li
338.862 243.309 li
338.533 243.531 li
338.864 243.312 li
338.816 243.239 li
338.814 243.237 li
338.77 243.169 li
337.075 240.49 li
336.231 239.046 li
335.81 238.292 li
335.598 237.912 li
335.494 237.72 li
335.44 237.62 li
335.438 237.616 li
335.387 237.524 li
333.826 234.515 li
333.043 232.918 li
332.686 233.092 li
333.045 232.922 li
332.655 232.097 li
332.458 231.68 li
332.364 231.475 li
332.316 231.369 li
332.315 231.367 li
332.267 231.264 li
328.912 223.485 li
325.821 215.506 li
322.667 206.828 li
322.668 206.83 li
319.284 197.342 li
316.164 188.89 li
314.487 184.644 li
313.648 182.623 li
313.23 181.645 li
313.019 181.164 li
313.02 181.166 li
312.918 180.929 li
312.916 180.925 li
312.861 180.804 li
312.862 180.806 li
312.81 180.69 li
312.808 180.686 li
311.101 177.041 li
310.242 175.376 li
309.815 174.594 li
309.6 174.21 li
309.495 174.023 li
309.493 174.02 li
309.383 173.834 li
309.382 173.832 li
308.592 172.527 li
308.196 171.918 li
308.194 171.915 li
307.995 171.621 li
307.995 171.62 li
307.897 171.477 li
307.894 171.472 li
307.841 171.399 li
307.794 171.332 li
307.791 171.328 li
306.999 170.261 li
306.599 169.77 li
306.595 169.766 li
306.396 169.534 li
306.394 169.532 li
306.297 169.42 li
306.291 169.414 li
306.237 169.358 li
306.193 169.309 li
306.19 169.305 li
305.766 168.857 li
305.762 168.852 li
305.548 168.638 li
305.545 168.635 li
305.436 168.532 li
305.432 168.528 li
305.376 168.478 li
305.328 168.432 li
305.323 168.428 li
304.899 168.055 li
304.892 168.049 li
304.675 167.874 li
304.672 167.872 li
304.563 167.788 li
304.557 167.783 li
304.504 167.746 li
304.461 167.712 li
304.451 167.704 li
304.016 167.408 li
304.009 167.403 li
303.792 167.269 li
303.787 167.266 li
303.677 167.202 li
303.626 167.172 li
303.622 167.17 li
303.564 167.138 li
303.559 167.135 li
303.344 167.024 li
303.339 167.022 li
303.231 166.969 li
303.226 166.967 li
303.17 166.942 li
303.122 166.919 li
303.115 166.915 li
302.896 166.823 li
302.891 166.821 li
302.78 166.778 li
302.772 166.775 li
302.714 166.755 li
302.667 166.738 li
302.663 166.736 li
302.463 166.669 li
302.458 166.668 li
302.356 166.637 li
302.351 166.635 li
302.25 166.607 li
302.244 166.605 li
302.142 166.58 li
302.138 166.579 li
302.037 166.556 li
302.03 166.554 li
301.932 166.536 li
301.887 166.526 li
301.878 166.524 li
301.725 166.498 li
301.711 166.496 li
301.662 166.491 li
301.628 166.485 li
301.617 166.483 li
301.508 166.471 li
301.497 166.469 li
301.449 166.467 li
301.412 166.462 li
301.398 166.461 li
301.349 166.459 li
301.315 166.455 li
301.303 166.454 li
301.244 166.45 li
301.233 166.449 li
301.184 166.449 li
301.147 166.447 li
301.136 166.447 li
300.882 166.447 li
300.871 166.447 li
300.665 166.458 li
300.656 166.459 li
300.608 166.464 li
300.568 166.466 li
300.557 166.467 li
300.449 166.479 li
300.438 166.48 li
300.392 166.488 li
300.357 166.491 li
300.344 166.493 li
300.137 166.527 li
300.13 166.528 li
300.028 166.549 li
300.025 166.55 li
299.923 166.572 li
299.917 166.573 li
299.815 166.598 li
299.811 166.6 li
299.611 166.655 li
299.599 166.658 li
299.553 166.674 li
299.517 166.684 li
299.505 166.687 li
299.397 166.723 li
299.389 166.726 li
299.34 166.745 li
299.299 166.759 li
299.289 166.762 li
299.083 166.844 li
299.076 166.846 li
298.971 166.893 li
298.925 166.913 li
298.876 166.933 li
298.867 166.937 li
298.661 167.036 li
298.657 167.038 li
298.553 167.091 li
298.546 167.095 li
298.495 167.123 li
298.449 167.147 li
298.442 167.151 li
298.239 167.268 li
298.237 167.269 li
298.134 167.33 li
298.125 167.335 li
298.078 167.367 li
298.038 167.39 li
298.027 167.396 li
297.82 167.535 li
297.818 167.536 li
297.718 167.604 li
297.713 167.608 li
297.659 167.647 li
297.654 167.65 li
297.6 167.692 li
297.206 167.995 li
297.199 168 li
296.993 168.173 li
296.991 168.175 li
296.892 168.259 li
296.889 168.262 li
296.835 168.311 li
296.788 168.352 li
296.783 168.357 li
296.383 168.736 li
296.378 168.741 li
296.176 168.944 li
296.173 168.948 li
296.07 169.057 li
296.07 169.056 li
296.022 169.107 li
296.024 169.105 li
295.972 169.159 li
295.964 169.167 li
295.105 170.17 li
294.674 170.724 li
294.67 170.729 li
294.456 171.021 li
294.348 171.171 li
294.344 171.175 li
294.292 171.252 li
294.24 171.324 li
294.237 171.328 li
293.812 171.952 li
293.811 171.954 li
293.596 172.28 li
293.593 172.283 li
293.487 172.45 li
293.489 172.448 li
293.435 172.532 li
293.432 172.536 li
293.379 172.623 li
293.379 172.622 li
292.954 173.312 li
292.952 173.315 li
292.74 173.673 li
292.631 173.858 li
292.63 173.86 li
292.578 173.952 li
292.525 174.042 li
292.523 174.046 li
291.737 175.47 li
291.344 176.22 li
291.146 176.605 li
291.144 176.608 li
290.95 176.998 li
290.948 177.001 li
290.165 178.622 li
289.77 179.465 li
289.769 179.468 li
289.574 179.897 li
289.429 180.22 li
289.378 180.329 li
289.376 180.334 li
287.695 184.267 li
286.856 186.35 li
286.437 187.418 li
286.436 187.418 li
286.226 187.958 li
286.225 187.959 li
286.121 188.231 li
286.07 188.365 li
286.017 188.497 li
286.015 188.503 li
282.598 197.754 li
279.446 206.596 li
276.071 215.87 li
272.963 223.862 li
269.629 231.549 li
267.937 235.049 li
267.09 236.687 li
266.667 237.479 li
266.456 237.867 li
266.457 237.864 li
266.35 238.058 li
266.349 238.06 li
266.297 238.157 li
266.246 238.246 li
266.248 238.243 li
264.683 240.94 li
263.903 242.187 li
263.512 242.789 li
263.513 242.788 li
263.322 243.08 li
263.225 243.221 li
263.222 243.225 li
263.128 243.366 li
261.454 245.705 li
260.621 246.768 li
260.207 247.274 li
259.998 247.519 li
259.997 247.521 li
259.896 247.644 li
259.846 247.7 li
259.797 247.756 li
259.023 248.624 li
258.639 249.036 li
258.641 249.034 li
258.449 249.236 li
258.355 249.336 li
258.311 249.379 li
258.307 249.383 li
258.259 249.434 li
257.491 250.191 li
257.111 250.55 li
256.825 250.812 li
256.732 250.895 li
255.948 251.572 li
255.557 251.894 li
255.363 252.048 li
255.266 252.124 li
255.171 252.197 li
255.414 252.512 li
255.176 252.194 li
254.389 252.783 li
254.002 253.056 li
253.804 253.193 li
253.8 253.195 li
253.713 253.256 li
253.67 253.283 li
253.664 253.286 li
253.614 253.32 li
252.776 253.857 li
252.36 254.108 li
252.154 254.227 li
252.049 254.287 li
251.997 254.317 li
251.948 254.344 li
251.951 254.343 li
251.109 254.798 li
250.694 255.007 li
250.485 255.107 li
250.377 255.161 li
250.372 255.163 li
250.327 255.187 li
250.284 255.206 li
250.272 255.211 li
249.506 255.558 li
249.125 255.719 li
248.93 255.799 li
248.926 255.8 li
248.835 255.839 li
248.744 255.874 li
247.969 256.171 li
247.582 256.306 li
247.391 256.373 li
247.249 256.42 li
247.252 256.419 li
247.201 256.436 li
247.203 256.435 li
246.371 256.701 li
245.961 256.822 li
245.756 256.88 li
245.656 256.906 li
245.646 256.908 li
245.593 256.925 li
245.549 256.937 li
245.552 256.936 li
244.717 257.153 li
244.303 257.252 li
244.307 257.251 li
244.101 257.299 li
244.002 257.319 li
243.989 257.321 li
243.935 257.336 li
243.894 257.345 li
243.896 257.344 li
243.046 257.523 li
242.412 257.644 li
242.311 257.662 li
242.304 257.663 li
242.256 257.673 li
242.211 257.68 li
242.209 257.68 li
241.36 257.825 li
240.722 257.922 li
240.716 257.923 li
240.623 257.937 li
240.58 257.941 li
240.571 257.942 li
240.511 257.951 li
240.514 257.951 li
239.731 258.058 li
239.341 258.106 li
239.148 258.127 li
239.143 258.128 li
239.044 258.142 li
238.953 258.151 li
238.166 258.235 li
237.773 258.275 li
237.776 258.275 li
237.58 258.294 li
237.584 258.293 li
237.486 258.302 li
237.479 258.302 li
237.426 258.308 li
237.429 258.308 li
237.383 258.313 li
236.545 258.385 li
236.126 258.417 li
235.817 258.441 li
235.767 258.444 li
235.715 258.446 li
235.712 258.447 li
235.287 258.476 li
235.291 258.476 li
235.078 258.489 li
235.075 258.49 li
234.971 258.498 li
234.925 258.5 li
234.872 258.503 li
234.869 258.503 li
234.239 258.544 li
234.138 258.548 li
234.136 258.548 li
234.082 258.551 li
234.03 258.554 li
233.252 258.595 li
232.865 258.613 li
232.862 258.613 li
232.673 258.621 li
232.672 258.621 li
232.534 258.629 li
232.496 258.629 li
232.487 258.629 li
231.897 258.654 li
231.894 258.654 li
231.806 258.659 li
231.769 258.659 li
231.761 258.659 li
231.703 258.661 li
231.319 258.678 li
231.03 258.686 li
231.025 258.686 li
230.926 258.691 li
230.136 258.716 li
230.138 258.716 li
229.742 258.726 li
229.545 258.732 li
229.445 258.734 li
229.439 258.734 li
229.396 258.737 li
229.356 258.737 li
229.351 258.737 li
228.949 258.747 li
228.752 258.753 li
228.658 258.756 li
228.564 258.756 li
228.558 258.756 li
228.161 258.767 li
227.965 258.769 li
227.963 258.769 li
227.866 258.772 li
227.823 258.772 li
227.812 258.772 li
227.758 258.775 li
226.918 258.791 li
226.281 258.799 li
226.279 258.799 li
226.177 258.802 li
226.127 258.802 li
226.117 258.802 li
226.064 258.805 li
225.436 258.812 li
225.332 258.812 li
225.321 258.812 li
225.268 258.815 li
225.227 258.815 li
225.224 258.815 li
224.796 258.82 li
224.587 258.823 li
224.483 258.823 li
224.473 258.823 li
224.422 258.826 li
224.378 258.826 li
223.59 258.834 li
223.2 258.836 li
223.197 258.836 li
223.004 258.839 li
222.812 258.839 li
222.808 258.839 li
222.419 258.845 li
222.079 258.845 li
222.068 258.845 li
222.015 258.847 li
221.634 258.85 li
221.637 258.85 li
221.295 258.85 li
221.284 258.85 li
220.827 258.876 li
220.872 259.669 li
cp
.677699 .45658 .0710765 0 cmyk
f
384.157 264.365 mo
217.873 264.365 li
217.873 264.464 li
384.157 264.464 li
.749721 .679194 .670497 .901457 cmyk
f
217.972 264.464 mo
217.972 161.657 li
217.873 161.657 li
217.873 264.464 li
f
217.873 161.757 mo
384.157 161.757 li
384.157 161.657 li
217.873 161.657 li
f
384.058 161.657 mo
384.058 264.464 li
384.157 264.464 li
384.157 161.657 li
f
221.296 264.414 mo
221.296 262.452 li
221.197 262.452 li
221.197 264.414 li
f
229.274 264.414 mo
229.274 263.231 li
229.174 263.231 li
229.174 264.414 li
f
237.249 264.414 mo
237.249 263.231 li
237.15 263.231 li
237.15 264.414 li
f
245.227 264.414 mo
245.227 263.231 li
245.128 263.231 li
245.128 264.414 li
f
253.203 264.414 mo
253.203 263.231 li
253.104 263.231 li
253.104 264.414 li
f
261.181 264.414 mo
261.181 262.452 li
261.081 262.452 li
261.081 264.414 li
f
269.156 264.414 mo
269.156 263.231 li
269.057 263.231 li
269.057 264.414 li
f
277.134 264.414 mo
277.134 263.231 li
277.035 263.231 li
277.035 264.414 li
f
285.11 264.414 mo
285.11 263.231 li
285.011 263.231 li
285.011 264.414 li
f
293.088 264.414 mo
293.088 263.231 li
292.988 263.231 li
292.988 264.414 li
f
301.063 264.414 mo
301.063 262.452 li
300.964 262.452 li
300.964 264.414 li
f
309.042 264.414 mo
309.042 263.231 li
308.943 263.231 li
308.943 264.414 li
f
317.017 264.414 mo
317.017 263.231 li
316.918 263.231 li
316.918 264.414 li
f
324.995 264.414 mo
324.995 263.231 li
324.896 263.231 li
324.896 264.414 li
f
332.97 264.414 mo
332.97 263.231 li
332.871 263.231 li
332.871 264.414 li
f
340.949 264.414 mo
340.949 262.452 li
340.85 262.452 li
340.85 264.414 li
f
348.927 264.414 mo
348.927 263.231 li
348.827 263.231 li
348.827 264.414 li
f
356.902 264.414 mo
356.902 263.231 li
356.803 263.231 li
356.803 264.414 li
f
364.88 264.414 mo
364.88 263.231 li
364.781 263.231 li
364.781 264.414 li
f
372.856 264.414 mo
372.856 263.231 li
372.757 263.231 li
372.757 264.414 li
f
380.834 264.414 mo
380.834 262.452 li
380.734 262.452 li
380.734 264.414 li
f
217.923 263.952 mo
219.106 263.952 li
219.106 263.853 li
217.923 263.853 li
f
217.923 259.33 mo
219.888 259.33 li
219.888 259.23 li
217.923 259.23 li
f
gsave
205.384 256.226 mo
216.23 256.226 li
216.23 263.126 li
205.384 263.126 li
205.384 256.226 li
clp
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJG+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJG+ArialMT /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/OEXTJG+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero 207{/.notdef}rp]
OEXTJG+ArialMT nf
OEXTJG+ArialMT*1 [7.94848 0 0 -7.94848 0 0 ]msf
205.384 262.385 mo
(0.0)
[4.4209 2.20801 0 ]xsh
grestore
217.923 254.707 mo
219.106 254.707 li
219.106 254.608 li
217.923 254.608 li
f
217.923 250.087 mo
219.106 250.087 li
219.106 249.988 li
217.923 249.988 li
f
217.923 245.465 mo
219.106 245.465 li
219.106 245.365 li
217.923 245.365 li
f
217.923 240.843 mo
219.888 240.843 li
219.888 240.743 li
217.923 240.743 li
f
gsave
205.384 237.596 mo
216.23 237.596 li
216.23 244.496 li
205.384 244.496 li
205.384 237.596 li
clp
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJG+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D
0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJG+ArialMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/OEXTJG+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]
OEXTJG+ArialMT nf
OEXTJG+ArialMT*1 [7.94848 0 0 -7.94848 0 0 ]msf
205.384 243.897 mo
(0.2)
[4.4209 2.20801 0 ]xsh
grestore
217.923 236.22 mo
219.106 236.22 li
219.106 236.121 li
217.923 236.121 li
f
217.923 231.597 mo
219.106 231.597 li
219.106 231.498 li
217.923 231.498 li
f
217.923 226.978 mo
219.106 226.978 li
219.106 226.878 li
217.923 226.878 li
f
217.923 222.355 mo
219.888 222.355 li
219.888 222.256 li
217.923 222.256 li
f
gsave
205.384 219.656 mo
216.23 219.656 li
216.23 225.866 li
205.384 225.866 li
205.384 219.656 li
clp
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJG+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE
023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJG+ArialMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/OEXTJG+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 
203{/.notdef}rp]
OEXTJG+ArialMT nf
OEXTJG+ArialMT*1 [7.94848 0 0 -7.94848 0 0 ]msf
205.384 225.41 mo
(0.4)
[4.4209 2.20801 0 ]xsh
grestore
217.923 217.733 mo
219.106 217.733 li
219.106 217.634 li
217.923 217.634 li
f
217.923 213.11 mo
219.106 213.11 li
219.106 213.011 li
217.923 213.011 li
f
217.923 208.49 mo
219.106 208.49 li
219.106 208.391 li
217.923 208.391 li
f
217.923 203.868 mo
219.888 203.868 li
219.888 203.769 li
217.923 203.769 li
f
gsave
205.384 201.026 mo
216.23 201.026 li
216.23 207.236 li
205.384 207.236 li
205.384 201.026 li
clp
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJG+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F
12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA
30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF1936
28C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766F
A7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140
B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D
91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJG+ArialMT /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/OEXTJG+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 
/.notdef /six 201{/.notdef}rp]
OEXTJG+ArialMT nf
OEXTJG+ArialMT*1 [7.94848 0 0 -7.94848 0 0 ]msf
205.384 206.924 mo
(0.6)
[4.4209 2.20801 0 ]xsh
grestore
217.923 199.246 mo
219.106 199.246 li
219.106 199.147 li
217.923 199.147 li
f
217.923 194.623 mo
219.106 194.623 li
219.106 194.524 li
217.923 194.524 li
f
217.923 190.001 mo
219.106 190.001 li
219.106 189.901 li
217.923 189.901 li
f
217.923 185.381 mo
219.888 185.381 li
219.888 185.282 li
217.923 185.282 li
f
gsave
205.384 182.396 mo
216.23 182.396 li
216.23 188.606 li
205.384 188.606 li
205.384 182.396 li
clp
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJG+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C
071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D
17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63
B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F6
03BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A
7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219
571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A
1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A
55977C35> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJG+ArialMT /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/OEXTJG+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 
/.notdef /six /.notdef /eight 199{/.notdef}rp]
OEXTJG+ArialMT nf
OEXTJG+ArialMT*1 [7.94848 0 0 -7.94848 0 0 ]msf
205.384 188.436 mo
(0.8)
[4.4209 2.20801 0 ]xsh
grestore
217.923 180.759 mo
219.106 180.759 li
219.106 180.659 li
217.923 180.659 li
f
217.923 176.136 mo
219.106 176.136 li
219.106 176.036 li
217.923 176.036 li
f
217.923 171.513 mo
219.106 171.513 li
219.106 171.414 li
217.923 171.414 li
f
217.923 166.894 mo
219.888 166.894 li
219.888 166.794 li
217.923 166.794 li
f
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJG+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92F
E1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJG+ArialMT /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/OEXTJG+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight 199{/.notdef}rp]
OEXTJG+ArialMT nf
OEXTJG+ArialMT*1 [7.94848 0 0 -7.94848 0 0 ]msf
205.384 169.948 mo
(1.0)
[4.4209 2.20801 0 ]xsh
217.923 162.272 mo
219.106 162.272 li
219.106 162.172 li
217.923 162.172 li
f
221.197 161.707 mo
221.197 163.672 li
221.296 163.672 li
221.296 161.707 li
f
229.174 161.707 mo
229.174 162.89 li
229.274 162.89 li
229.274 161.707 li
f
237.15 161.707 mo
237.15 162.89 li
237.249 162.89 li
237.249 161.707 li
f
245.128 161.707 mo
245.128 162.89 li
245.227 162.89 li
245.227 161.707 li
f
253.104 161.707 mo
253.104 162.89 li
253.203 162.89 li
253.203 161.707 li
f
261.081 161.707 mo
261.081 163.672 li
261.181 163.672 li
261.181 161.707 li
f
269.057 161.707 mo
269.057 162.89 li
269.156 162.89 li
269.156 161.707 li
f
277.035 161.707 mo
277.035 162.89 li
277.134 162.89 li
277.134 161.707 li
f
285.011 161.707 mo
285.011 162.89 li
285.11 162.89 li
285.11 161.707 li
f
292.988 161.707 mo
292.988 162.89 li
293.088 162.89 li
293.088 161.707 li
f
300.964 161.707 mo
300.964 163.672 li
301.063 163.672 li
301.063 161.707 li
f
308.943 161.707 mo
308.943 162.89 li
309.042 162.89 li
309.042 161.707 li
f
316.918 161.707 mo
316.918 162.89 li
317.017 162.89 li
317.017 161.707 li
f
324.896 161.707 mo
324.896 162.89 li
324.995 162.89 li
324.995 161.707 li
f
332.871 161.707 mo
332.871 162.89 li
332.97 162.89 li
332.97 161.707 li
f
340.85 161.707 mo
340.85 163.672 li
340.949 163.672 li
340.949 161.707 li
f
348.827 161.707 mo
348.827 162.89 li
348.927 162.89 li
348.927 161.707 li
f
356.803 161.707 mo
356.803 162.89 li
356.902 162.89 li
356.902 161.707 li
f
364.781 161.707 mo
364.781 162.89 li
364.88 162.89 li
364.88 161.707 li
f
372.757 161.707 mo
372.757 162.89 li
372.856 162.89 li
372.856 161.707 li
f
380.734 161.707 mo
380.734 163.672 li
380.834 163.672 li
380.834 161.707 li
f
384.108 263.853 mo
382.924 263.853 li
382.924 263.952 li
384.108 263.952 li
f
384.108 259.23 mo
382.143 259.23 li
382.143 259.33 li
384.108 259.33 li
f
384.108 254.608 mo
382.924 254.608 li
382.924 254.707 li
384.108 254.707 li
f
384.108 249.988 mo
382.924 249.988 li
382.924 250.087 li
384.108 250.087 li
f
384.108 245.365 mo
382.924 245.365 li
382.924 245.465 li
384.108 245.465 li
f
384.108 240.743 mo
382.143 240.743 li
382.143 240.843 li
384.108 240.843 li
f
384.108 236.121 mo
382.924 236.121 li
382.924 236.22 li
384.108 236.22 li
f
384.108 231.498 mo
382.924 231.498 li
382.924 231.597 li
384.108 231.597 li
f
384.108 226.878 mo
382.924 226.878 li
382.924 226.978 li
384.108 226.978 li
f
384.108 222.256 mo
382.143 222.256 li
382.143 222.355 li
384.108 222.355 li
f
384.108 217.634 mo
382.924 217.634 li
382.924 217.733 li
384.108 217.733 li
f
384.108 213.011 mo
382.924 213.011 li
382.924 213.11 li
384.108 213.11 li
f
384.108 208.391 mo
382.924 208.391 li
382.924 208.49 li
384.108 208.49 li
f
384.108 203.769 mo
382.143 203.769 li
382.143 203.868 li
384.108 203.868 li
f
384.108 199.147 mo
382.924 199.147 li
382.924 199.246 li
384.108 199.246 li
f
384.108 194.524 mo
382.924 194.524 li
382.924 194.623 li
384.108 194.623 li
f
384.108 189.901 mo
382.924 189.901 li
382.924 190.001 li
384.108 190.001 li
f
384.108 185.282 mo
382.143 185.282 li
382.143 185.381 li
384.108 185.381 li
f
384.108 180.659 mo
382.924 180.659 li
382.924 180.759 li
384.108 180.759 li
f
384.108 176.036 mo
382.924 176.036 li
382.924 176.136 li
384.108 176.136 li
f
384.108 171.414 mo
382.924 171.414 li
382.924 171.513 li
384.108 171.513 li
f
384.108 166.794 mo
382.143 166.794 li
382.143 166.894 li
384.108 166.894 li
f
384.108 162.172 mo
382.924 162.172 li
382.924 162.272 li
384.108 162.272 li
f
.698207 .674464 .638605 .739437 cmyk
OEXTJD+SymbolMT*1 [12.42 0 0 -12.42 0 0 ]msf
246.774 188.824 mo
(D)sh
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
OEXTJE+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B8151C27255B0A14B5DCC66AB31F880F28F8D22F162C1E
FF0B04E3D7> |-
/a <1C60D8A8C9B75946235635433B29C4699E5BB968A8BA3D0F55A80D871529
080759C0CDF379D5184F9A3784D6112A1855FA838838A79A40DD8E07761F331C
19B53C7606AF4EA6D9A7EAC88C9EB5B9FA25429E627C2F8212354B31EFF63646
51E800F137946FD4AD5A8AE5B9B862128451BA473B4ED4014A7282C197B458EF
6D0953A59D2ACEC98F551B66786C4D40133930952374B3C1A5A8C8798787EF52
02E8F3ADE313D6302E5C519AA42A989B817E6D8192CF5EF2CD6CD4984E7982> |-
/m <1C60D8A8C9B6B770778B71072D7C1E07589A410E5C64818087655066490C
3ED2B909917C7BC0728B14D2333B4F2D4E6CDB7289552EC38E07C385447196A6
FC80676BB9787067F8DE500C6FC7D1A575A85B3402140944D912F286F0EE619E
6F139DB3EF4C05E3E0A0041D31E971FFC094FB694326327D937DFA882F7A9EEB
B38D578A289643EC8BA4470A41469EE238EB0C3D041FDB99E682E3290582B0A8
09> |-
/x <1C60D8A8C9B74CDDCE74E258E27BD7DEC2AC84271E6C98FD20D770EC885A
525E4B13092058B38B9B747AE3A87B933BF37DF3F8E7EFA8C4210149FC385EC7
0F16C2002D34A7ABEA15A278EE67C471DDDC14F1EC07F268C4F538F0F4A7CE56
5CD5EA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJE+MyriadPro-Regular /Encoding get
dup 47 /slash put
dup 97 /a put
dup 109 /m put
dup 120 /x put
pop
%ADOEndSubsetFont
/OEXTJE+MyriadPro-Regular*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero 
/one 12{/.notdef}rp /greater 3{/.notdef}rp /B 30{/.notdef}rp /a /.notdef 
/c /d 8{/.notdef}rp /m 3{/.notdef}rp /q /r /.notdef 
/t 3{/.notdef}rp /x 3{/.notdef}rp /bar 131{/.notdef}rp]
OEXTJE+MyriadPro-Regular nf
OEXTJE+MyriadPro-Regular*1 [12.42 0 0 -12.42 0 0 ]msf
254.373 188.824 mo
(\(t\))
[3.52734 4.11133 0 ]xsh
OEXTJD+SymbolMT*1 [0 -12.42 -12.42 0 0 0 ]msf
200.131 240.332 mo
(W)sh
OEXTJE+MyriadPro-Regular*1 [0 -12.42 -12.42 0 0 0 ]msf
200.131 230.793 mo
(\(t\)/)
[-3.52734 -4.11133 -3.52734 0 ]ysh
OEXTJD+SymbolMT*1 [0 -12.42 -12.42 0 0 0 ]msf
200.131 215.367 mo
(W)sh
OEXTJE+MyriadPro-Regular*1 [0 -11.04 -11.04 0 0 0 ]msf
201.511 205.828 mo
(max)
[-9.20703 -5.32129 0 ]ysh
217.752 192.825 mo
383.476 192.825 li
383.476 192.135 li
217.752 192.135 li
f
.698207 .674464 .638605 .739437 cmyk
%ADOBeginSubsetFont: SymbolMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
OEXTJD+SymbolMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g21 <1C60D8A8C9B7A73DB6F680023A3F8436EEF5620F750308DE1F37A7AC62
61B2AD224C23A5D479BBCA628D29391BDD7EB61640397C0BEE9A53230A0996DD
5EFD568725FB41905428A3181E66EA593E71E2B3F382070F0DF99B017EF0C263
F8A793D83409B9AB4293671896AC41DA0471B92046F8E7E3D66A6B43C161C86B
3F01BDE3B6C2CB7AC39DBC> |-
/g83 <1C60D8A8C9B79676F42F820A3F8801223C323147FDF00642AC0811E8CC
2333B60A7AD290761572EF97F88A56267CE624582C15300E18A410F61C740FAF
C15D82C9CB97A7C55F988C59B664C97CE2E9DC4D1A7D65A4F19CBD6E24F368CE
66FD639F3F9EFE86850544DED9B16A5CB21982A87577C2EDE11C73371D704BEC
683E2C4BE9EAA0DB9B078F541CB54AD043FCB3E8A9AE562ABDE0C2E05111A9AA
0CA240EC721EA711C1B7CC0AAD717706A41508871630FC150218108567> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJD+SymbolMT /Encoding get
dup 50 /g21 put
dup 112 /g83 put
pop
%ADOEndSubsetFont
/OEXTJD+SymbolMT*1 
[32{/.notdef}rp /g3 7{/.notdef}rp /g11 /g12 2{/.notdef}rp /g15 5{/.notdef}rp 
/g21 17{/.notdef}rp /g39 18{/.notdef}rp /g58 15{/.notdef}rp /g74 8{/.notdef}rp 
/g83 6{/.notdef}rp /g90 136{/.notdef}rp]
OEXTJD+SymbolMT nf
OEXTJD+SymbolMT*1 [10.35 0 0 -10.35 0 0 ]msf
295.673 178.867 mo
(2p)
[5.1748 0 ]xsh
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
OEXTJE+MyriadPro-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7E2CE70CA6E765DDA192DA64FC714614EAF23EFFC73F2CF8F
D4BBDD6A61C7FE92AF61D1BFC11D63548D1609F9F85A0D680385CBE8C84A668B
FA6146323D9D2541EC558B240DCF187D91C1135ACA399AB1FAE34E71AB6B7E41
1A298572092FCAA6A83A1E8FFCA5A4BF27E564A90D232452C7B04D4AB6E60AB1
2852CDB4D1F8562087142C004A8A50BD905407E2D3718EDD0BE48734D3D4332C
529D958B185D3DD09AF29F738FA257B40FB967F3AA407DC947E49A2DCEA8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OEXTJE+MyriadPro-Regular /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/OEXTJE+MyriadPro-Regular*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero 
/one 12{/.notdef}rp /greater 3{/.notdef}rp /B 30{/.notdef}rp /a /b 
/c /d 8{/.notdef}rp /m 3{/.notdef}rp /q /r /.notdef 
/t 3{/.notdef}rp /x 3{/.notdef}rp /bar 131{/.notdef}rp]
OEXTJE+MyriadPro-Regular nf
OEXTJE+MyriadPro-Regular*1 [12.42 0 0 -12.42 0 0 ]msf
26.2866 177.173 mo
(b\) )
[7.0293 3.52734 0 ]xsh
.749721 .679194 .670497 .901457 cmyk
OEXTJE+MyriadPro-Regular*1 [15.7086 0 0 -15 0 0 ]msf
294.913 276.116 mo
(t)sh
.698207 .674464 .638605 .739437 cmyk
OEXTJE+MyriadPro-Regular*1 [12.42 0 0 -12.42 0 0 ]msf
66.8706 16.5801 mo
(a\) )sh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/OEXTJE+MyriadPro-Regular*1 uf
/OEXTJE+MyriadPro-Regular uf
/MyriadPro-Regular uf
/OEXTJD+SymbolMT*1 uf
/OEXTJD+SymbolMT uf
/SymbolMT uf
/OEXTJF+TimesNewRomanPSMT*1 uf
/OEXTJF+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
/OEXTJG+ArialMT*1 uf
/OEXTJG+ArialMT uf
/ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 24.0
%%AI8_CreatorVersion: 26.2.1
%%For: (Mark Saffman) ()
%%Title: (fig1_arp.eps)
%%CreationDate: 4/26/2022 11:49 PM
%%Canvassize: 16383
%AI5_FileFormat 14.0
%AI24_DataStream
%.((`,!*Gc:")al%i!q/s6q!IS!+=$gX,`WO*s7C(lPK[,h9s1N24I3l%.VPt6iaG^+oi`C%PA8#&">eq=dl,\H8XM@c*91)EVu^4
%%`NFI]mQ7Jpt*3rKk#=ZDqTPUAAA%=*5?3$Ollaa4^7i"^L!J>Hd]B.\l+]f&)TI!23-S$m%LtDr\Vs)O(V&1T'_6B243`FgcL$f
%[(QM*^3*O!`@P*_c<O-2[UtN$?L%9N0<JBj>tb*M'H703hmL4)rWgoTdcJnfBY1T3Sm12JgMlNM\2K!,XaXuNhG2^Hf4J0$Q=]dP
%Jnp`HgTk&@gNiTLqq[50NEP"_]CB^TgXZVFom>FGBY/'P?0c=ijX[d$[<^5ZIXGp5^%JM!j148hB/kq4*J;0NQjh#O=E[:/4NHe-
%!5@:a"nC!Fn_:`E!cBuPn(4U;\_t'Tmalo'cW7g8[e5+FW,5Rf?13N`IHs\TFo&]3(+bN^D:(;hpN1nN)^it;gdomFA[T,^i5W,5
%X7+kjj#?&\)89O+p*_h!2^!W_;>c#`)4j!=o:8i6UX:O)hQl5mak+p/(X(33QfoR6Ol[-W?@5m#=)_EP41"AOgQqq[BSL%&^rsH%
%0_gWu?T5Xu!<E<7]3R)j@eU%WgDGZU.%Xj-p.mM4J%o=7CqfA+jkj*ERmV*%Nr.R_@fX1.mWrHH3L4<GF2+F&%FANaJ;7FB!PBDu
%!eAMWgTIq`[Z"%-pNG(GVJ!(1#ga`=N<Rr.mE0A7MW%YF@c)+fNEIl=])g^AFh.6.lY^!XE9>:NQU+K,h#K,HY3uq3h61U[*Ns7E
%j&lA[WcQE)c)(WD:6k&AD8Vg"B0^-U#)!"c5`+TJn,&)MO%We@lAfZJlW"6Z[do#&0M.;m5)KZfR*&PY\Z_.I@TWgNbc^]IeT8AN
%F6P:nhuOt$!+7UO,1u#_:sk@^XUM<Q%tKUo"fOT=5>I*1./'qD39eVjLS@plng&K0OsU-Q)3-(YSnCXkcnrq,Dl"8pIWG!A9<g=u
%0bhZ)7Bo.e]DgRYfNp50JCSAMY^_$6ao:hTls2aP(jaXNH"h_T)pe$?U$5#;/4[uM^@fbJO>P5R,l?h#neBEVM^8$?02Ic*ZZG#M
%"'EA?_<'t'Dh.Mg7pJ;!_^lYF0RL\pQTV0im<SoJRC`X'p<9XENuchYn6L+mb2pe\)^Kt"LFU!QojbG2L+6K6%1!p12Xt\rfB]I"
%edK'%%_.&l6DNterftb$*GWF!>EQ>K3u##/)^^,?*tT>0\Cb?ENMZ;pa"Ro#Zh"[[?EX]R!s/TF&6u'6Dk)$\[(S1WK1"RId+I3C
%b5o)+j9#CK-%PN]"X^b$ZhtO?_IJc10Zt>Q5d9-J^`C#PJ+C<nmebQM"2[AZ+LpK4AU`A8N4!E,BEP_4rOV:><kg=iFuPoTP#m4_
%[SUf'J=u03"N^Ad!^q5qdfJ7p"l-bj)\<qB_L>d0XaO]F/$EBrI)QlIEs:@/WZ)KjRt04XBD?A\l<Sm9eI;eZ!T>mY['m42,QG>b
%4%DK'T6C\LnRe6L=FQuS/C!UtE^4;TUcFIs-Z7pWT&M\HjOcuoo:%,@8UfdPbAcNLh`AmXfD@Rcr"JsX!8I:!cj>OTn,+sHKQuN]
%=Iu>`Plnm>j."[A"%'Wi!<ElE#dS%m*?)tK0\a`eliR<fZuL\5j!]LrZ\]V$[_<JmI)BcJ5S-cGpjccP9cO^Z"2apo4s0iu[.+1U
%Dk+&q)Z]$3re^_Bljh&qHZ*+Rk`&g9?+Z\r%DMpONU;nd\.uU@J(Ho.],nKrg(l@/`^6.fY0HTTIW)_3g?R99_lq_[HK'2c`UbY7
%@WnlVCb7V9]/:"W@lH!qYO'9#>D?EXmE0<_ZX?M/Fh7VZeaj6^ekN=)qf]FKnD/D)]7)p8*5;O8F]Qhl=&j'pmB,33?-ohQ.CKCR
%L0JOIg0U..]-t,,h0KH2S^$g;JF!#K]qe@W+NuM76J(A2Q!mcHp8CZRF3AOiO_9[]gcuTF0Hb25g%@G*!XW1:JEX,cU<P!fKE2Yj
%&u`5D9SQho94#M;SiPQcS^hP=$8[\Yd=<@t(/P)<KGmqpCGYashuKusT"tG9Sn0U!^G#qG0`6M)_@+(r$[c73F^5f*5s&\hA9V(h
%0Mnq8Qj>O.7\^P4Zea:%J-'0u^>mqK"*Q_r%QGSM^t?>,0&YisY2Fi7Jh*4?lN^iR>lXj(#7#nmqQk,6.s>F+4G3<Rf5?TAatm_"
%ENNfa1KQ`_1H6MeE=BJ9QMe0r?tf892?VjKeoKZWNnn)+_t?[Slkod^B\-d>B%LK1*"ZL5>_DTP\(hkbHL&$EjYoX:Lk5:Oa)29>
%bq\G*^:c9Q_mB+!WWgaj$Ns20%g]SdP$cmIZTs]?Rt-h&eoe(uMIbW$Q:oujB#F=H^TblaSn$YcgOA10G(K*uK*-_,G%\#%X`*]O
%`UH$;_3jW$j;5Jd33KOS(_!PPK_tG^UY*&`"5^4?No:lbPipb;Kg;!kg9iqaf.RR;nA_Y7X]<7j0P7l\(C"qdi.,4Q2@[^sbAt^D
%4i]5F[9XOYq_m'6'f:?rh>hF&"3GV2A!d\Zmlf99i#*"1"9S^2]AF09Np#,+hsrjuc)H'%W_6[1b,M]/BA#.AeW:6j:hA04<7t2L
%=nA+/bKkZeE]h*NR\j6P"p?[AVse83RVV.TZ?Q>\!T>=$2nqq)Q5*->6dD9N<D2qEI5Sb]9iG%forGb*Dlsg2m!\ipmpTt"C$A,g
%9Y^%.ag+,o:UWCcfdieAMPeK_Oc/2oa0)]ufi<3+dkG@Db-L,Crr+E4A_Bs<\]ULYl$liZ"%$-Nc$u=W/_RETcS(aCJ8gfZA]M4N
%UWNMCo],as\<^F&E0V-TY-MWl<VH@)O'H7GfF8*940G>mIe0b>0@s)Y=k<LU**&='//sW,r$hNp;D$(qQKMUTp&&U)QE+*5cW/P,
%fsNrW+&-c-cQ@J`r9*P8>-9/UY2riU]SA%Ro!M^qPHSOV+L&Rj99qFu&'o,Yi2ITC08?B.Sn_F);%1&;_=s,bA*I.)1g/3O]uleF
%adR&1g!Zq&+&00_&H#XVQ=\atS#d]7Q6a)bSuFY/B?r8B=cjFnOlYi\e[0h0qJZA_s%;QH[I!#l\]T*!Z>/&WftSu)rU]TPjnE(m
%s!aE!BTaYpajU*%WV5iYca#bEdud>;s8Pd;J$LV<H$H2us6OCu:K'&3`A'KmP@`EsIeL*!aji(=_c':?b5V#1,!RTC0P.is_>L(M
%ZMtUhs("\cVNl$a8BmceC?b]\a7+jsfKWO<1bH<?iNK(]qU,58q88HkZ[_[uoD?prju:?MV`uK<b-J,KQ1Usu=4o;+C%tJi9gb1/
%])glg@J\IPrU9cak5X[A=n\cV5<m=l;Qp(>*(Q;pe^BNFn)7r/o9[1@Q;tnd/Ql-A.dKU4<(jC"@oq@T=8_ksp8b%cI5`:ID#)D[
%Z>/XEd[Qk?7BWq2ag1%fs7soXI[9p]b>u8:nuf:SJ5CPVW[5iS>\21;]4ue\Xc+`FIQt,S.B;__VP50E!J,=;3F>jjWni3@.i&&u
%BppA%90SBlJA=U9Hf$p.FoqfhZ7L?oC!*aEag,W,SnXXjC!*aEH(J`mZKIXQh10I9/Bb=MbH`ZlOsEV^,Y=.M99LQgVBe`rk=Li,
%ZRj:SiH__F(m6/fL*=a;Bc*^]RYG7>L*9-c.Ee;q(oHPCL1*W9k=LhFR&2,HL?D-k@7ZP,ag,=lL1qQ\@<eAP(ks:RL1/^D#[nR)
%/Bb>hT-qgF,g13LL+LM.bGH`OBptohT4aU5:6K>6Go3D-k:CtOS>YUsT'(B>:6Oe^Go3,#bE=.6BhFPYT-m3N:6HmEGo2\ibD%2'
%k8B#EP@PMN*en*jVOV^VSg<KhLY[Jg^UJa9(;O_=\iK>q4l"dl]5Bkf2tG`thmZ)a]/"/&MhtDEB_-5X8QB)Gn(Wh)e`k%jNh%`I
%e">Ef]lWd$2da/S\lG#^cQ=nNKBpejF$3e8J/9PlY*Yr)aX[A:pNGZp^#Q:G4"pJ3RXOLqn!b-,hotX1a3i[9;<7[,]1DYa%)'4A
%N?!4gIf(J/9f.8HL-7**d=7kR*S]V.8[Cs:l&LXFE>/<2L8j5O[d,l&l345+q7YlM<QQr]Xf0B[f<50U1TPN>m30gF?&N@m"l1i5
%G"&F9].k8>Y'G*^mIA26.qH6mA2epF[B!/]IXB^+/<B'TY(9OskG$V<a#a82h=Xj/YKM>GgB.F/*8mq^@Q-["3ToH>RcS.9k@flc
%H(O3oKq-pf:NE^uU?A&)T=L5YLSNPEo/t>Tr6-!!5Oo5lnJccKhJQ$5?BIIqc$+3g)rD^FXEJ7K>VAqE%,YrNgG%st&Lb*Eafpj(
%m,]X=IXZZ+amh2X09YBFEmYRiEpTV=c[M2@a1%0n`D\<ZZ2=)+bE$S&N+nK!h13;MLCKI+qgLmcbai$=jn<q-Y!#[:Qer5Xjk7+5
%rN^#mN[oj"'p\6Sms<r[VJDle7s8N$#QQNuIV5luB$CI3C,`<3?BA["4Y@PR"`-*#lNRL>-?eAED\)`2B3*T(j2qRV3K@Iqk2,Y:
%F#TTT$:qX]?-i&2g@j9iCX4TIZW_-F]5BkN4ipLKpQC#<(iI#,:X@4g%)9"\\'^Bal$YScNuYX6%+!>^+kcg,^ED1WFT]JuL7;;&
%)`_f6\NL"].khiaagJ\-FTIKZ%1'$:;V]DI>1`#>Z>ap9R><UGFR^OCLae@)#5ri04hU_m)5XM#%<sQkRr=tM1e!V.,A"-b;;N)?
%#WiZq3hJLAYI$4XcHX8DG8;VdW[<CWcS-U/I7IsnJjSgSar4T=ROU2t&.k`lTL_+&L3Kc_r0lOT!_;C(Uju4&o/$@j;7Ze%[W$Lt
%@puH&2F6Hq1V2nS#Z`gsT[FB\[]"RcT0Qj!F[/)K*n6r(&0`eIUk%<Z^aa%eX&HA4Bms?6]XZo$pO;<[#jbXp,79+^n_u;q1f>Z:
%b3IddoD';9R_&UZ&DH,VO`KL[pl(fm^b3M""dT)5AlW9dXE_+22YbDD&bRK<Q%^%.'&+(4lp5&OQg-dj)$4$#^^o$s8^k9P!Rp7'
%'Xhe6PXMGg;;0E=4%NSl3GRP,eWkXn(0Q!ueB0A3KTK")pd@NbnN\/PZ&&^'4HP1Hd_mY;,O4rNq;?dB#OmUs^O-;TKrDQ`!=cj?
%l5"PI1/p+;ohk#K$b<k,?3Fpd\h\!UJ:QUkR9ljZ*no!"SrTJFfIRS;0_>7.NEO-7Q@.tS<DK'AKT'>fC,QGg-o5sG.a6aU1WAKh
%NPmGT@*?]rP%:^4EQTOC(gSie:8*84b<m%e"%#>lO^Wj^kQ=0f-P<Ls=WA[25Yhe4J&3$]gG5-'&aI.aTatQTjX#9(8ckPbMe39&
%+@mEcPlZa)*B?T:(BgP%X6-OFWrU]n?1'!p[g9PcC39U[l/n?b&;sDl4<t`"jmdjDXH2OBF$h"kJ1EmZ9\^<IEc>5A6#%_3Ek88V
%`5TlWQ!12n.k[iE2#:/r7L>u!"'d3b+C-^%`hF?I$%58keq4&jFTV^)6ZFN=At;[!E0m0+Q=Ou%=Xb.Q$5R4Z)"t!DBGToM@"'q#
%!u"Dq1%9d#DSYlI-kgBL;GH7]jdB9k)6<s<Gb%_5b!MCpoMl853cdPooR_LBDEnb#Q%_K>MKk7ABP^'$P13$c5t(D06O=3\*Z9RP
%a?XJp7]b2N'6P!"O!laqR3M*!i'd43P7"Q[?lL"-?8.$MEFtjMBTbVl5r\mb&#]I[8FQ69#)#`kG!:VJ2*\JbMYl2.>NMiT-5V`Z
%NHn;d[aI3r>(N@,GtRHhfZi#F:QZNM@i,A/"=s:.0j*[[3(TlRj5H,6P?)(56fRrO;a<U*Bc'&HdW>RX`N(7&;f+!@2ggEm:A4p'
%8>uV]`[9mt1?_Ag@8J[U#ice/'Z9IK"f?1`JkOfA(gRIaMgn#KU;d?P1M.DENKl'#g7qj"bfMI0_P=N.<ekG%!Q!eI/oAaQN3-X\
%i*-$GYh5*)jfiA+KWoWN5_:l<)"@C4dqE#@bfU9f#]L5i<j_^5!\!a=3Z-E0F@t(`.ihSebBg"Pq[TI$`r@l+E5&[u&A2%<<t&pl
%<N/!LWQ]+LZVhp(,UtN-;=Ioo0S'`j\^h9)\D`dJ;V\0]1Dbc2'Hp'm/3a;S4!<X,l$B'^=EicPd%(KCk+EAjl>TE.1ea\#J5C+f
%<9T$uiLhTb.REAogH`Xg6VB0>P"O/[\K&`.`BY`KC#Y5U#%"[XiafW_9.T.]^]c/51)^ih,/E"RP/%@5+<$IoK%LB0Ks5DD6KU7K
%J91mF.M9K-3qf!`mA,8XE!>t*pm>I/UCf6F'6SP$B-ap7:7?j7S=[sj:J^3lc2pTB2E;=j^_A;5`hY2PLag^(36]]hfd1.2?)>c?
%Up?4V[:M9>YcbrJP2_<q,"sADN"n(*</!R]1'CW[d^&-b3N4\LABAN37LjLH`^L+PNEr!]A"aSra."7D7f*bNU4"`/idG4!`.DX=
%Lkmf1&\[f@`GRs!*J&fU_DDE>j`$q\9VqB7UXb`dX+a*!E_'Jh$%mupbL#SGmDgW#;_$&eGb%_#,p_>sR+?PGa!17<mB#a!H.4e.
%^%Br$,jF6=dsF"rBG?f9b8_IhO5Yl5"]Q=q)a$'6ZgKg31;bO$OfqT#<m!c3a2Hp?VD+bG0YAJJ0P.5[i+R(t+:A<mJ<:CA!+Ql[
%J!NsOr=0DKkn?mT11)s_P]VlT`@M/fD$VWJ`s6!07h#%3*#jIXaq:47P%/s[)2A3Oo,Z`Y-ljA_3?0f:>]9ti=L6!cY$-h3K/,:m
%G,s)B=aOusb`55HF('Kl@SeKlh1/=R$FfbtRf]e"$a*Qt2?I3d2E9QOY>gQ_YWt>$CjHTq>:_l<eU0.Y:p>muEaok0p!+n=4!QqJ
%pCLLF1=7jccr:_$0G#?jL.>0(`b<B!75l>_6n#^hE:[ffOCCfiQgF;pCmER(5!(W)TGgP8n9?ClBYB\LU6)A0$BeJ"KndUW'J9'$
%;BS<38:det7T"cAX5Z#F,`2hPP)@]`q@oG&9dmRR@7$+4$.VI#96_fSQ.X#iW<B>R"VML@j@QjJSP);>1R5lbnpr&M'M1u_^t4]f
%#hXrd^qrr9Hig=,+;eH&6A2n-@'uU-KVX/1+_4_iK?0.q(=<QsM@WVs"PrZ75RO?DTP'&knSuY`#gmd7Lfs%4GFk)"THiCs=%AIn
%WNL=Z9HE4F6et(lflXJpXR/>-?Kk8h-dm;?-9KoBo^7sBH(B[g6?M%6+K7Z:mV?b;:pX6/6S,Qh*=*&apY[3GVaL@V":c'V!BQ/@
%hWEbkU#hC"C3nh%%!nSG:?Q%Dil4>O#/UnU2WYreBd7VB9fdt1lm$=6/-X.MDEoVkp]A>a"FCTclZ!@;qEu26$\QRZO;*KZiofAW
%87Vc?"3X%I6O1M+%0HbVMW"_A71?Ud1C[ZH(_*>klimh8EYnp]nA5a+L^:nl%M]E5-ug'7!T@L6kQ6W"bR-2U#VPl[jAiGZ)69Fi
%6E3?qrhfh9jedWcFH6e"-O(=(NN6"A=AG;OHpM$F@OB&06D.FaTUBOe+lXiq_F]2A$Anu,/79M&A"ahQAt'hW+RXt#<h8V+n4Dm[
%7\uKHJ1sq6Kh[7Z'Pd&i.p.2Zk%FfJ)V9G/RA6/k1X<iL1@B>K(oKZ*0CD)l>[.P&@W@B)[,OjN-cM@GdY[8oKU>.b^o`U,`"`Vo
%,]6T@,>R$!66,o++7;H>4P[fCE&^k\C:IVlA2j\I\Srq-ZZ$VILZK"'@c^PnJs91ONsb&mRDQccU^>YhTI<kK+=(2N+Pa(7KM-<[
%#A4Y%P7';`PH.]sjAL^:a^HBLOX!B(O?;6POF'X4F!&_eEtT;oEXN-<isOA$K-R3`%B`V(Gh`PG0Xs-M/i\H-U>T5S89!C80Qn]I
%Nf0/Ca7B.Zj/<ChpHTl/*.m31Y&eP%2o((uCl0#j"NUW!S/&,Vj#@OFi!'lTNc@6"*3I.^E!6qc;;aEo].jtZ9C%l'6iiS5$7r=]
%2f!sKcI!F4DSQ6oZ`0n^ami7:T>UT.6qZthFoUjPY8&_1eO"c:1dW;U.<+'m!N8rZoh2@biQDGKP1>P3-&a9mV&KsY(Y;)%pmdA%
%=$RGtQbep^[0C9G*K,>sCdst'<f5`a"3Ls1%n_P(%BS[0Ianrlc,soh\6UdJPpq^>Iph?C^/9s7?tA2G!Nk'!,WVr<oubj=7d6Ad
%l9-[23$ksf,h]`4&[hn5B:gM<\@M^71LS"K$>cG6)QnjsZ6E)0Q;O(_X$h]B?A\sa']"9n@";njf*Z!H!e&FGWRCL$Esg/`kYior
%QNY@.3ZQ1+*X,ZcEEjuWi4'\Hi4&gDJ=uHmNp@Af*#I1]!?'oT>&`8I!<WN7kQV/#S]/C%K3S;)aWVj:0SUi%omoR@(]`is'n6c7
%<5/_mWfM.Sn'RR>OU>kA[Bh,b.`(/\>#C1&KAmc6Q0iCVk^+:W-"K\+iV.,&KIq-TCQ6a&!'*;rHDTtE,XmsfXB@8b),H:Q>QkRB
%Xc=!qIT(FW%Z]Rc#O#+,)ALkD\oJe2E>fh;KcF7IJdNL<d0u&q)ZNI;h1-W2/3&Z:'mRqE.<$8.:iICELEH,s*j#GTV)*[i@0M7n
%ZrUrd_/\7^L*BJaNoRVdU4"JUegtb[pZXYtMd`RTM`?aWl3#(HrUQp:T&VeJ5\JW+AiChH0FEgj,T%N!Xqi!9@))bGdj!FHc."HQ
%S2MpGhNZ<<!j[UfNXO>Va+8m^_r_]68F"K3+fD.=WZd7g3)p.B3GU.cELgl_^$99;/nsO%gLI;"?Mf0$Y:"c$J3D\+Sk\PpC]V<k
%P=)V0V,]2e%PVf^!8LcFn)b);L>5hnNT$6)mE2+to"W#Mr3sl,85X#KaVWNeJ].*6H=8F"G3b2H(X0'g^B*3fA'G0>Nnl>"0oLct
%p;`U0GjN<@/Ap4#bM*=q2]@_*:oCUMQbW?Fq=4p*gq)>@[e8K==jqIee+FX[Y165HCNI0Er-D@3*OfL^HB,\DgBFrng4d62B?REC
%rOM2/X(Hjjr1ZD:J22lJcW.FWh"E+b_.m&+=eAF_f8e_gDd:%02eIOt/^&%VeY;5f%cDKSZZ"Fc!Ofthdh)j7:7LR_h)X:nYJBjc
%^6.EgAb_b&l;gQ\h=B@tCmUa<XWDsMbuo)g*4J*mJ<(25^MuBFB)6T!XmooG"YnUFh_qOs`iQA(>;?Vq?e<>e$f'DEZYYsc(W=%V
%VX*uB?au[l=7&Yer+J$lhZ392WbHb`^fT!,CSpDWIU2Qh7FPUkgFpdA_-]nIW95!,a03fh\):J65<8dn_`)?`QsVWH_Ha[dh=u--
%G5]ehK^TAj!'o0&Nt1*NhZ36&qWIpjl[@ecCK=fS#/:kU%*,R'jZhLKCO.nJ5+A]`+!&.!c``dt?/I6KC7"U>A(UUtXSMj%YPFC,
%@'kGel]'`l2f$,#B@j:)"C8;`_jW1<=h!8fD7^^*K9W/L^jC-JDS74jIVnts1!9ah(9AuDaOiYbCR>RhFig!%X1;fOVX$1V9ZJc$
%$fIsD9`AtRAOUm!@;ig_nAb*:DJ_3M\*U^bo5,2dZBo.A]gJOIP24lI<L=0si.Xb"BU6;\4qp_;(5ZZASJD>c/]d7?,iKb[$h@7U
%+F',o@9?\-imDcU$?Ab=L@QFEC*j8ETV.E;C@-u#6_SI=PX7c(hE_rQ.l:rQScf0OhbkZ#*r&l-eGHte@2[HZIk`K!l7liCX%6>^
%d'0fpq_Y#W_ofh8W`$eXe2ISl-:u'e#Sno`1cr5GEj7%F>1ZTaDEp`!#\:ZOR:kEQgb1lLiHK`&O#qc##D^=gJkI7P#NlE.K7h6A
%O2DZ:LOq#_C`9,gMdgY]J2!%C7L-ILYHLNSOWl:mk\qG=)(Cr<@Ijrc$3YZ-!CWm'?u<)/"h0+4\7WG'g'\I\d]oBM9-Q9W)oO0t
%/tl:>)\<M:W`H0@kMhr`JVGX4hW^/+RXkVfG2SpXi<XBB;PqsN_^H95Hi,3I+^*CpR1q\EaHWY(K%SD#BU-L[VYTS/HJ<,N1&Cek
%-+eQ$cPt6+eKYDq&nppio9)sQcK4^0Aq1=Z;Il@^,O2hr"7JW%p2ff%`iWu5,GLJ2=<5=/?Fj0R:iO4V;!;FE"JuWR\k3Ac&"Z[S
%?uW=N'T)BA3L5]E"Zm@+^Hj'b'rJ!3PN6&N+nNgY_6pH3O(,HTM,LkCG6h+:="0EoSH92<(SetM=-+C']I$44G^OQFJ&Uad-c$T2
%5Jp3Oa54>D@BZ)VF4"sIq.[ADSlu%W)4!K,"Y0fces4Q:=QGl8OGJ,/:l+iR,Tdi/U_;HqoE9s=:*!EJSreKU5:1E''GuL0BMG7c
%1F)NJ%N#=p<d^^m+&&b35X!"6SWqYDW\UILc^d)WgB%-JXYq6ABaO(T@^Xje1Jh8V-met_9oeJ)3kk4g8Wnb1<Ge_2.$YL-=/iP<
%TUc3XXFf2,"h1B2V8bhE9tWH&U.r"o-']>*QSL[k]o^o#B=nDO8%?,e&M@&N]*K3&2cL-Lg(Op\^6ODM1Jake9u:d5aO%U>9u7<u
%:cq42nFN#XBQ#^61]/"_6Hi-!SVIb46XUUqmX#qj9V5_6R#SZk/7LN[?S7[sKrUNm&'EY$T#G/iH1\Oib:;UT^8Ln/jsjBD7A2t+
%9O=8%*`YXR,\ibZ9bNPkp\aN*)L>5sW&6]#KKj^)['#p`iKtaG3FMWhjIoSU<0#TK85CMKo$:kT$S`uq-l0(m7[+56NuiAY7:75'
%Or+WF=ru*>e,iSj%-3/Z=l(7$>$Y<f-A(l@>"k!6A?\?5Ni<f@KQj]!''j8FM+W)p=X"2u'/bGg%B9C4XJB.!MBo?$`^<W$abNbe
%J5hTo&@#>0iRo*^!P&p4rK@XX37eoS5Ab5$LY/'Eg+/c>!l+BHD3cVFD,rS<e>c^&W`gK*$JcjJ:_EaCgn)qhmAVCo&0qm?6opmi
%SgIc+n`$poMjrEWOWm8KctCGdQcn`^K/3>c1TBaW%#2oQGs^W,4@==f8JlIc3j\TD-Jg+KN[E`J1!*s>Y_MD0)()/MLDm%"Ad\'J
%^s"J;`T)K:eM-rfS4(V[?OBc/M@[C[Q7N8EWR=E\)!iPEJXb09)l96PlS<Pa!pbTBgRb?i>!$(iX/DQ?^8<lFBhb]<oX&e,TL5X\
%?6ru-l5D`_r6o<N8o3jYeeCiMeP\3T5e=1ek:9/<fYSFT'lUrSP#dR.M`/_Bnh\Y/5^LPP<d+XtBgFF7cqoYr`XI$h_D,=J'rE3B
%S6%@O$Nha'5f.oeF*t#lN@73?LG+J>J7(+tY1khnE,*6C"fVq@o<g]@+tAC+37E^e:Q0p!L#8U#a:8\lHdNXT-mmhRrFVqJE/^[K
%r!Wl9!](LA<c9SFb%jHRNFMB*WYZsRN=StW921DmB!qS1(TUH9.ZK=@W-ER+UR%&g8gWmRFKa%uS2Rc'D/*c`Mip]0e!f-ae(W93
%Q?[Cf0p?3I3s*qh2Z"@TQ.[f40c$<-LK[Xe[:k@1.b,pt$W#TFX5$e<^3o'Wd58[f*Z:FD4=2om9fiko%FZ\l)91.N6Wh7u#q"+K
%+_HJ6kDE?^oGW-!66"B$M_Sh=Hl01e5*>>>$5Tm8@T?)5MH_f<XGVl/8O&N#neN23mS_"G-F]q)H<k'4GoOH_;@^+*/304UhmtM*
%Heu.'>j2FqgQ\D6X$'=@AR2`F._%"\U)lt2WDu*`]`N6=L1tdtf$mk^9QYSajb=)9&i:_iRS"kS,S2"8jYJs7A!eE%VukIG1_;:r
%a],[:PB7/8Tjug4JDdGI*.??#Kj&%R>hFYai$'DoE8h9CQsDq$>Hl_2b9DMCc9PQ0/E\^q@%nM?'Lp.]`=NPJq3WQ_@PLT"gQ#O.
%13LYFb8i%?E*A'?/`WLZMo\lN/3ud+`keK,eDiYD<J.>(#S`fMV.stC'WJnTJCFeT+W1K^EgR>3,==UH<"Nhah1/<C5RQp;8Ip]8
%["3^.EdFo,'Q'5/iXW.,9N;#,RN_/n=>(bioYlFh6mYg;+K'(BWT530VD!Af07EB[94OfU2`XR.MGJ<r_S#+Y8]$fd,Y>kNp08bV
%<ElLfMT:Y4"HnF>4C5[oGW6'/`@E'T;fI*+2[-\KI[br$.Cb'QdS;Ad412"PWBF+5VVq/c5k*KZgCrCnd%D[k[&G@:80q05^7<cG
%dLn4YTI!q"HSYK[&oWe]+655(2]sdsT@$#o4d0&k-FKVfp_c6R&MBZ48tqKIZrh^9!MSI,'T861Vd8DuI-,.jRAWJ@-&,l?iMetA
%&r)[*p;kSuYo?D(mdles,bmqcc?+Ik#r=EiN@*WOGt]n:m6$&1%FZ\l=Z7JIU_`VW[.=iH7&3D1R<=Ac3/!)]T3u8b`utjGZgUf=
%T'1cLC/OF4@gacFI]J@JV'+aQ."<[JA6-[gE/RtY9>Ns';;SKo_Sn/3"UE5-3]<RhhPn!"g(WiX"BDG\5?4]B])_r.aZp?0"h)LR
%MMYspa@[2/-"N^@`<*AEV2D1E2`dUV]LoQLX*'Q]Js"3(H0a13*YZFW-:rI".DqYX'sD":\5VNAM1aPe=6hf:?'6I\D9?POVaKsM
%0@%/#U=):o0iP'F4R4I8)bImoC9#H+6Tpat=fD)Jd+r<AW403Z_<p1EIQ=6*%1&VaaL%l^dLDCjb^TAVC/5P>^+g0R+Nur"lE))F
%kBV>3+;c)e9V6P[l*N>i"rN<R]4"#W<is8mHE0214ARn0o=*_V6@TToVA=l1O;[#N91DX`q)fuHc;X%g[=NX`[;k/hKK#iJ%.)J&
%#$00ukS91@D]7GhU>DfU;/95>g(Q'K*F`U=Sl'j/#nQ=#p082;8RSdg7LUSrQk:ChqfjW[T[?8h:(b#N1g0pjEK0Xe`nM\niCH*>
%;0*?n%kc:T(d9E?-m(!P9>F\'+&4a;]I)#@HSl'2)2^g<bPdAOfE<Pk<$Q)]!uZ]&O@V;Q(_?u)f2oBV&/#_38DIrh-.-1V"pDec
%3nfk2JNMZr"1m,OaX#/:Ugq?_9rI+B8.rX5HQF9X?43CQ(G#k$)E*_E-N".Z86sh>P([Xh5_>@E)%rVD%7;>\l-P64?3[L,C$Vgq
%/AFKn(KguB;`PF9DNN<>aU"2@?SiuWToF(G?@S@PGYe^*-lIY2diiGZp7"7E^&otd^O2>;'ao&.O`FseV$%)@:Do0,e.?K%6Q)7F
%@Zpm=2FbFQ1YS,81.K!"@Xge;AV;HQ.>DBpQLV4>Gjb=C`+'?3C\(U1j)dS+#Yg+$\%32%H;$7a5,d(q.?p+B4r$kV=_Q,eE%"Z@
%9(GeS*6@CJC71u_j:I&'H5-4V!!7MBPEpIHUPK(^0eKJ-T`]R_=;jDd4\]\liI<'5`lo0RiQ]j3i[INSQqSDh;eE)A8K,\@/U2Q-
%H3he],1Os&[;KR71"*.Q9TM2f(g0=+jh>!,HKTn!r'$05j\[_c*+jYL2^!(-jjs)JP<KK8MBgQ/f]^EK$!FJt]K8QlGW-a)/o9M,
%d#hTm\B(M9.Xj\ASi?i:9l:8H[^uR6Q69F;Ur%3VX[#me)um`VEQuV"5SKaJC'GFhEtP]WV5dSF*XEQh*@M7rE,\Lp$srbN`-J&Z
%2NTilFT[6^\>Vacm*+YpN[(u0gcT]]!p^b!"W(;HKgL2cWYO>(Cc+!\i#Mm(Y.F_n0!m*+!CKL('R%u[RR2\QOEaFfM1o>XK#AC^
%!<UP^aV=)Z5U\0_+mpK2@Hbsh#tV#dTNt;,A&Hh2l]RM;dN'IWn8:LabPAP"\tddEa8d_PXo0LW3>5%E+=J5,8],N!VGcq25&X#n
%7a#)$Qu6G;f*quiP!u'HhXNDKTnKZS%R4*613E[cqc4>ff[ro3_JX$r,r&DGD!tfah12`f,)OYS/3+nE$A>rZU[$59#R_3%KW7m-
%A7^0YO5!PX-5%Bln<cXtM^Rqt$bHF*T[9,8N,P9POU^!")GJ"5C1]iV])_r>JNM\?Ade=1,%CAi,b?ZFGqb?9J.S,fQCgDIQK%D9
%C,J-r&iQHqOo=\^/S5eQD=;F0,V'nk1fV0R#)$.qIR]SBU#_5QEQ5m4_u[&!D+-tuq*nY_lB2U5gCa*\.oX^%V@@t[Y!p$mW<keO
%^cg4&&gZGgF/>+d5Rsi(?/$8.jJ*LPU!umZ0<?U1,Gc=jBJ6B89=P%SL/)IUF:oe7[6Z7V#b8htO(T^Z\Z10b3jPF+"=POI*7PP3
%!F]E"J/k`I$SIa]$Z:'c)Vgc*2)t38>&^1=j`.08FE!Q\WPOF6^#3?F8E+nmNQ<2p&qKt4Kf-P1;7-98Tl@f"jO3>LJ08iYL<$Vp
%n!n(9E.s:6GiWU-4VnV4b*cNq+p0WAJ2BX"&oMN(M]YhJdHDSY\+8IeZLARh_/PGjU#,##J@lg4>*:OI74*1CjTDE,-&D^[q[#YA
%->K.j$ALo,5"fA\'/0!l#n_o,\+a%FMZ$0OTmFj?DnqU)Ti!R'"9.,,TI@o&m\QM?`K&^rV'Jf(CcW^k5;Vd\@&]4pX<'G.V3A`K
%.a9*6&q[n73NbhZWmiOYF!]"Bp6Zu`7,2ZF)#1moC*D1$%8+/8dRAYi_O?#&%1%Zs"7f0a"n?o`b;s2oHU\0m%qWj6.Y^k8IO=KQ
%.9;a8/@[k*,qHpLVr4uB#!"9b5Wt-Z+*q,&B5+$1"$NdBEuM!d0I/1T9C65mS]H]Y!sjNBZ=@D)FQ&N?1l6IbjJ-b6%NGj00*!<)
%B;(p+ZHsYtnN`*a@qdkEYhj*]N)PIW%un%e&NFj.fk?![m7!<7S*6[TG:X"Z3)q6d!=<DF?@a&FQ4_;>m&,t8PdM(gRT$JjJs#8h
%(n_3"H'+EM0eoX!F"BY`KQS2j9g?S%b%DP3#<]L/0;QRQs74B\3+k[YSj9-h+6JsPh@0bHJ.SJmOMV;nb<M7_EJqu.!D)L<Wn0_`
%>gIA#9[pK418lP!:EUYnWa6jUkXFI38BXNZm"!e!#`6UWpmBHuW%@,\q@l[`50$V7=?Z[6.BW;m:f[:/<d^^=N:hsKft_RMA_qs0
%!nZRI<pRnT^>nm_DF!CiKG6:fh1/l\b"k1B$!AQKl,(P6=,=d)W8D9qr644+.@O(%@+DW%9o[qg8>IRJ?G78u0&K*ao%,*)"F?>n
%6n'g$4HrVPW#cUT.=?m;r',9+1flu`.0eB5#do5<\:*EQRh",6\G^u50t;*d@&QOCWZ]mN&gA!fr"i5M6g;=?5:tGqhZ/hP.`:D,
%$=sM8@KI&IW.uFC];:B\)30q-93u>G!e%'uG(NO-Wg99*Mtk7PjD*dEpI15g;-oD&>)f<"U*uU.7949n(dFe=RtO;AcI6Lp[7jN,
%<pn+.e*pe=&MNh;GtdL,4ci.3V&KsaEu+pm+$5<-C8$\3#qi6P!$_7d:kD)<JM`c=>?C6-(m'hi-'0KT>_?hAon'N72@[qHIKtX_
%hnb"Khr"u"eDiSHXhc#IFFrg<9EteOHp!G\[6.37VDU?9)"9MD9@_s&1%mSa@_h"`$.-M6OP1iQJ_9GQX8IbkZg]YMgu4giHM7[L
%!dedLIfVIG'U>^HSX/R&c%p\:%:aJ^_WNYQeHCc962'IaWhQ\R^cL@\BrG-4D4)i[;M%<9&M0GMB^BI#$^1_ST#C6kMFIFU\#4q[
%kfY5gX.Ig.#(])f+,*$^J`$,d!GNSZ;T6p8/]o5OW)krE1(8ia%1!tsX&sqopShI!<3[QA;0*Nu5nYhOE"/o)JFFjiGL_3pZr0qs
%0;K@+M107@p/]q`Z$fp8+;%X)4]Y])SmBhVIN#'#*m8k%V4t.ke*q@OXUiS5n:?I_0d5*,=)">3)T6+#TMcTiE3e\@38'DVX=B#Y
%H<hGm6%,[fik[?g<g?:1[!W3P>5l)&TH5E'@g_=9RkSG?ZiLnP8"s*8V5;?h-lE3K=BXIs&ZC)nU]L9*S<"(^UU)YA_D>(]MrAH'
%>PYF&[>p11+dY]oRkdRP@gH6TCr:3+'6m=\ZcGL:7FB+[N0IOT=T*VLohKE<*m-e.;E[^BaUOS*j]b4-lCPOYh(Sf8_pZ`s?m*>T
%\hODR^l'!C?`P!WYLP?PIIT-a";*7=1Y&h%MMKUh#cgj=i@0fl%/PMjp!s2Um@SH8b'GaH[3)U%k(d]OKgC[8i3D+01'gk9oKW=N
%^=NQ/H,k\,HQk-"Xt)nRIt[)OZ]"heVoTjL&O\U`>?qN?8ep5=/ukOc)B>u.DI>gJ:MN*,"_1bCSdAI@YdT.g^968V0q&Rk,%fj#
%)[Vfr;>gW0;12PMXSf)4@8Kh%m-`p6VUfWK$2sYFh7rlYlZuu-_X`"3+L!ZS#5"Q61/9(1NS\AM='[?o$jSnna#OGA^61fC+R1_T
%H:[!0"$%_2&c,Y!iL>r!_nK6_QA+cMVNkeij::(?$:!lF(^)`64k@.Fnb):#@,VKNEo@0/*Z5I8B\MkrUDNqC!t=nIKOaq!>kj/B
%Ysa&n%1$`8lGX&VV<X`g/qqo03h)6U\S0^"^eeKiVT^!`K7%.N#1J\_D8G8O7kBCmC%QPt_P$WA:<d_\-!^7`5`f4bNGcM`f?^EQ
%_sJ9ZqZmKP"GTGhM:,+Z9'Ei/.t<Ec(p%tV%JVnsNS[\[X%+i\LeoBNXWDIJ<Z^Xq?r0R:M""e5(&j,i7MN&A_g(lai.-hZCdcC8
%,4`2cb49<hWrBU2Tn@V-DfNaX@,WUg%BD9/#1UhtOd3+hV5:(HT7od$-5bfk<^\ofRhu+-L=J:nUh3*=I-HXYi(RHZ[g<R6-:rbR
%"8lB:'Db7a"A&Ui*U&;.#tKk./"trd)ni)l0lSr]L=Aca;Cb/VZ'\X+1E=<aC9S<3-b(7%%NbplB9%[!J.qrcY1garXpG<I-P@*S
%_QU=8jaEnE@D1IU@''9OQR]^DE/="GH8$<p%W),rP=?8_d6^)R$t!okXNtXu6^^#N"!Uj0#6dNMPooKPNIE$)_-jcf;=A!<=EmHZ
%q4UDJ>5G%aA"X_q&7K9U&L#0EYe';28bkRu7d)5L)\F8dmY>/%Ekm!EB_>&'dO9i>D=\>oJJ"^t&.41e"Ou^u;QB+kVceH=Gf;qp
%>\3-kU!^5QA/3lPWbY!>!SoCWIilhBIO%O[6&u_JAr%o1#rPUq,ZOebcYUBb9(Mh>M]h`Hb6W`LAO=)T$W.5`(&fB9o=PhM$A0-9
%,/WdA(JdsJ<\G8<Z>^8OrkO7@^(bm`Im[7;7kZ7qFFXX#*CA+/4>kXr\0E;M#^Mg%"pBPThL%a>FR_6==8`.eM>bbHiIDgS6*#23
%_VLnhh;GkNB]#oD(L^$AiDuQl\qO365*W9,8fO=C.)91V_e_U7FH2TR_0NQ7L%Ltq/hcZ#5/V"TH@J>FQ)?Um+'M2MJ]Hc(-$AdP
%'PO72?U(S5Z8@iDh[/_+/Sj9p*VbI?obV;RB_B8CF,75PK/+r#_53eL.C:"=nQKMn^Dd`!#E#?^$7mj6&[W!\(h$me(<J2$;HaKI
%+?n,p<EFn%B:+HeJ3cnA7>0jbdct\jpu/a`N>2uc!+@%f:8BFgVlKT33=GsR(/V'XBVYS<8oO@IaEr=o+J?f7KqQs:*tRXR\6.K5
%"fW;^\5^0]&3e^R\thSsq22&'6.!b>KGBT<3'/%Tn:_pTM',-X"b&Q^B1MLO'UPTF@pf+RdLFVQ#5N>,UABZF,4kY@6>?,=0n,LG
%2>SSpH1?[L7emH?:q_Q^--UB%TNLd&7[G5pmM+hM=^NiBVq8`RY<Zs?_G)Yq!]%"USYk-_8NBaGH9^pR"f"P:N*r`9ZG6MlDh8]X
%rWA<<7A=HM]T[>($D#H]YT"/;PJR9^]jG+)5cXR[0%G$^BG.<c(5>=OdAA%D-:rqh>'cW6^%hB!g+Hf<(^,[r6o_I7b,5il^*Q'[
%FO:8Nom3ploGUF>q\W's7]@Op%VTMq8;]PrCc[-cU3]J1KgBba=a`^.MLf-qXLM5*8NBa7H9^rR=kXJ<M"$'m_Ndp=&.sXj9ruYR
%k3"7KKno6_o*.U],S-`+P$QqJNn4r?Ok"rV8SI'R0-2#(7W/Z4N@oe0X:@htQ++82$L\p_6Eld.:de5k8nV^GGW-aq%$T=>4"U^8
%/CIXm#>/g2=p.m_,Ct1X?tfgKe,q9I>&_*JO'dl9)H"i1V2_'i:`(0f)<tr"<86#%cg\)<.F@KPq)/l]iQ*D`IUub:)$*.(]'-Re
%8>ik*#k"$P3in['Y,=&uYk!hUJX)kC/1Ss^Ic>cHXGHd9PhG?"FHh9KrPXprO^U3R7UppZ)]Wh'+?_,0H6M<(DfkXAMLjd0KR007
%](.BW>53\/K'OM-=F]kFTP8a!*FVd^3CF-RBHmjs7ZA*cK%b_`<JCc6+bopVK_bFHl(IlB_0o/DQ&N'l0<Q(d?G+*(@14h\MF?l1
%q+JTTKtZFmSsn*7]lc#0SmW<q7!c$K4;rWi0gF!LfQX-)HY_(L&5s0S]3=/oT0T&QSNt(uW`L(<(EZ5#KuYka5O9QuPWQDl-Qu:o
%^PJ$1YIL7rkMUW]V"R%idU7hA\<oio+!Oh_G6:0hF]^]CRq&,eC/L%EMQD8$7"/7:B:+TG!"jAV!h0d(H1NbZKH&=Mnu/U']7B#F
%JR(BPAB)2q3u1"3N>fKlECJ#eTP_K`-1\scRoTK&oM#QNWu;RFgde-/R;hg4!f-%Q&OXVb+XaUMQak+j-Y8HokAZOJ+!&=Y@mhR+
%KsesQo*I=_bu[,MLE@]V)MLM9@2mS]k`O<hE)s]<4:WOp1SS1]RTMNol?1Zdl)\-G.g;eJ`@ihqa;8Ounpb+f7b$b>4qWpQ<SF#^
%;/_V+NLXc\f9`U;$`QNW0[iOOT(+'SC/L]MQ\%[_*7?+NXH5g54W6#1\4\O.psKsKEKl,PbU1j2BSk?X18:B7(;)b<\Q'm>I>T!)
%$ISJ9g,,OqKB@c-LgcHsLkBBHBQ08-c/UJad(q.83")l7YgF:ORpQ_/20u9:0q>"i1l;^2/3I*..K&RRKKoXKGu24Ed/[7EI=qHn
%a]^3hK+Xg:e"Y]T)H"hr9:7H!-4u-VmTsWe+N0T!!4dEQM@X.)LH2Jqru(bkX=P>:\0IG<WBJWs5sg;h&.o^X*<RSPRB$qm/F7$_
%ZGqG-ourD&=V3P0%C!Jq"1][?\6\W#CNl/<d<f):q_s[h4RQ5cmMKB69;I=5-C9<R/`At62[h308<WHP;Sh`0osFFI@:eC>L^!A&
%LN%7BTjb&id>3*+Vh%\&;JVD(&=aYWMZWGcI6(<HdM2m>qWU@&,5J/V&3u<`jJKbP.ijq7V6<>QKmXmSUo01>>tcAJI##ZgM^DlS
%"*3.-UO6_-.*k1#OFJ/ZaD6foV_NWipJT=_],&[GX=W.f>*.XJo+66.B652_\>Ve0VR]5sP"[<7bfn-6br/.g&cb0F,T[Xn8&K&*
%h%YAB:fJuR6qT!_&BA=d5TCVpOVg\f'Epf3;GJ\%'J#XU!/IhJ5q59s.Aa4YnLR(:8fdWIMI$SGT+ZakO`Ii#5J*1#W`:-0=@WZu
%\hU(MP'rBI<ms?`al$BrbL;b>Ctq_qLTlP%$fQ6T/=`emK_)uN@aFYah@<Z`9l%NO!ZNZn\>pDBFgS)/nGjNer#7kHOO+@NqG,/L
%9nuUS-ZUhY(M7*D\?^bco:pK>T,6T((iTb'a8:51'WP0OIJW=77ic-N]-3BLTB9%JChd"_&Y'R/Gr!pKU*C=l"SJHtB+h@4Y4UMU
%f)ko.;?E)kApUH;:.Y+"*K:(r#11nO(9g8a)N^iI(Mn`7p`Ua\UXa[uaK^K1_<>,n7ZVXX'ir;5-brHu,%"NekhMn'!0T1'6h^4-
%4ggsL2of"Nm^Di:F+Qi]`m&V!Lu@nSq%fhaPNm6.PAkQPQ)_%a:KR+QaPR!rcQst?3KB(/9r*gI(L\-#T1oe/Z:7O!ie;EN-.*54
%lg+V*95+PG\,!C*I/9f-L4_0Faqt@<WAOI"QjUt%^<BebdkRY*_#0R`*8bEf`D]rpNEc;CBoJ8>BdH3J;_8;)<5>!PSH[J?P-]Tf
%T;B4\id5"<dUup;[2Ta2P(;",$<j;!V#_tsC,Oi5:(`XI)IO!EG)!&uRAR,iXW"r7J6CLSP]ch"d3M`dSH&ah^(^La1&u4P[hQpG
%9D7&6i5:S;BJ@gN$tQd@<'&"icF:bQ)]Pr%rA@TSUc)qP?qq%:r=B*-QZ5*q^9A5S)^E6NLTXFT[YsqS?ijS=>\OL"4a&1[Ae@U\
%^QnF<oRs,4CMt6[$Y([E?VLTF#M?%qLeG$*b5Bs\S,8"b+DXJa<V2&fl\&-`j2Cb93&2-HoQRW9^+=k2M2Lq0E]ffZ*IFPRbl$A_
%,J6l2WQ40+Mf2=OU%Jq'1+1tm&<,'r&Ca@pB+#U3:+XA3M21I%3ZSp>]o]\XMK"("V!f'g3sU(@]`>>'_#/rW[:SB5V8q/Xh_0NH
%7M]DGM?X$,11H;8T0(a^\;U,2_u4J8CZOPl$\P]g2!=G?S*q,-La=p&PBq<^/0(=:^tPtS-o]6pd78K^,Ss!E56q=i;QhM'fG4T(
%,#i@IV1sipdH?=7@6e4APDHS>#Rn@kEXhXP^HekbhuQ:\I]81ZU#^#"HG#G9_HYg=U<;V2Z&d6?RL^KuV5dm;ki[P]V_A&`#2p_r
%k&;+p'J%1F[erC4#k%,:[F`#8:alWnkTXh</O3d%NYoA4!)bC^9Rmm_^f!&,Pa4J($FhkA<u9e<J1NSGJKF1+LL+=6W21],@0Qm3
%E"u62+o)".W&AlhN9+1#H+-+%GoO#[2np?:7<dQB-g+sJ'-=lUQ)!_pJ+c"9b<3`"*=gL%i;YX?2I?T9.M"VJ%ani3A.A]=Eud9e
%&1("ofci(Z`CBHJ^kh&7^<M54eaUaoTck3Cc2UgEeqB45;l:UZ&3H]Nl-;.5&7"<*?TP*<PW%m\!BEP@>J!_mbsY2[%`S"e#!D3K
%!^)PjmPmZQ&d4N7SjTP3);?&oK9D4JPZqP9Ih2Pggg`=i13o2tYk3hoJ-rs!%8c0YLn?U-JtfZGh1(N9GD7`YMt/b]Ec?1DT)Y!Y
%pot]"0q;lQYs2W6FLhA.o)3J_lhL>2-sIr7<0qg/c,Y::Nt)GO6GlBDflrSNS1'*5aotrp!(YO^$_!g$'/6m*pks(:\@Vi^oHC_f
%fnt3Po,X0ba=K*@$1lb`->4%@!:a_7`,s"m+BuSA0,?!4!K+;0VMUBDJSNq7dYK`rYhapHh+SA+3Y3!7=dT]XUI5Fik:60lnt,"P
%gbETnD0oj1V$f"61+SHOhIdO*pU)QAH-q5,j4>rsO#JJ4`)+.[["7l(IWJq2*X$F#:8jUYPWQX]U&0g(K7T2Rf#?MID:$T%YsMJ+
%o:U'U$bL*-=Z<!E9!`&k')nea3Nq:X9g9&8(iI]^E8,impCIfUPdp#p+6ggE`!+/QSn^qfk;[SQXf$pL"c(;b?42Y>`=nI)(9<dG
%H2?98lct1Hj6d82f=Dk+e"GCq=)$XgBJE4s5@SUnmK<)3j"f)='>uq[+t]i+-g<rt=7D8,[oE=GCQ=o*<[5!S.<N=_C"SD*@IL.P
%l9<.2FBr'I?rCfMi)Uhk1E5Z.mHV#5'm&=s^qC#>n[O=CdJs=aWtYVK$6#d2_i8\[s,0HAR(:K;(8S0:+/iSnah,CrWGIs;,\rpX
%@Qn-i/9s'u:r>H$;PotWIL?:<'K2&-6maT<L18PU<qlW^K*GMPCfQ<A`tV^i"?>mf2j+o!fA\bli!NX`BrZ,(`P>J58qEoH`[+XW
%#-lGi?t?aX[]T?Nb^a$!A%MnG18fh&2.[S:p?rAPmZ=pR\pdN_N)=P54Orl(E,8B=d1,=cnRG1INq7buo73k-JhtXe<CVJn]:!Uu
%+idHXk&]8)e$hLh>j(4RM$]<?]P,bQ1?ih&]kG`3h\<VIT4;/^_t=jbe3Tb[!9<3o.KXE7)sL]7)/uV%O:HlNf!Z)]_Ea@VM8DG*
%O+u0=p`F5m[M_=h$/3mfddCl(0GYuIlg(OI#SRP^UqI<e<4U=4iou0Ha4-GC-]%^92KWSj5$K0nM)QL;:DtcfW_dhA-a>j]]Mh2S
%i6+Pu#:,D%cof6cnb&B^@1.8[SR"4a71G8Q%EMgM/f$!E-Ld]DC7h,=jdLni`oZJ(#C.*$>_Ac*c#R3J_@ua*pM6hf*.#R\Xn#C1
%ah>!V5#E:CG"!8lX>*BPc!-J/4!La;r;f>a_CJaB=f+KuU[5(_X%i;b+bH"G0M"/GPO\-u@DBKL*<'WY`!9`$kTi81V!Lg[Z`-\N
%-M2%t3KdT4>"W-'r"FVHp6kr<7>7#a<`I_3YQE6c]E0D^o6@SCj.U"#30a!->Lu)N5bCI+ajGWD=c#lO@ebn%[//smr2\(d(^0^a
%Wd`u$%@br0fje+V#WOc"%a;DFp3<+tRn5(j.nQb?Bq"I5M9(`@N'gfi.;c;A],$Jlc7E'^GsLk"+YD,>a:T(,JjUL>Dg^`MMs0Kd
%Lo#`MX^5#[U0c/"3a$Z\oE=S30fe%.nAp*Vs)-6@NRFM(&W8+g'bjhh6p41N/)YBXI`\an>B`/sL6)lq\fa-qqY9g6^.(I@)B,jm
%bXG)ohuVGLL3Wj2A7"VBa%g:1cn)g2nb$7HVU28Als<Y-*:q-@]nkbB<I;_B/A-88,WCtOjhCTNMO9PYE=U`Y5CA:A(p8qVY%>:J
%NIS2K:qb+hdTE#obTLj0=b%'E((J9^OU*'EL1J-SMY@nj9)D+Q@VM-ealnbJO(uc77>D8#1uo%$bWpm'+aZa;b9sYocq24G-07J3
%IemR]d=>;5B"R-t3+b`1@a*dJPou)2+*^FFpD(]YE0)m>+lP/41@6C\0Nqn&%*=_%l/`upSO2Jti=ED*V+6/)($IUGj:I*0-0:Z8
%VJP+-oq`E3aJuTG[73RU%iUZd@.OjFU$t[aJ4IN&\,r19iQ]lR;DrohF=OY'>-40W7=74n0dn#K@[f[tI`+>$6KDK+H6KE0^+,*^
%jPP``56&%LpZn.QRC9[M]*S%JS-QpJin;/R%h;O:$UHsZTc%]GlL5e>W8)C[dfK0s9iWY&/%D"RPKZ=Z['G\qEVsB>,(hpdKZtit
%(`DQ,\XB0*g'r]iJD%t"8CiT#Mrb?3)mT7OZ00g6U#I+G(`5,?^&S3c$"4&/!QHTeTS<Q*'_]sZEjU>K@#u6UdqsgLk+6m+mjHIg
%P--li4lY3B+7IDhC3)?1?S8+'[ikeC2?AEh28o#l;+]71/Z"\:#q9p_#=o/*5UTG[a6kbBr#mJ[N@Qs+F`ZNVfE?Ej)A[iCUt]Dg
%Nk'A[+F.o]b,<M<N`?-o7SLsAZ6Yl<K_@jGTMOAN-+s%70e)9VkHE;eXAnhfH8qmj>ZtZ-M;M;4Hr8YbrN4Wf3OWdt5VX]H9BEqh
%.PrRb9's?So.7*kqKG\unmqmVcH"6gNjgIDfV%]*d*,pN$mE_V9e+'s%q99cK:!@*9;fLag8)F>1$u]<7DLoKQLQa<7J33A:3nn9
%1lk*@S$DBOqT3'(UmaQ_rf4KcQ&H@u.\jM)&ke$qQ!<$_BTEHU8.<-geQjB-j-I^5FtPi<WmV;t`D$:lq$o#g%"SF="pQZGe$9`B
%#kSbu%.F4srHj6BBij:6^!pdu]'Q')LHieY6cAA,oRGk^IZPctGq&nX:>/'G?S*tIhH+b(Z$*5P57*,m+%"))k.=O?.??gVSAl<X
%\<2HEe<Kf,U4//GJ*?17h_@H>XO?]*BX`suJ'AJk]G%JID6D$P/2*_Z-:ok8!1*Wjh&80;-L%9@8mka,U?m%8TeR]f.5gq8WB\#M
%?813rWO]ZLl@h77GJrU^29H.l7C"]ZB.[;4=_ahU2eP;LYYu[u5\rp=m@aQ1SKucDlTu&$N!tNj,hpX`-&^'q(_`%ch!2XI@!bPO
%(5$,)dW34Y/a?E81l5JuTg([F8S*q'F2eh&M;$lZQ;73Cacmd.]g0^/SWfe-aHtB"T+#+\>a842-$Q%BTnF?q-u'l*AXh*X06X*B
%9+M>Md5lKeoPlEJgq#]7+^oRHcM@'U@AK22=;I]b^&BS.>lG(A[BKNh%d-2RSk5&8TXos+AA[d(?-N8BYb*;*]!K4_2`oZl#LT4(
%;6!Y>I%CO3J]IDND9k2j1'T7^g:s_B(l&=]GHOapWqKmH?$T$E7PT,]-uJgcl^%%qKocL/kDCL+Q4(m\O48rMN5gc_5W:"!%E5:=
%\`qM$"f1oN!iK4qSXN>2lmMSi<tZruh\p3PGd=S:Kirju'>TWH1[<g@726h0A>Kq8nOgRP"9`Nl;qH.W?kKh]-$Z?*mf7Z_jtLD[
%Hk8o^GK'1jQaJCpEj`tm[>oY(2Ik>8Vc8f=F6k18?te--CX++%=I.b/)(T[C7>NIM9#!e:i\Ub:&p#1N0VjKV8(^dD=poG<OdsJg
%Q*gE<%UKDqjl&Ss4'$ie';QeN3AOoL'Q/a1&$[UulO4D[_[5iG!>!^s7g3kolHa5Pnc!)nD8>3G;2^\CCjJG791h0Z'jj3j2a'Qn
%&Gq8OPXf%>.J6FrqndS=+Wb#Dga;=Z*o`9c7bENqG9SpjJY.amk$94e-cCQF3jT11M\'@[Q,'dK@L[(<_D&-rP/bLs\DPRO>QuAF
%Con51,3F;'+N48miah.B2%O_fl>m'Xkd;(5,:8j-pD:>Wn":7*$o>=5LY-]f^o5I`>E1_RKXb?K\e!1V+(CY1+eCsY9:44)!;%ju
%=KcQ$Y-mP=40';SnI*Qu%q]9DFrCr",G<Q&9nEW4DA6Gp>6<6[P#sS$'.p*UI*9u'fraYD(D+(&/7YUKV119767e8#^=gS)qh.:Y
%Qc![UprmhOJ<7TGQ\F&s?BOEd(Dhd@41!e=5Xj80Eh#7$/8<MWOD,SSc_Nn0aMguEa&\39iB/Z3Rqetbkjs7*SImk#P\Z=#WIjh'
%1"tS1%J(S!>&Q0r0Y$ft.YM=g:WO,6gM1CrS$e?@%H]0/F3_Sr>U566Y3gnuecq*[&Q`cJ1u*Cj7\6rf"u#7,W;72:G3t,5F0&uN
%;r=F".jKnp&Eou#$_t6ZjojZ;<ag(HQ?',o74C\I)TH[X!6Za!V6\a_7(0R;!8U"saLqeO::W"+>/RI2(T(>jU5=>[%Lm8Q7(H.O
%(k%U8@:^.^?E:qVYj\m0J<gAta@"G/JUNf&%\BVTd.o*4#VrI!kS5[*9smVm_5Sk#@Q:sH4/ZKt%4\D9>(0K_Na<KS!=or?(*rf]
%'kIA-%L0@=[:!B$iB=f#_k;ntNh(m&K`U#Z_"S6A;r!>V(tB`73#Qp+Vh&H8k1/B@5`,-p)/Q?<2a;i5S\]H&;k;ge%gV'3O;65Q
%Dq*\XHk(tXi&WsVAsceU%fsX,PWaXfrKAV]J2to%BE7(q3I(h<MkH0QjSmE8<IW4#H0uet,r_u6"<KT,`j]7L/<+VU`]PNu((/dU
%].Jm,aoXag:`Ub/o"A!`S36kY\XD<"1uC,'95UtD3'OppH^rLR2RE5V0-]C*=^T!D*m"3-7[=$7XqL0HV\UuuIY(pV.ecTE"-afH
%jI6cAS=BXkV[EY+V%*#qrsha!-ig`a<]KCHM/Y=&jqMb,V)"Ih2<`?hD9%>M<*B@IjF%?YK?aTsd:q$:1.j?.>AX2/IN4E=XoT<S
%R3Ni#Z'*eDN*XXrehuk#kJjf$p,##BOo54U^^p3L+G2Jc4Z3:J@!o'IAeG[%K]roVT[9i;-N`e(pmZM7k&fO6ck^YIh:)*FJ\Q8`
%]M[BY2DEIIi[<53aDPe$?`P<uhe(qEHR7UkZ>!PR13%JBWAM`ke!X)I6Z[5<iQQC'Ib7@nFVrhK"GGsR#2dWV!XjU"`.fV2)J=[M
%N_62UgO6_+o-tGC2HYK66\b0's$uPt/9GKT0-m]T%6g1=R*G%RDIM?Q)_C=.G&P.^)^mT]-Db(eP]*ce#Z*FIO<$Yl<0iZXo.:o?
%P:ZJ5'5M)&@>!lq<`^?^7*kS<(E4pXWslr@%0i(9RYlN;nC!o]fD,UUQb.>F'Ah!8;#<g)hoDa.6+6Q7k'#_g#.>\@dR^uS1Qs>.
%LA67_"D8(T%Z7:QP&Zj6#)7!R-YMg>WUhl,7Qi6dXX]c8&NRr7&+9Og"4ZJ:4co\ZYN1#F_<q@oQ]OT'(7bW!i%E+d"lV%N+Kr<'
%iap_#9ibemX$6F%L6:@]]>S9%ao%JS.O+t_$Mo[]-'TD9QM2ms/=`+g17k\`>&&Ws6*s#T;>DcnZ1eM6=lfJfX5>VTC[*sB_5lKD
%.jbaH@O/oVRI$8Oako'Q1iX25,t\5(G(nHsOb71Jfe.*J:B+9\n'ra3ITq)./CSUZ[1*G6r!^E<#-`G2=T`C(7B.2)8HMb/F?MFS
%r[Yj.hIR;c_';_kYXPX![aQ7T_ne3^[M!m[8duXRBm>Y?2V#.MjWNHZ;4i_u$lnN4*i.0qSJi?Hb6IZ8ohT-$baQnQG2ubfg+bDU
%$'d9mE^ch/6Igcu)pa!=)&!lJ`k5Rb@*oOLr0'<Lpjb_cnY3`^O$J4Cqa#ja!=[+E'CniZ20*GT!F.#?lU&<Po$K^Km!&or2lm#\
%p>f^4O',p!@$)\L7,c?66:H+G(`cck":e];o7#3kR?16T;HFE#Nr\blolK_d4Qr2_lch#1CKn;9'EU&\.tr;tZ7aN26\h2i8LC-r
%]J<L2_+LSLbiRb,\gcE_>[#&#D+hk.e3PZ%mCH/;0cr+qME#BOon4[2)d]F!9ApJ<(5Y[>D+7+XR)[9$qPdk](&tHF7h-+dOU"sc
%RuFEtkg\g4*TJQ^oGFHMGrGMhg(=j&=`Q7;5iG7RKi5-+dBd`s5e@EL>'&^W(eC$Oj!be:f(h1S\ru1,Q&AM>WEKQ#"*3FJY";G8
%(9R2$Z9Na$AEgT$SQ'NU>+&V[bSU(7%aDEP>R5<Fec%mb3t.sgq.-5`noae_[Z+[p3H7l$9+Lc(s4'Bb[ZaEhRN1#p<BJN:6X\:T
%Kr6fn-r?oZ<5%in#/.fiBal;84BMJ^+A6/q4ZgY`=krOJ1-a.Z/m1hcja#jgGMDWFK4)K*:gH57Ootk<j"9GP)m@M!LM`4O7E"Q&
%7bu2Nem3)Uap"8[a72eMIOSYNrF,%aKs9+c#p"60=^1%>3Yehb0WOj'K(1k2;^Eh]Q0A(@A&7&@8*it&Abd>Y09Zdup;F12Mm:Vq
%h='T7A93na.hkSdd,Zg82(3_oi>@g0*N99!BPlf<FGcFSB%O:7/WkA)0VLgCQ\MjgJSAA@T^'6iH\Kf8e>!Gi+0@`UeIJpqc._>q
%K9efhEp$^nL``NMFUK%nRuMrmOfo?B!NhF<CPco1YL5iXl?@*c1IMVq.R^8j&f'-D=ZTZ/&G.R.\.ifjHDSV*nN`.SEg0_'3E%a@
%J^7[QI@YcVLrAX"-Al]sCXUfh-l_;i&qj9m*#Eq8R9)$L'@UNh`\khTf:u@/V/PSM#[ou[kM$*#^?5Vd7CG=BoL65JF6;h`ZUlF)
%dT<c`UZR+ig=B!*/YDM.rkpGRWs?ZoNA-HB-%3\9n)Q+(L1@TBEeJ*ReFkgfaFdk%LSiQn]aKepLRS4:h4(%#3M1Qp1)'':jIM$A
%.6%UXR9Z'edbHT6TL$k`J3<&;'efJZFqLn+OG4mZRr#?N,\r*)8!sLK/?DO9r*0iU3Y'd*li+k@:n6)>.S=KTgE?e%F>n9H3#GJI
%Jf9;o^ClO-\n'sWPU,,fNdmgY.\'CMQn6DLNH=P"BVhudnq![?lF$2J`2VFlP2`\CR_^c+db7ntIXQt@Km!Z5$@ttV+b;7QTSUBH
%6u#n=D#e/kMD1FH,?tV8P?O)XI0"[8gF!OZ1!aZL<k'E%U`IC??up0UV83rmblhHdk6UTB]</#lLh,>f>9IVL%m.A8A!??G+(1nV
%M=.H"CgsmqU0^_S=;CFpdu)3D(EZ:"R"qjA,)NDXLb^biBMrBT7.-D?148o8c3>\[_)</?nAL0*`=I%KFrRlQ<Xc(*W,>NHIrCbU
%1-Vsk9doQ'hEc9g8U*<E<uMoC8`<?F8:b0hlh.k)E1ZnqR1@JK-:4=7W=@``?LSOHrm17;9<sU(T^Mg2f<+hJL1RC%;47"Uoh?]?
%DHu'i#id[Qd5,h=lT5S6@QGWBOnoD\gLf&]5O-:8pSkg>6EFsP+d1+T*9(\]WtNbOSX&#NkDtZuo]YQ(^R`(p-&Xe:1oC4`(A"r,
%G\=nk(YNgo$YMH5R:\2*SaO7Ji8@28L7a4(LdK\8H@+S^*hq`3!R[OWi[Mua8>[kJ[6+F;*G.!DiT5XaP/V75>rd\cM'LD-o7.f+
%;ZgdT3c+Cs*%fOq!,h/iK%WT<.KPE(^7qMPfIm'HP>^<fY*3.]D^bjPZko3>b\%4l&iql?jG,)a7[5U'2`3Q&E#a=NFG``0dh2Yb
%#2%&U(QO[7R5M_%".a/T^OA%1IFD6r\$5>fMa\Q8r?pVV[cDtkQ`uO)RUU"al*UH6Y?Gt>j)2(p(;"`bM5a=>7\ITWM]U9pGfH$*
%GR*jR97:GD.\%m=YP"C&$7.#aMgmj.ee[8OH+.-\['CW*R2VpmQjeJV"4=QsnI-QKo^/7t%)IKtA3Lpc#CgOr-@jsT0"r(N+!Ro/
%LQH%U^(<@coLtNnH3idP`n/'^l`\Y3%;;T4T#"+JG<O#S)VmrI;"LYj@N#m*ihSU<+s^'4[$`8r!/VVkNYm8-%4aKZ7^033cH8-%
%B08S`nmnnR.5F;N=YE#m;V=Km=PH;JaZa%.qd0K)j9>k+F^b)1bUh[7&'Rc&?;RUNbmWD=TE%aZ3bK)Qgp*0eo\8^U]SeAej'h^O
%4D&L"PUr7"RZ0uGV%6I=(l,P`I4BIRC<ji#DZbSK-I?@W$o<L6FY6b4*i3.iP8N8;T?3+le#=rV+Zs*c4<pe(d<h-jf*\QJ2J?FH
%7#Ud1Ms<+M4T`%4PU&`?e1M)oY"p2>it%WO["kSd`TRO^kCQh>-3`1>-kuC'f+),p+AZhs.e"`A&UM7e$J;G8S%SqA"7Q?e@()<>
%.nAlGk1UH:j-^,oC_\rbp=\;+!$HdMSs+%rc)uXVQguEI'@(n[4]L(eHJoqD3t<uc1cnDc-01]\V,L%Bpe@)FeVaPU:t]g('_E39
%4PH6SN@eYcRF.J:M#PTZ0_)R%$OD4OF0/1eGnT&f%EUq3)nD;_//R\_SRSnO6?332pSqa3>W-\SPK^?=Yb?:$L#JJ88FMR&3C8q6
%6_u3f*YN\:A%R?2L3[OiJ`QFCI;O^4q4oaMH!LC.T8C;pB`h-Sf*O,Z(oc[Mj:PLj`TQ)X%dGps$mf#T?RBbF4e'jM3:&cK6b@`E
%4P5YiJ!C<HOJ?g;RG4Yna$;D#[Zb,^OdWlFRZ4/+]3o8th$pYNlTcE7s7?&giglh\0?pT1r;Z.?D'M,ZBd.pbFVC'N^CU@j,k@JS
%n6;^rO&I9M(mYLG"l]<Sm6p9YrstPu*)LB\"^O+W8*u?S,n4s3&e*-"h6fa27<P#ZpHd!$"qFk;VqP@D#$a5BrAC7b^O]rI3Vn_<
%;HcI[%E<9m]#?$eZ9oQA"ii&$%\lqJ-?Ju'[r=g`9dt<?'q&X<+n_CB/.cJ\Lm!dV/[>C."";(ITXg;hHC)XUWo8O<C29m=L)u*R
%&7n_DBc'uIY:KU!fDOh4>E*jp9pgfdP^cL[D()#*>!-!Xd85'I/;CW=!b%>Va@?$00c725Mh95tj8./!"QR)]&WGNPeNl$+PUK(g
%YR_74Ms%<ImP3S_V,XCfOjd#p)i\(s@A\<\K`P#KG9P&aXui!qLU"8$e,J73o1=O1lrTbtK#iu]*3?LffEWXMi&M\c.d]J:]uBdi
%f7rX]?Ul.M7ILc.0Fu6>qQckhLLJdBE\dPSs2+0ZQMCX!K7%6;<$Pq;GnOQ/X4Hgsj%Z8^1=6Y6L5NdpHX.'0.3]DVQ/p,T>b"5b
%PCIMX$%jBKhLqtf,/&#:q9DZZ@uI;ONbnlui2a61W@Q4&e/VeXnD%/6MTo=k]9@\:m5fulHZ,]PZ/9+V=f4uFH<iH`SYT<M8_u"/
%KEsARYWIUK:-X>I`+74R@oD.J5]X&Bhd4F6]h<?sA.S4.$D^<[jFKF44:]^9nq8iQ@s:\R)c"Ps=Q?_C2fTUnXgS\;LQ3J8_@)u.
%r47`MpMfPX*Z,COARP*j+)#=nBGYVDs6Tj!SN/0'B.Hs)aP80kW6Rr\j9VY%%#@dqpnVTQ*p=KA4EtD!A%8<_*cP59_i/UK#oAH)
%r3*IAVIh=AAKC$XPG3]/<@"nA%lg2kb:fQd3H12j(@c;QVC"%sd\7fQF$u<lb8$S@?tXZQgBh[\%D*-!9+V6YS(FGI'YaUOAX;).
%`pWmZkb9[BLjEhBY_bpiZ@f+=$&3mFfRXn%A<4OedX`ZMD\b4,AUWFMk[=nXY>A"cE?J&%\$JM.?R'`D.;_-k$?ii/4Jn&<;lrqW
%U0L#2dXV<VDGZD)CTC;BRU+7ZjS?3cc^h9Gb5t^PX>]7q`^_ASXq;F5q[R:mrgUbI$K0*VNYQkDqdJteI.Bb\?mt^c>-;8I8mB,B
%B,TH"XX";U[3^OI@V!oe-I*0rk.JbI?re$!/gF<q"2k$gcs!(D*HSJ:+&2mDK7OAn0HM'..-Yknpb,ukagU_$dA=ALE3s-PkcAcq
%Ks)uH_)lG?hef7D)Z9??nfmIH*EA1[=U!d]fc>KseldhG41F>(:%tG-,>VsNmh)e6Sd5EdS[Q2FF'<pBND3e#38h\n\u++D)F^9`
%Yk;a,+ojh9#M"&>78^p&i=Yf2dN(Q5g6qUt!U:\++E0bT>U9`%S<bSp+7e1o"qD=6:"'T6s0I;+,r@T8FB3'5D@l<C_-T\"@*J5L
%*ft'Nljb1W6,JTkLY5o7;BJQ;EukoA&Tp,>-jZ[J-nm!E_e5*FSJ<D^66RON2[_LqE`]![nl)Gl_bS0MRg*4=0oJG@9b-I'FX=d`
%bK[BU<s^g"0h<rFkA37&:H/oi_b(K\a#\9$m8d.L6Lr$Oai*sB"S4k'_$3ss'!4We$>TW0'sf,Wnm.Md^.7rhkk2IS$7^qZOO8A\
%]M^2Tg[niIV@-m=_GH6\+]bRAXR)N2J6=#L9F%V7r%qi`-o+K60DakZ,aCU9*rB>GVU?AQks:Hsf$umFoaAuNa8.L0$b/m!%s1/(
%__`1mb[GNnoE07I.0nBU&L.#9d>VX=9_l?.m2mINoq+a0%3G^L.Ci3]/eg5$D+I^6hn7eZT.4ce]G9("79>A>Nn"h4l45\>WJAWn
%R?,6@TT4uPEKl&*+JbN>398)5)T$Wb"_XMu?dpPH;\!$$o/\4hC\pVEbK^%i-OMgrg8PumTPHh%L\,N4UU)'3l*:lpU3$2G%>7K)
%mg';D^4HIh`cRZj"O("J(?b%78M['cjUi>c<;,#(C-;B`_LWGSQb&>"9kI);B-b_2^*eUJ.ln/<@k5?:7c<<$Waqfcq)EZ&edT.D
%Mq'ln@cc(ZjKXoCcYV^b[RGX(C:.5-HU]on0"8WXo@]e2]Uuj]?8sLhC7UE";"GA.;EHKHJY]e#k^0&a!"#e=&g^9`#h,k<*F;u/
%Z5fhh4u4mVD2>R3*u.Jh<:?-^fb[*[Up`;qp`L$b71A"_42PS6SG5&&TG[D#L].&p3&4<"nu1r`\69pHa`S(;CYa7BZ+<3UBV;Nr
%BfT4*9LAU^O"<5YCG[J:_4MUYFl]B>\?)EePrCmX#.;J:a#4H[#1D8Rbg![>J=>p3VC^!QO7HhY,?6BRm6Tn0Yac+!&()*VYqefD
%+5!*>hk[2VaU_12<c*jRE+,SeR@*\!k`d]rf+Kss,Ve*Iq4?rElp,Q.+"Z6eLX%(icrl<YH>TQ4_Zb_t^_-Zq>R&KTNY\qk@h'40
%r^'AWcAuV88a08e0>E#1`49-tIe]43',2cg0R-",2)/s"PE)6n'LE"cND-Uqi&DX)<)Z*Gj.dXu.,Y*l@p_U)6RW?<Gu4D8)Ph\m
%H7HdedJ*<JTWl&%N^o`k64W?i1'[u[QR?:s%9.MjjX&r/BQ>S[Q>$cK&b<TB4qanN>LrYJnj1)5[T>'$]FU]9:4r(H.b?[hj]sCG
%)pc94>M*T'E4_e@ncd8o;!db(-M"XZB2\0Yi^X2gUJi5-/i"Qc]CqnFDkAM"OUFsPJO1n>*oP-F8-"g+O]/gdm4O4^3[>)oq:`[?
%p4@1Od#:6:0FkH72X"ntPs\s9L42jQcEFcn@o2#4Hbg?0kCZJ4]>8,%&Qom]\0`?%2k0N@q8h1cDa<0:nB.OR"7a^aZ5bhuQ(iZ6
%&Rb:&SgKn1P>*C-V.fF6,"A(tFW'?((/&Lfn$ne<W!^@9/K:(]JHDH*hOC%-^a'>(=M2\3TB"(;_dSPU^R1L)$eu(qO^#=6]n2:=
%,@)@=C/3pP3;g'u+V>k%"nu@b/ehA1%$k\*?:`5A/'mAZ8<h0#raa)WDL)49CMgj&SK*>M2'N,cITqS&do9kW/W8_1bj"6%+&=TG
%]u)qs6X%j`&unsFUiQ@uo`RO@.@glfUSAfG>)RgtEId=g?Mcc>1`2nlM4DugW7[jsF(p.r6CtcP4,</L:XMdPp$Ld%%\HHXr6]na
%Q2',dZq\sU,Z4`0?6rPr1Ub>*Y99-Q-XH4KX;YI?9!c<U:Yjn&gsGfV81gfYEoS'/,'`KQ&,\PUOG7c.ARA5D87]-u9se:Ccu(3e
%Td`DTcim!G?*mA-N(p,iCro`-&\H)b,cT$)>R]e'D6?CQ5)ORJ?Ud:L<4')0llCcB%`K[la;f=pFjQf8`XE3gGtbXua'@[FkmN'\
%!+&2G(di2_Y@(p7.D`H2.LYVbA[J\,i;cC^2A;E$Ol?GQ7hs,(iC=]oBQZJIF:?27Cb3+)qB5_dT$#.D^`ilL$B?I]V['(1c:D#-
%*GnYk@s;c2F+U@CB/cBT@0C7,For!rQ*\K+0N8pEI!ZrCp?%nKbf6hgnFC**4!cX7%+<1B8'8d)*O+mtMU/3u/pG\&e1c03WN6KQ
%_[F;<$BCcU"3]h\%p^'2=><u%onnK8:Od_C`>^>C#@WDEo>2X0k1MS'3h6X(M$L4`?_"^^NuWKq'E%1POs#$TgiZg$aW6B'JOU'X
%L[9<qAOBB+F;4qeZIe+CnP@M]/ElT(?_D7Ee6Zb9iB6?)j\M]anWf.tMaQnQ$[1Wac;I2.M9_i@9VQ:,(CLqYSGTG?&l<mQ;qQ2Y
%1*3jVfBBu_@Q5YbcfdoS`^to?Ek4k6VELeP?Ak]N+[QJ?<tB3i:FSJ(UDlCo7^VQYpa(%[KL.G8nG7.,DHVs4r)mcK'7(DpLNCU%
%TWH+c8I8dib=3Qc(Q(?[]jq5VTZBSWL1(aU\o-*=\%>]no(.3`4E3.f`n""lP&A5=k^Etn$[iKa$cjF2d`EDqKZqtbDqs,KDbR'r
%KI>gC!=Q[iN:T)2LN#@rOTdfbVPu.%b[F8MXTPW[b7.cF[ZH_@9%?PYBQB%>]';uuOG%0&%DZCWmJ-m[-oWG=ArF,J*#LYUhg@uQ
%NCt3)p8Q&qIh%9%\'in@Egmm5SJ"7Q-Vq3K8,U>aNDG_\S*^OjO1rrZ.iN'i,NqN&DOpE[O(KAm0G#to!0C#<<gKDWs)&tq9G.ZR
%F,r"Oh@,4$9E>lMZ1UG'A0,+h#$r,>GF3&8Ic<PN&#<e\.u4dC]b[4X-.-<W)?t9&94^WG``4UrE#"Xi*0'9m!R%+p%*[i)5\Q$5
%`7ukg3)*mjm0%T;FP%(Gj:Rk/g`7knQMoX1C/Eit:G)Y`Tf!<'(5/MJ)Ab)_3mu\FiP-<DbZrVJGX<qrNu8?c*LT!CqbmmCBELe:
%rg!nBXm;)4lHX&bT0Okc9)/WZ)+5S%:Zg_%X,ObWbdfKDU+bC*E=0@8HtQ@>c#*%W(>nKZiPokJ+qbQF]^[JRX9!+bngJ\TBN>q:
%gJDr@U1fm7KuZDeq097^N@on5?%K:08,"A3H.S<JFLg(\'BS9a'_n(=@D_l2h:EKKSnY(>G4HjXFo91OcSGRK,P;D2*0eL^S<dNe
%]\I?kV#WME$eS/C/J3dTgb>9+IiBGTpAVZsAL@&c=1(`@pQL]00LUFP^h(j(0h?p?4E+AA?!*XpN5kr#*m_.frR(p\jVWPibie+:
%PcS'q4qUA"En)*SAXE<&QM<GN[Yb>%O['F"Sna+(aXT(46he]f?goEqnr,mCW<Z!'e<5Gl\Y(RV=+i1[]OFW3m-XZ)6`#.n>kG_K
%WYnJ+EI>R5Z7F(HYL83U]_c=3`#WKk=ls9^B'77\DAZhXakM::6rT6j'0!rYJ0"g'.-4rl^[f;=_GPDi\QM;!Br<7?S2H=*$]15<
%,t@_u3$gab(T<"(XB<-0-gC7s:o5W=SbgR`#4j(ahYjlqMJ1T]LLl_G_VJ$2['+O53+3Y=n'"M]RD#JeZ5dJ%L<M-),BNE$V%(XB
%faIi`PV6\Y_-f=;=/'d@V^@aI+50jXPI4I!;O_aN^N(N<KE1WM/(KhpV[Oc[CZTm5WY&PS]X]RB\ur1h+c,kmGhV_-+H^Kac*Cdd
%b]`Kc(B$)t1b@Z@l^^b$c&?9*-ueBe\IG05`.PE'BU9=NQ3l?]KgJ`gHFc<P9Z=Et5o`.SF/n[p8'&G"0'LD>NjLulZh&`Q93,EO
%dma7@$FjZQ6Ik_B_ui4hcN+FGXlS&#,@=tHA#G4bm\*UklMb=FFTd0Ql6M;\f)6iJ&XmA&?9HVlJ-#11q"/R2&'TlU#2iq_bnhQ_
%0OmbMl>>'5+j+tXfSmRLq833+p(0)j%T]@Y=RW7;g(2u,b;(LH^Emi/NlF$,IUST5^9bWY9Ej&C%_[jYef0PfA?_c]:4/u6K3Xi?
%6HU2qi;)pE!i*pMd_%i=e@M>[cW=;YD_*pLfX8,%7f*si(tXcfj+7+e!ntp]Id^,5a(LA*;in7qn$H&@!(kgTLO)YdJHJC7&i2B$
%X540Id3h*]ZMquS==*4aPFr1E8E:6fR!$;>hcO0&klflu49uHWU`Rp6#rq\@Rr&WWSk!<(n)X$K=QNSfs3bY"lH&L?d%^T>#<Ko2
%3e`=C0q;qkJE`SkNDG<U8gd[97.nY/oQJV.UW6']*+>gF!l\)HRm6Vs-(?o]<;3cN_%lY['3@?e$.F5J^!^6cjV[_5(.fUeEkOa'
%\%a550)0[f\q`PHH;+>lP/R9VPLC[2MUQQ2XnP;8AC3((?^-:aZeGEj8UpBTObI,7[#o[b/kbgIAD7"qFhtZM8h\bl=fN:1o_J7)
%(t<791IV=D/7p;UFSan))sIMMSpm5Z)W-)$?)Cjs"G+rb?M*X04R&aZom(0O@sd9!?`0)G_E3%,Vn=bWO:QrrJ!n<`?BP<%#YNJD
%Jka[#`%j`SDJq8#S$R(j\E21GZAm?Z3`S,U1kTN(c=9m)4dIY%]P29(;Vf;ibg/9BC>Bk[+h\7C?Z.[?U\F>slb,3+b2Lu%e0#N@
%&G:K9mcrk,B\2H9TXlD]1U,Yt2P`:FUKhh$(i]?\s,Utnr7J'7\OGF3a,fqW7*'dH'eL-1n0bWdq7$K,4RE_1s.bo@VV7`R=0;aM
%p$,]9W$aKOa3c>sg]]JQ:6*.o;aI[<63+UkBI!:5P8aB8<*QVe>ScnsTCV2tOr$HMW+S^kEN1'jJN1$C;L8pp&`\2MM2TmQ/_YN@
%&B.FnCT%U0Q[\jJ],r5anClbN\GZ=U9t!n++jba`Db@#gHdZ!FS7+f?"7YKUeq-A8EZKs?=F7UZ-fXnHck0Znm.FCr`&<X0K$a\*
%lVd/'Sj:^5!Xa79nh;)Lj#U)clQfpnjq_-*@[SLqY'+3O0nS8@R=->:OaoNUXpaf80L=jG.@pNHXkV>>Fbe'ml?dU=\b,<$3]Bo;
%)J/jp2.%>A3dOgAPS.3hZRI5%&9O_LLUj/3`]EMR(oKPA!I.%nhsJ@EWZb<K(*pN5=uQbr-XuD2)W'Wbr?PD.%8QRN`6)E,5K7h(
%(.\P(D`17do^A.k\KeY"-hG,2$P=q`#?Qi7oTG\?4itVt%_A0kb3^iDNM8HDp9\_/%O5t<_J)<//"@il,-4?MWo/$]4H7[P81]Ls
%5s`qeOidjZl$sKY5IqO];lq"G14_Wl&DDF8)Cjm+6&[1BlYi?AF\69TUZ%l&`Ka%U?Ut?T+;aRi?C8iU.]k.t5WIV!cZ%u[cR$cY
%T[VZu0iKu9TW9+6<-BlE'^nH,atNXZFhapUCp4$\@csb[#NJTCmuLM(KdEW#SMtj(j5,VSe!/ru^_!^T3/c.&1S>QBaY?,A7dbSO
%-X8?s)4u@n77('MeL9h7S[@iFe*HB)\gmf:?pXtIZ%s?NV@^:9T]QH@4\!#LqY+HA5b`/(@36(]8c%8>c^O>+8"ouS6Df_elsq!s
%,Y._o?k^(WnO)aUMileP-s]OX^WrFZB6>i4<AeCtN-c-S..k\s*GsrcK:]#"$\d+Mri+Xb-&B]>">[R7haS%[#IIZ\&FLL][6h(h
%VJ8K([N5Vm`#X/)*h?Eq?QF;:VM*@FXR_BbCUG+'g^g]%]q_9kJGcm/TYH3_KWi(#/fH/6Q,#W`&E/6$;#i[rh6t*fY5jP)4^8,5
%n$%&XOX6%?7_#:PC4m*D=OVV+B:upfG#07'rL`us)303l;p`a%Hrab4RhN5Kn8j7^GSe;_>EffaA?[@jm0't=Ko?<%9F6_B+R:06
%aH^HWn/dYsodQfYj@*4M@()8AK;"l%aA4cefO9YTMLVT!^Jrp]G*s9-$fa4RCqG9=TpZ<[J_2gIbcm];dF)\hA$dI8p,<`1g_N`%
%+71NZEPrpdqU0*GB#HcUP+KW(o3QjS-bpFL2b"s*Vd#6gT`;J)Z)\uWFYDSOVNVqF+Ui?aNgL."S0@at3f0q]WYk<R!pTnW(6_h=
%4&K8W.:m,"%V2#sMQ0*(Gi1F!XldR9FhJ0\4mp.0@I(soOef2#d]@MZd`u-9A&Mq]&e8LRX<_mUs7?bjb*Hl%?(/Z5bk`pkR/?aO
%6Ge,9fC?>'X&0k7HQ@g*YgA\k//*euTtNaWIc*-d>3rX891p*%;,fj?r]J3M7)T3;'A`7-*K'EAEsb9E;aKdjr3p]6<Gl/qd@kNP
%\8ghX"7lm&W%&#*?XWgj+>sapLH3Ua#WQJYS'Q.6J("l?3iB2mTOAn!Dtu[j*f!pF%],+@SnUF3fpGtN^`$;g;t[nXK<;OVgIA[9
%oOKUh\]t3F)6(@'!Id7?ATS)$3U)n2l/X.gJSXHk(V5:jXMuKf)+uulf2\r0GFI"P,uG$o6rXWm$+@^#O%bs$XAEA#Cih'^g>9VW
%U+paM8JopOfQT?l6oJS'(D.+nF)\"^adJXF89U(K=*]D38\>o0%*AEP?0`TnaL2UB9X(P_15nBi2OZd)IX`'W)9d[+F^\!Gl@YFK
%N^Hg8VgP7<+ggCU8`icM#/MJ_2r[(;V]+GkVo&>\((fj+mtOeEQd6!ZYJp0il4;$BLC&iIFm+99hEk.0%odaWRk"FO;m,fkBq?oE
%IeRXGc'XE]ht(J%dccE.hbl?:o-BWk5K@s[o%kBcR^<r$52DBp%&)J7&OF(KaNE`Y$m''`iQNtC/f)Eo3u+;rq\nZ,U2K)kV\1L,
%^A:!`-;:nOnooS(I:j`TS:K$=eaP[`BauB:\Gg'X$STX$20C2m[VJtqjo'FCK=%#8Y!DC_@[SO=Oj)X7]U/_O=tJ6\l:E3/klHRT
%#U':[<==4BSbFQ%lKJ[$7@4/**VGo'eRa\4(4&g*fI>6PJ=*W?8cF[2WaaX-'k9()(Jrb+s,(Uop4]5*%\"E\\@7pmgp'JgF)P$I
%:a=_\U$L.s2eWLc)9I5[M.'N-*+UN!_;!SG>[0g/c7+2Sh!qU@RIa#4O3B_H2e5(pJ!pJ1e*[!e3Ws[QQ;QJ0Lhs,j:00q7&+BXV
%IXIjOmm/)Bak#l&EJd&8PKX8TF-AaGB_Bq'&k&=W=1)Fn4XmBN4'W!R:b""V`sIDS,js";Ua.Zu4RJ9%Uo&!=krJ3tHCq8pd]CZ3
%rP&55kdX_uYVlg7e-\c#=G!^8rq(P7DlP+i@qrJ(d.gC`!Kk\F,*>;9E$SLe!bu)g*'VuQ/_A$&g]9$]!CXWf=WKi/+>>?b?k&[`
%B]p6+kiA9rFCCMoqAP'q!_r>3?5ppO]$;Th[N]37UpE:MA;83nXPp99_m.rLL&.rpeZDf.]I=L'=+?M/'nk4.-%q4CCk:8!o(X%0
%$4#]Vh'\HbG^m`f95)UoHm+[)Jq^BY*0'PCYAO\>NTO<p>:H5s8lUaR'jr-)qC@=i#Z:=$b%2^cF9H#e%5Wq]%\nRuWCm$.WMBGn
%oPr)3UBG#?D0h;:2.W,[Z*PE=Brp$b6jr>XWpE-Ds1_,NTe$bhNlb^<:B6e"H>IYPdWr'p'IjSmc@NP9+>0B(Pese<BJ<5'qPq`*
%NJI(T\s[8>.*r@T+qWkT)0e'PBq8D;(tbo@+NR@^[bkMC-:!\h8HbR]^Wr`.jL"L.*X:O`(dr1<4jp_Np>Z=N-N#+0Opd?-,U</,
%.:agY^D+6b;Z0g"s1QR)]Q[FIU`O>d^Y<7g9ccIb3Zss^es$<>mf'GrAWc0^"^:U*)6fcca2?cO36ZlVHh)P`GYK5K9k:(5Lu_tV
%[1JrKiM;d$9/SWS-qI@!.jEO.nK*,Z%dctS\B&\ROn9+<$TG?d_@->U'[B74D#0097Gk'OKpL/8$!=-:A:)B!gj3Z27\C)[@#&F;
%(]HCb[WXgR7=m`rn!*T+\eDajjO;LeHdmc!$0-aUn3>a@dnX*J+dg`<oId6'D&86X4q.S/QBldWalARX+i6ed5eNNab%(X^2Rji]
%/6]Bj5*d=*2;Ru@#9hQ5&7br^mcbUQ&W]7AJLh6Z_OLoj8qRmO8-m&]Rce@"IdmYTF7HT5Q0l;4pZ/q?6GE;B$io]ZPE=K;$j>A(
%aM"\N"`W1iX<84X4EDeTbErJtp4Y*sGW-Ug1c<nU*Yj,,\XM\L;m[*&O=Vf7Df>RON;9r19ls:M[9#ZfR]oVr*j'e`obmgW+OcAd
%"sX#9#[ufM2)>BgmYseIM/iO'D05E"[#IA5@<)4g)Y];A[]nbD0%C#EKJhs;(nfhX#3LT`HseMchEd'ke_c;n`;njmcTg>GpYpIk
%7(fkU[Q)sG7A@Ss'[t-j\$C6Ps7@]O!N+9.6!:hL6EDm1[8@ASkR@asj%KU=4/5M:nW3('c8l$RVYFbj!'?%s4o6TPid3\"JOL^0
%]u/aTkSHec%?*&r+`3tq\F6uD0d^bk0%:ajKP6fM(HqGj!iuj^q3`%%r*n*(5#;rbRYQ>N2I.Er.>(S-r"G=s6>MabU[cY59';,t
%-<YOqR:%Qk!qXQbIV8gJULB6$#I5-#m%m&5"H`N<^2]MH0t_.+9clu?mL+J%G-4R_?k=uu+fknJ"Ph*2cGfSne7MJ65M-5mhF7\<
%gJu#Y0DDmtR$dNF"'A,_hu"l"Har+sK)Q@>DR.E[9c6GR`KDVULfj'R9'B.S>G)3L%+c<6:/W[(,;Qi'gjZA`er(\g&CMs^Po8mr
%oif)[^[>&IOXf_*mFC=XF.BRMc.N'M5hic53;!e4mi[+E>r@@f)o+n)R:]rj-/GLV2i*+8rZ(r7+#UXSgUJ\N=+Y1Ar+'Ed#UWft
%#Z"EnA<k5C-F9rHj]GE?5EW7#@j!-s.pMGNTYFS]@!)a0<WG1&dpd=_Eb:RTGOogXXJ@"KK6Y`Z7$+@TWWI(j4'QV4!Y.-i1fFP6
%`Pj)6/<E81XW.<@`Y^Z`oZ(BNL-dU,KF4<i@D"==DG!NaXC^Ac&;^Ae!9]dS6DY?!'CZEe!-idtA+;%S9Y1VZ$AfEn.V0;dbBa[%
%osDe-0eV&ZdL6\SF9ZD4.4p0bBVC6(0W4W8`&+-O!B[+e-#c<u$kaD70Irt/YsBpN?"aEJO9%c/W.W)YC#*J)V5*t,17(9ihuZ9G
%ne3u-%r4[!\R:O1\8`.c=b[L18>[8]d?!hE"i0:-BIolM#EDh940]u-*r7>4Ype6qeh@IQR2T(BQ@lt^6)#3hiE:o%$DKrJq)Daa
%bZ/0g.%\[MA/`amKgH]>aqdh$>$<om+X&^N"%Pk_JmjQ?#=XAu;&[QBd"I]1PS6n\i$`7^`^hO_BFM'S9jr8X/6"Vj)'G.h>-TXO
%S^"mjKXDqkjc,9_'csX)N[-ShS'e<8'P[m>QU4;7.4^F)L,(iaYpg,Z0Sq"W=0@+LX#9-<%r+B>Y<9'\4S`]13?Z3>Wt$^H_+$2:
%e9YXV*%6[jjc^>oS'm$b_^eZn!?lGRaUX5?0j<.,][DKb7b\>6-<)0"?FZ;FRT27V5W$)M4bsXu1Q`$\K*RhfW<a?*O<cXi+u1VZ
%)2J9KQV\l69`^n3/U^/*#U'X/%bM+jWYB#*5)E)i5_q7i1SBCHEY93U9FT:L`.87`VF'6n@=h&4Ppm:V7l=CF-5NTi8`Zd\l>1W<
%=J&jVPl)3<:qN3&&VLC2;!=-%[1W6tXH^.p/GA.2\K[`+ADAs4YY'2>Bd<8#%#FH#;@4qMGs$=G3](r?MIi[(J/H,077F!u;/72Z
%80sB%cXI4]5Z,[)&5gk`EN!@"8)chN6T#FFLluA#TE'`q,/_>]RuO7`=u_&O9*/%cNrru7.P6fTM[+p$5bX:YBMFo'aomZbVIVY9
%3g"ZM3MVQJ=)JQlAQFZaE5f*e8at*VLF\Z6]?Y")(>8db-AIOl$nbuh="IkKLIo@>Tjq4XJ6lqnpr"p`ZcGq>0HchOW(8EXP6_4g
%N)k3ZE?)q!W;rY`KT(quKNY-<:dkLdOgU@A+J!%Z<ghqSBp+>:TLFa2J7t)R^h<oX1]mk#'.C9`."EaY,SYj3oUs9',+2N$[c*K%
%Ifc>M-4;NP?kE=toZ7k(3%;7E-QRNmqNR'u"[jR]<!*Iq`aTc.+dEhL=TD.^"(iPs!O:'"<e8[('.0P++;pED/4<'[U85$?!^heG
%T+[<!J04s6>4=K^(rLr)%RL^06>7g+<\.bUdf?9W7"&TJ*uV?-@C2M@X:,=DM==?)#j@PRg45iK6>*V4)]<ZoOjb[R%5$JG8e_Gc
%-S&LRRse0B$o8\-!DQu`WWB)`OEb&m9IrAq_T6s'/"8\!Y[#j'*I1O3,Esf_Lq%IM`MtUhE7?\k&pYCWoLag6Rm8?n=d?mLBL[mE
%76CRe"--J/*`&V)l]>iEd"_j[PVT&9:+;T2-<Oda4pJ$o.Y^`O_JV9j66W0L;@A6&BoWgd%Zo\mlp2rgX@,$IfpdYW-NX8a*_Hc^
%KF33VE)O9_C;mK2Fp^MN8'@+%E5AbQZmIn5*m0=1$&,$C`8Zsg.3kZP25jt%C-*mP(W6>$5;4u4Q0/.aYSd"bH!nu0VDZ01#6XKm
%)2r0XTW'glBX2oSO-9cB%1ik4M2//Vb:n1*Q6kh#+J!%rZq(lW"q[UF$g<kQ((Z*6BpDsH7kV94_IQM7+\%.fJ^_L`1S#Ld7Q)X=
%!.elh1/bR]@'g@[)6k`.aD`uq0q5T7PU<N28fa@?W?SVV;nUOE^n-cm?5cD\CMe6Yiiq?\*WVR(fW5JZag8hEag8fk?pHiY&j@-I
%M9*"i&;5a=-uH#<5`6lfeIa!r8dlh7$n3V:RHKQ%80tEo-4O'c`(CmQ7'iKqaQSlo"2L?4E,[Ieo&G6M)(?bfLtHquM'^'ee,U.1
%/VlQs8=RoCMF[u);?6b*Ob%/`)60W5["/d?,R9KGJ`-ZcLak-DU.Wr@63uQt@:ZZXE>2UW0FCAoKHLL[m3?5)TG\l6G\G2i38h3=
%&AjPP&B\+2Cei0*kqL4l2UdWhC?/NUdR4E+^uA@)!#Ru<Z_@Ig>j9$A$'A=2:5`)f&S[@E==P$79!aOe@cN^p!\TV5ZVpT=OKb6=
%1,!hO5]!b7'I5C)"jebE#0;U3%+o9r0HDHjUo8;i#,Lf%:e!4jFuGg,/dHc3!MM>1S3oFrTc(d("jI#J!_J"*8fkdSeV[q8%4#qH
%i/#;`Jde<rZk/UZdZHmiX$S$15VbV;n9Q*(V?hCO@8]?h1o1o+l+k4n,$EtS59dA\Y!AA=)S?>d.A\9n,.hNJOV.e/5RC#ga\7d[
%0@C3W'F*bLX_IlJ,YN8@9N3\1GTrSSPsd-gXTW:CU\oX'%&qAM=J&id)EKQ3*d[D!5fgI3K(h[KM#`OWTVEG;9R.lq,ob<F*oa#]
%(CMF>fGJ=#l+f<ZC7H'=?#3?%8lknA&j[X>TZ#9YL)$"KC'FqDcnnQ9;AKUU;FqEb$>:3>C+:K`"lUkeA^mD((931l^shdFLF434
%)?:F\AHh<Bo,u"\AYTi*Z_.Ac.QJ(^N^LWQE]P%2*7fZ3P:DM"_%3t.lmAO$Zj%Np'H$r[Mb$I57%-`85YudS_.p*:E(g=<(_6>&
%"0b+2Pla:OY!Qi&Ud!/<nss"nQqnr8+eY`mP:H/,_k[a7[Rq&1$m)`Qg67"qfgA2Zbd7kTP_YtY&0=:ESnUuk:2(q0@[k>n<^uYJ
%AUsu;+Qimb$%?n^@Y6,&)'EmRe4IcTTVJ&7P`Q(T=i$1#`BfVp>/Mj03(R4>Og%Yn7Dd-P!\b,m*X7kc@!G%j+VkEI4t!-4;Md^T
%P*pK(E=+uD8HhHs!#/=gEg#.<TQ',["OX$%P1YR:(q-8`8l;ge5t)Cr>,2KVfTOCtWl:Z^#)"^b)D[sZ@>JAq6c206^lc^<6[L':
%5sYUq&dKoi<BhNT`/#0kabak8l.Lm^ckIltO\L(:9FKg`Jn[l2a$CYNU6/?-SjlT\;,1M$!P6@&F]LC^@^T[5C6dLhki-'X%4iWd
%qF3srM,crX:DU$-ILF05[T/V]&0;TRm=9Yj;Hac-5+hsI#tJ&!AAkbX;eiYA!.rW5#RI9?&@*.(/i#hd#`XYb/gt*c.lt(G\=Eha
%Xq!]Rlf)jjUM;agkqE.Onf('%9JLp(fn71Yen"u3Z56%W0Pg`?E-/HZQ:\n[&M>h,Sd#?3P\PahGt9<9:F;0,1(ONs$WV?N!'%-8
%=GE@JQ7>9$M.Ho+-j)4a%4kS(2F&1@PpB67T5<_-B_LC(+u0Ce'N_:Q3_2dNVH@O;BFY0,38DE'-cAU\<>]6n81sG3.'YTG6t?C%
%(d,F)8qrF+M"GYjU"KP7YTUnG'N,dm.OR%_RY2mE.P_m5>ra@9Z2b]f;G)M,-U1:TU9r@36K,^&?m-F#_.'(#&;Pc]mr:%4%H'O<
%&P#9`((:jU8"Ks%GbkJZa[qRR@*4U<krecl.+Tc3Pr]c3J\TWtl"npV"Wp<e!^\T7+i==N#92,=GX=kTM24i@MC%jd/-off_IV)g
%S@8O8L6%NJ4TGIIX!!]SMl78B+c9h\:`gCe=H(h%0`F\!<.r;*2nPg*0G$Qioc\p[*YT,cIP*A_&@QPN*K_`!)(Nd',Y*apRQaiV
%%!a\-:EHmgn=pj)Xbr'kOQQ1,&sTB5kuL)$;_JE-aBCX9!C.t%YY[cR(6>8u(+'JoC1Y%?b@6?oQ9jJ^8LtRMLs4ck@qC4D:(']:
%W6K@H=P."H%D9Mj]K/4u/@r,r5_:_@97qa%Q>*b6.=j>8kQd!!+c9hQh0_m*?F'>;Gi_O]5\(`V.SWNL)A"2/#a<]!Jr^#>\55^e
%&ZC?uN*)sj!C:?I$U]/0N0k8NWG%F6"b;e3PaVSMb.jeucN?Sdd^$)[NI[+),?bF%-'ZM>6HY*\9l_Yi=roR>#bqhP=6n9C&4f2;
%Gc1o/'S6W5W6LVH5-^(.3h&PH&dM*eJ5FDaJae1?Khc@V,W?jU+c?mgkQD[",6WJsiKK]F#*f^S%MJmM)GN;,<_?>>cn`H^57&$t
%>lhaj,%VPo(tO7L&<UZ2#UVMf'-n<A6'Oc6?CoB*XF/H),6K5[b.LP1;ppQ*:`Umc*IstYQ&#]tY!U3=Zk#gGd0,cY!L8;U!@&@J
%ZQ[lH!20WCD7CST[#ksD*[4LO2+aSnFV=drNd`*E*uG@dKc$qI[[8NP8ZZ7??m1D=.8[rT_*_3R),S%L3];?%Cij?GJ4ns;>sroc
%S2)'<'I$D63Z`TV,t#kkpco6YAOj[IL4bd=ARS$%i$2A-1=NC"%BjU+BZ2`^%VE$W)YrGcK#EkV3qB(K/I+,;1'BI.<'MMs.1m`q
%"p?5Y)q/s9W'm6.744q-&4t"h.=n]iOJ<jI6msqUpk2I5FN(ZI120oS!ueBQTTI#*&&2`ZOqE3NUm$Ik77f:#E)9ps>(p'j=pBg_
%jbZJ0ee=k'ActuZ$kOBqLpT]'S;o'.3^aQ_"_fcU$Nk?qP(Z6_J=2K*8hl",i6_rEGYSfRV1eo#^^u*l@j=U%.%sNo-r!!!J]M"c
%?mmTTAU#UrL'bZsV@*gU-:&sp*iK*k0LE;c6n9dgKnTW2^be0H2GOo3#1`U-kJ/gg#,K\2SRG.rWX:pfJ-MmG*"A/]6=I2-$m[Mh
%AOs!Ucoro/$kTKK&4)OQ$j`jiPrL0I$B<O;(+:VZ*_rC;V<&l:5\Y3J._(-XJHQRj:J*>f$O7*7PEO%BLakodNrpjg'SpQ,6`!62
%+Q97Wj8bZa9-=Xs_eV]WJh\1(Q5E.Tamc"XBZ79B6>*W`&J0OE%#AL5=@O[(d47pB(CV;o8?2fX.Q%;2*%@m(V,VsL/0&=*8:L-f
%U*Wt`%"Rio+r(,#,T%DjGj,US4q8S?%]KWoBe:;I5^5&Ja$V0D3.[rr:;Bhn3%R`q!AL0f;CW!P@$pd%7:Ziun]HIq!A?HG31pII
%7#6M8n?Ch".9RWu$sq_pMi<Am$B?a#>$uS?_?.oR5QJW4.0BP]3^-r=?0W\-$cO=[U`5G&H,>PB2T`geVD=rKP!Cc*6Q?XJ&HYF;
%1-mA3A-/S\6^_dSFAa$Oa:N_HpW??#a"dno'a%?ji@H<^aZsSG9Mh3@"s,;]:`s<4!>.XAR"[(X&B,:$Z3(74OiOeC?0^K=KE)?X
%_R"?7:^EX6dnstI3[q=381A8*,aHaqBo,$RJr_0CFXTWhoK+Rm,sb[)TEp6ZM9<ZQifb/[)H96>-;7$+>!uODf`6#6-/jJJUkKA9
%/CUX4''DX?Q(F0A%1boS>'Ztc8[)G+YEd?b8?c@@5l/F)eTNiDZ:ItN7n9-T&8&6sN)Kul!'s-f-!X]>f!HTPTZb`F8&RXo_Z^I%
%&:=]/.T7N/YtP>D5\Q:q5^]k[/0%LI-Zd(R<3enYT6(29S9R4*m7J6F/]nN3)5i]'Z&FkU),Mfe1'BT@)1n]?N]mId&e'k[Kn+>-
%5%'asd%E_1E1e'n%?QZ=W.faG2!\.4?7F,!5tT&t[o-J9bV^02<FG(RT]H8CKCbu=]MtWLL4i,I"@amb<M1_6ABG/`_3N"bPD)Fm
%ZO@s-Lb(pO]b5D'$:2tW`M+A;a@`#Q$kOPS2G=Yl=s(+QR[2ruDaEHJW)L`%R*GVG5l%15dY8MK5,htbH4^>];O^rWH)<I(=K[<:
%:iS3LdOKYg_dNYBUNtsWQ)YO$UaeMO_F$te:2-3J\]>>-<XPhSAhOdZB45p:J85>p7LhVMb#t8F$p7ScJOuq6D@ju>-;p>XO-;%d
%XW9)S3q>C@<*YhHR6YV:3$XIa&e'X!RAX'SOUWX27mX6XW>#oL;Hdt;JB/Ei'^8^A..&fi"HZ.pb7ILSO_d;dPkID](!AKB"t1,r
%8j<]S@B-")6VaW=,>SIu<j*A`J.OtS8l24+k_707kMrhaL!`DDM__LC-Xd%-nBonHF>.BES2uM$h!kE_&.*1%.YqY\!`JhZn;q$g
%QmaC!U]O8G"BA8Q=/o/)T$.1Bo?*6\U9k(Z)]T#H#t?6B(opf^_@t5CP)=ZGR!/%:0Ir1+?oAcL#:M)/(*3VpK.IrA>3+YX#(U+d
%"WPRhL4H3HTJpdm&Hb?*ILJ>>=F`cUYU`Pj-QdLr8`D]mi(:o,Um$rULs,q>M(#3*>9s7pZB<p)Pn+PkK^"Q?,it5\"]_E%PK6KA
%&.C[%\B-WOVulJtZ'#6&V'RBPiMD=ePW#U,Qpai8!g.1&+K:GF;FhIs#`o7T+:+9dK$pV`1M2=`B[n:5%#>FKQ(mic@"<?H0\k>H
%^cXq3"C]h):J(YQQ4k(S!#?1`a3'32"m46(EOdPg"<:eRYc*,(7R7(!$:fZ2N#%QbQB@+@fDlXf#"D+;aJ0UT?5X;)1s%.JBk;6k
%:g0:g!g;,*98'$[)J(r`N>5NQUSEN7)1^\eBQ4;k@7ga2^f20S=Bl.53'\%d\-<424OLXes19HB76-K1hn<rHJDeE3S*cc,g\^ne
%bib94)kmfR]_qAL]2",U;(o\p/f4J9gV.!?h.==t@r.*Mq=epY4_nMBP7+j@:*9H7RsVj@j*mr`l!/#RFF;.'rr8V$@EJ&K5=Xhl
%s+ZkXGY(rV?cW'5D8V9)I!pdBmrhu(M7.)#.<XR&P9$":"k@"sK##H*-`d\'0*hX_0%L1ZfGD2Blh_t5#Zb=9pgAZCUcL7q.faZh
%qQM:qOjb[N(`?(!K*jol7Z.@4CoCe\$<**k%lHqcd*q5W#6ht\2BgQ^/ecuUL(MK=3%0uDPbKEaQB=?D#U/CY<XP>@!a5%rC$DAQ
%4KBAC'IAJJ`^:P)*s^RTA/1MeihEe!dKUmU%!tl`B0g)a6)fN@1t<!GA3rsAP3G\;RPC4,PY`-#Snp-$'c@'DB%d>eM3bN6OMV#D
%K6JGW@];NuTJ/Dh,8@mHTXSZ4G'7o0[K(W!k4Qh1O%6"@iGbWF7;Lj^Atg$:(p/t_<XbX$C'Fr7R8jWkJ654i3)ljp+Q02c<%>Mc
%d4oU;Q)]?<FeSoY(.9t]"<Q,A4do<IjZf^^+BXds!JHSf:M(c.`[jnO,/=Cbn,R/`-R>At8]DfEngKT_RK8!TLXW(pb7@m'L_)92
%S4LT(PmeB.U<k9RTsR4mlib1i.L_']$kQsHQ'E$L[?*+W(':;9Z@]BTl>VYM=&rE7=tl>!pB%TV7k2t2AN6=idjZjY=?+Zn7S;WM
%&<X4c>d<Y3FZ.DClBHHH`$.T1#c1''1f?mg8R.K@["*i[_NYBnb^kWTM=XU&T_`-&$ik!$,">[PPnE4hnW6^eU`fgi+o0=p@)s*O
%53ZL(66ZOJALNKJD!6hO+&j'iWY^4eSrN)(_?*)XeOSn6[+M3MIRXYq,KWjQ:lNN6PmeoI7-PkIK-F5kGU#40n5Z2bgaY)l*i^3a
%&"<m$81;.kJJNObUN/V4l.E(/"6%&r;#h6e#pN-"5sS*7!%fjcr+O1`JX!0&NYdF+dAT<T/-q)jK-\>D&e'p3<C.W9"At7ka<:B=
%aq-u\?DJRDgi-h<cr"gE.JUts.>X5iJ/3ErU]MapNE4W8BP!Q._(]F5XmE<WKqE-(QB@h$%'>Pc:h<a:!#>XY1$F!C+P7T3*1rFP
%@mQAgM5DP]OBDVf5UV\,5t%B>6P^ih!eCnL#TY"hJ0YebLjUtS!i=G`OC:U;UPHu['MOTZS.?rnW!il!,4]+E*+U0#7jr=1RhkCe
%k[ko76r[l.&AlhZ$A/tRLFWa),c,?$EK-1cHp/u"0JX4jD$,q\WZP)AdRWL%o^[r;T+U>(2b#nSPU=n\d]+0A:b&H'"?/W(@-PU%
%-57mC)+CTZ@7(_7+h1]]GY"?0aVjWQ+?`g0b@>&9OpU?;%BW;m#/Lr!U]M>@0NIr,5Z!;=U8=%cKagZuV$=ZMd1s`T,4iTJ+VLgY
%E_t!\!D-h?d?@?rPlhR%#a$/l1/MA_'a>A6'8qMEK$PaT][q(P5Z@`L%]P/e(bJ6UW*g2h>!X<j4:s"caq.Da*)LlPq6[4hKKp/m
%*^!3eP:E;mbm$$DLFSe9B9pJf@R:)4-643I+L;DtCR0SdLl;E:d6g2CZS(<j@@OW7p]NjX(`56YK0!QLn6hVk!\NuI#fL>=5`7`q
%TLBodi,#h^N?3Tq_[Hjo6W\n-;+'BoU!Y'F1J(+dmmW-s-l70V+qKHZCH354*7Y%>5oe,d-l@b&CGGA%M&(AC_s!B=7#O/=+&U*8
%YDF$?RR^m+5c[:NAsEgY79#+OU$@H(;DOV\J0$hS:Wn6NK.D\"l3pT0$9n$rqk/@0=sB"t`sDl=`^8f5Sj[6dUc+^(,-=acd(joG
%&6+3k#U3N$!DA]H!<UQ(UdDqcYV7WGJHnW@)'F`k&SMeKAm;2h7<ka5M_n=(JH;E413kQM%P!i7!1VI>&pceN"-Ul\Fs)<'Z2rs`
%$*.GNd?1EL$kQB;ftm/+mAHcaecJbbHmFT%`1aF9?tp<i7AQap!u2)i:pD.29W?:"#+.[?[s/l(-.-`u&r"Z1+Z(C[4CH-[8#eN\
%,to-%dV7b&b(g'6LodH$@+\CGXL&-:,G4UeZ2m31?!&6>A@IR]%k4RkA69ZK`6e^H(IqIEW`WlejaJF*"<:)SYCk/MZtO+a*\_0!
%JhTVUk5`BJ^6qfS0!^BNH*Ym%8hXL767H[S#X#0L@.41$_J#/p*)+O&"(>A,#2!<Q+U]Kd7!NAK,[!UQX,oLe.1]/+1cSl2johEs
%@PLPL=9V'S-NkV\JbW.Na!X"m#*>kC,>T(+%aTbhBi%T_KLZ0`d=ql-=`OdV&P7_8=D:nf9LT73,3.kfkb1AKn]E1>(04I20Lbb-
%E&P>FBZ2``Mpu?+%il0\TEp806YIX);,LmsJV*Op_U6n@PVs^p;u.F'@j6>1R03Ld10PmJdo_S&j;pEUgGrDmZGua#%nAs;ig#LT
%0Obh,&]9l:\2':fIIN"^!h_t'Ck68q@[R94-'>)k5c#>@=C=jBe.Ya=nRrK&:hc:Zodp><(TA/^$B9aWTFhq@](*-cC[g:>M8b0C
%+rsLm&uB`t,,pg&5\(N4^EMT/OQKP6)(M>OfX-EG-n6."!Q5$`is\aud`I>sQ6&G]P7e4U.;at&'S7bT;2[r__?SILGr?M#BL#'F
%+I/HlR>?5GoaS)uYaB[32PmI7#ms)Jid`Bb&HiPg$\h4t4>&OM>#M4X9n]Ta(54L-d$+r=8qpr.J?oFp;Hm]P'\$Me;-It<,-jlj
%)nEI,D(:2.:]U`#2I"#Wd"#i2e3"0l9pA\MI4t\Q.'6ldX>E3`Zq)Gc((f/MK7F`:V.rgM\J>MRg#6=u;O^Z,CiD3S<@4aVFTN_E
%&6sXj@TgVObLG53.F[cY9SodUda9sTW_AL^\aj/Y1cUp)K$?T:"fVQ'U*Ya*W$8!5!>_d==t1!>?>5L@>,2TsKSQuIa?WnI1//B,
%0[)@Q1haem;aO[XNru7=$:IqB"X$Db(_@#/86fshdgQdqX5hHt)'I#!W%nE?1tsOHQU]sX[93ZV_-4%-c(6[?/rEV@(IUGI!$fZ$
%=.25p,FPHnEdBtb6\j`S@>Y5AdZf=i7m@js&$#^d"A^LH-P`Wa!2MO-ctV]?B5(5"(J6J%-uBbPo!F)cl>o5m;Etm?"/Gr$!8%>:
%;ndbeUB,n0grLUG,"+UQ(_+[nKFpH^j(&Z@,6o<DB$acmf]k_T+GeuT;/3?m&/co@/)Y`WCqW6<o[$FmTFiK0$43IP2_niF9?E!;
%0J!Fk9oF"QiRu\2J.P]%ph0uq`'KNbS;=Q%]#\3Odf9QY_kE1/LCn.)T8AkIeL@0sj9WS"#\AZT'I`or#>@^"`%m-GC9tYRb*0::
%l3>*-L=cYsbl@c".g/WNZln4YUE!.1P:I1W#?5A-8Il@5V);D33%bUE,["Z"4t2?d,`+aW=q;ngYj,&.Ss%(2.igfYZ#%omg$As\
%@j;(STtsS>#QZSIY_C.A!)NqH*0Xub5f;TVUsj>77A/F,2$sm/;?As#1_R(udA@NF-nP]^Oh-VsAK2h%V9DE9E8gk[YsJ^QW<8iF
%-t+qXNg>?[TI:1t;@'$,&<9^6A4QnPV&%4rAd`]gP=>p30N<$(aAU.^$:He&#uHkV!TB4iOF4i>a%nOZ#o83?W0>ZWL;bMR16gIH
%PS@2V5#.`)O,R2,)KCiu683QY`&t.!A1;*?U&36"LHts)dSYh]U]?$\KomF7d5%dpLE6F\[CF'#;H%G>3$<uF+BI3/(Q;ABTqV^C
%=JdjM2OctIA$[J=:^@O2[1`\$4WkVo%0]3t=sO7ZKMOc_BHTpg"t(^P'TJCn8*H-L#-X.e6\gC!Xp>"mP>jRO+A)aC&;Y/oacqlj
%#7r'2>#klr&(8VCAk<5ud[hjB*3]Gu.HQKhWH9h&Kchfj`H@:3J>WLt8g5Ot6W43k5,8b48EKp+i,E8-"/=KJA0)=aQ5jH]lN#iE
%e'X'S2@r'?!bku//dqt925jt%KYhW8d8t%f&4'.;!'rQ!HKYHc.$fQF$D9MQ!H"!]dY834/CTh3>Ri_3+LB3'/&MB&3*;e(5ft31
%%1\2V;8MnB&[QF.[B-1"OAJ+r-lp*U"![%r,fE<WP)q"6ZrTLa80/"dQUWG7&=I/2%#.3%3^PNsi)/3l<!h1od'Ua?/KGEH;MMS.
%]g--KoOR6_o[L]#5mA)6c(9<mMMsn(!`9"20VKn/"pd[-*&4?1"]--j'i@WBW"X05R8u7AT/9tU>a`8+WC/0`Ct=7O0R>tqbu.5W
%;ED\Q:uqu#6Br!4-/jGal+gYO_%O.`QrG44_F$C.Pln0+<ZFhQK3/>pL/68@4J6@R'[&6k+AroWAAF3:lqDE\Jd,d3H[&(u[Y#+u
%5nZQ*Z3O<@Z_[j=M@P`&$n*>?BpC3B!.n+5"m_?\*#&Q;FHs/sd-'WVA28^6S1kM":aV3t-rej#,IA"YdmlU["fiRtTPOsME5Bo]
%E6qd_@p(>4frTdY5)D%?Bi[YGMT@Q3r+(YLWdGd,Gt&5g0Q^EBC_g"t*LaB`Afi"L;ikG9#lmAXG#^"71]ml18l[@R<_?"/[0(.f
%2@C_eEZ.c7fEHmuFZ.u*&45l>C$<nYKd\._58h6;%fkNY.NgJWOhgHoJ-bj"`JVP`>7+8s<+*,lfbDWka\rHK,1@[nW7D!&<'i?J
%Lh11c'OIJaUC8"88IrbVJYG=>6I:5tnnOFN,-AdOdBOMu-1LC)/P"8*6DoM;-j^0A>$/#*'FkTZ8q:)5[dcmO?q,nr8eES-&/L*)
%3cnOn`k!i]WC1m&8Po1-9)D_K()SC<Mkf`,)9LU#F=>3%iSaV]V5YljX?gAPEq%2)'8\(g$:l:mLI>_^a6Ad2=2@^ETo-ofE(+<f
%!7<!Y7MhQ]]Dr>&Mm4HM4A$Qdl&]:#UM7gQio6.=&BRQn#)%eKK#+.[.PmgAHkRueNBmf;'nRcq5mrSQMDQ_+=[p2&%sZ6IBXY;o
%Jae0r)_M@HV22W:[#qTGdtTB=;66)B,K5qGN/B,!5Qm>F'P[m&9Lf?%aor8U#eGrqWIuroP]l^LT@=PPUk@uX-tf8#o!"4-UEXlt
%O;G7V;5R:GbfD.B4sUIO$p=U+'[S@%$RD<KPL'C]0W60r:^A;3ON.\E>!(Ys`[f^f'S6UfO3"XgBWKo&kg0_LJ2BA0=HoqA"+>@/
%@OD@+,S0+gFJH-=+e=.b:mrgfJ1.+E:`qNS#m3jE"Di<S6W#fMb!IPW"@]]=")8gUoXl4L+=+lt#MrMW5V^\2OZ#01ZsZ4oiKYu<
%$SYkZa9Tr-*h(#-GW>3pRnV2%N3#j^8lA9=.pmo58f<(:M\lecU)7&fACZfT!@'fhi$j1uk\3BeJO2^)6K;O]#ok/f_+A>B-o5`)
%PcDqgTEZ3!(83usjf2:U`9NTo)O(i\_@!+JXA:CrGS2dNPmA0Q(7t_PYRjW/6OO;Ab"1*h+S&*_#1j1o4:<1Q4M"Bud?).C7`3W*
%Kb]J]JC[)G,iX>K;Jg@qkQ\nT!#!D18(CN,d3;[\(""4$l@\1jO@sZk1sLlC>1CIk1DD2L=?rXUl0@pj+dmR=%X>kSLo`p35uDA3
%^l^/b5i2Z)5`I[(T2aH6EFhcf@^?La'3'i6oLT^S`<Sh">cApT".iUD(8!E(CiHaU(l0";@[Uil!>F*n\NpqQ4:7/c5RMJY+I99%
%c,0<&8S!P'"k"caD1HS'EoNh#,E^=TMGbQZPdJfBCh;>FiWj5)%jnG]k27q_eI3"f`aZ;*T+$i09+Zfq8rI-jq4pVNjHH$tN]ka>
%Z6TK<.B5,$*&,<mWbe!,TU=6IifaeA:2(Rc16&%MV/6kM,#8D09/_`8WK7=hb[L[=ikRMk^]@FTY#s8JJ2q&B>cD1h,-mOjiTPoN
%#_KL!4k)k3$GgPq5kN/0Gre2i001h`.N(%:aq2$iLn8uZLHcr0dV/[]Of<[9@MscL5tM(]'8-Ai-!IV<N$C'5E.!hBK./Cle.@`_
%KGn0RJOP5_.'87O@15PmFFXl;%O`SJL5ee4WC5aA8lEalad,gl7$bXi^aiPMWm*.uA2p"]'dY,cYs]o=A-ueB!X"Gul,!#.Ussr#
%797g;O^)=V+A*q%$(8m<-qYU-0JNRF@Rd=mVD_2LFGMniO]j_4.'cdk<C/!8>'[K@!0EkYP/YJZqBX/rJoT_q1ipO0e?`";Jg^gD
%<MCa,&Qt%NN?j?/V+MM`dfZUP198V9^fp4e%j/Tl%!3,ep]S2(WP@YY3SUSqF^B77b1\LO\PX19ID8e\Qg1/+Q`0]Hs-qE.gY_2:
%cJO,?Co[JEGM2HL]NZ`o&==a>o)!O0mGF6#nR]$jkIA2unih7MEkg`N&R@>jml19sIa?jLeJ[%OY3'e#T7?`@=ZbNQ2S/Y7[(SKq
%j`?Gb+1<s$Ao$IT?@U8L2:gRG;A50m>N[L,HgSKe+F#p5b^[k3(Y>hfh9MSGlV5Fg/\5\D^Q8!J^>IQAGC\V*mp=E7[7%a51S_Qn
%r7CRFT<`LO[`B7c?$EK`fT"eY\M(_lU+<]BpA@\9mVT+dXuZ$_Dbo+>CMNT&>YXZf<rStSaSd%GF.`C`h0j@Xr#Vp9pMR0sfsu"a
%4TB\T\\"iiGK8"*]56iH]DFBi2J$LfpO4!Bh90osRX=p]++&'8s2ER8FPEBghqPhSIXKE97CeudD#IPHO-aqD>HTlrr>d#*^#%>S
%(LDQ4Rd8UOEA-"Jm]*;@dT,*jk!s:cEZ(M<!(#l0[E^qEXnh)T93'_`@q'=;FcZ-BF/bLM^$LaoT=[2(pCG`fo3ntPo]B<^#Yp`a
%pR8c=1HrQcs(0Epm3/L<p[>`*`Dq'6h9`iWM3%8qqK&0pR+g9!Vm^43pq42k<o;q%o`"Pd?&3PFrug1m!GYX>I;hBs4+@5.n!F]N
%>ns-hG)!'hpS5?;Wr4n_T<il_NVfkc]6;Gm46C/,XYIG;EUbKl[`I]NSRQC/qHDnXRS/(Dqd0";\("KbW]n"KWgD:QR`aqQd9EX1
%bAW/q\;o=DITuQra,&MSZS;k"YdQ!L][p9YdZ%2uj^8Q&;[$kO872?]02)R5-4C%JE\[+i$sgq%l*'dNs0?b`f,p_FJ(jklrEUoL
%^?;@TlHB-$cF+#(II"kanNGJ=hqPP\H?l%Yma#VIik',-VjH<0D!629-8'3m2cReFD4FDX1;9+/cJNV*5QBoLlFcYX-U6,T%f`*K
%MkbXphXg3umJ6NY=neo1maZg$aLogsDEn.AT=aVd:NZX727<<-]='eF0@`5Nl[ANa]CbhurLYJ+5PF4mo:+W%ht6+#r6P=G](S2R
%IJllVFjIaDlYfXiZSqgSIX[^\E#nXarq"pbf\4'oW6N$:B$]Z6pZ-d]YDDYH0=;nag\:W\[HkfBB)?AhoocNWP5@7^]t`=J>JIY.
%n!ff;,C]JVr,-]&?R#BE-U2e@cQCuXdnJP=DcOE_lUCWCmQYa0VjH$(rMF=M^9Y4qHML$RO'TK;D>9N;qu+'He,K)FhfJOh:G6UV
%rl`Q8T'r9;qE=Rjm%/"5mP1m)p)`h[p[UISpI>.KWQMd+R/"nHrd6jhRGD*An'?d3r1<Y0cbIW8mBZ-B3\*G]h8f;.o0%#.h>Ps^
%e&ttW:N__h5Bl9s[rlolA`M+dGH]=O&TunbI^Zi^HnVSi09`m$lU@0>r:M?g45Fc0n+SpbT0;rEo@BeB(NuD<*o3GA[cNgIc-,G!
%rU!h`Fu0*-`rDF8(&bQ#HiBH3r2t6J?.2U$J,VQ9CLq/8rVV*DI*_E5q/^s_2-i:lSG8]E\mp6%Xl'!H3HY#Y^]#:[o(MD35$bJK
%I-[DsRLaV3[JB!h55"*lc+U]"rrd$@H)]!?]`YtI#BCp3+;[*E;F^TBNtCJ(&]'YDFT&CkInSSKD;p"p!-LjT+K.R"m/:g/VYe\V
%a%[S_?`+_7s6]`IT5e)%gV_9Q\'6pWm[H<4^)]9rkOugUmX8h7fA-0dk8q)i?+5%'dCW]Hp>bi>:1&(/ESGngQgFWaDI[n6pIEMG
%eWu0HbF%#oRjKbc5&Tt-lH%/)]l!@$AhIu-\,DW-h!3>H2Ig7[VZ0HJ*H!)\G.k-J>Arm,s3>K]\U=7EmG'keJ*i$9q>N>9ql]ae
%bP2%YD1B):lMp%jVU+)hT-NeT^@o"us4k$VIEco;)s2K!hp\I+qmB]gIBW+Ih.uld?.<`/Ir09*?(Gd/?Gl6_:G7WdWelQ".I6#<
%g&<ksF8rW?2<UQH%_iTqS%lM3:\Xl*S+ENoLTZ[$YKbbW\+c=o;d\:)qkoc[CqU:e2=$u#`.*WuMYYSB?*d1)J(egF^0[,_qgRR@
%\XM@QqqA\W+!7\%[e5-JNrQKBV`M;i\MnuNjSsQbJ,/Na^%Tq+YPSs[]lqZ(NSaO)nlhqP:Znp@kl.o\5Aetfm&o19IVn3/o\JF)
%]=*.@]_gED?[?>aJ%En%-#_6Q,!'%Qr15gXk$IX.J\KTEp[u(<.R1OGe9Cj2^T,':<p+SpTDKtHD_CeTNc/:^C3%5C%Sbr(GMS;Z
%\4o6p(J\RZJ&n35;fNiW[QAO[4&5//\,Yg;Xuio%<7]U/gq@USD?%B4DO\kNaQba+g\6&]hkfX_l9&GAnioisaf8-@VI!<X4nl=+
%rO)Y%FjKNaBDclGhWq)cm@giGmc@F:QFQ:pafSi`C8UD\`qSs"g+AlTWnZ$(QVDHQmVTOXm<(4sI]hIE>s&'ekOP+RmsP\8=e0>h
%HdR>0cd)(@`_J2_oY("^4C<0>QX"Y)kO6C@:+uJ5)cq6k/afGSoART2Y7VfSG<=,ep=J0Al]V(to=9(3Wf!-:J*p."R2,7+kIYW&
%HeDKeG1u6+=n2Mn?'cMj?J_F9G?^skXuk24>rO8qkFN.pQu)Bf,<EPVr-m>h2LYUMh_jRrSMhh0?i9Yf^$P4:OgUn3Dgu[)@3\79
%^@]]U\!kUuB'-j/FY=]:3rN(N\'DPGl?eKBXo%h&o_r[0qVJ8gG0]DW&[en,p*Vc1a5+>FgRYt>r0qc:bFd,Z>[+7P3dbl'qmO'P
%f@c(MDu'&^4*@L)^[8&)nX\gkFfWZ`XspD0k.fgJhY1+E45KMrEiVE[ls)J1nnZu#dGIm3fZsNQ[6N5kmSD[9I#j?@Nf*f4T"<J(
%m%!Wnk/[E]h0[A3qn00MZ1H_^m%SE.Wo>oY+F*F'NrJO=niGqdYueK4e*_^@akH`#o:OM-qK&+o^P^?C\#haR>c6i?27ig7mBF!=
%3kJtdr3?(HFT$<RoCdo6s51e`EM*!5IX<aI:NXNkkj"b32nc'R!5XTHh`cIDk\XTYcDA8@FDi7Jr>XXdC[HFfq<6U$cMki0om<]c
%qlS$@hB?cXs%'%`6QQM,@A)6$#LXDE80'IA@F&B-Pp8op3P1(B>X/8/WQmZ4GOd[eolQ5KXrY2aC2:P-f_R8iBesM8Is9[m"*5:Q
%441H[8Um-)3]$pA&KR;@!g^qsq`1t2%S__uUql:r17@"H]-V+o<W[=4YmQ1m!D$l93J"G=)0`PI-H9fdi`jEX6Lg)niqrINdp'g!
%XQ9S.$ADk80if\:qtS4c%^j"4f?CeNg2N=*]B*dS<Rq-1`ogNpX1%.TFJkP0S"b?rI,!>8hmOeYnZD\+aT^;pDJMsArdTs#Z*E_N
%+1pEXN`"R.bf4LLNq%6t-bB4Mghfj]o&s1]?h8\5m,n6Gk(^JiXgtCBmFnU)Dg0@hG/(HQL"BVF$",Cc@##l*%aoh;8o+]K82J=q
%I_QrF2CcI+G,"TYDX[2I5BFHmB#@+,Ir&K:VWj&/llIr%UP[tpHMa_O7dYuW0d$6jkB1las7!^.%WhS$It6+`#Ao2LLgdLjEJ&d$
%/6uWINo-P)]%3nG]8QKR^)S8?27%Y)k3?aWo!49;s8R5LH0Q^5]0DkSIriq/]'%j[ZFWh[qhi[uIV[71K%"d0pA]lH(MDnd&Y6[Q
%ch!=R:Og!!]fjk<5OL:UCM1hWQUfs4hHYF;q(pq-lak."SE;:[I`_P,q]TQ1rbTWXmd8c;W>EU6\VuB:m5b.^Lpj?+m):)K#jakD
%O$O.X"tcQ.4"'ChKoH"OklWC$jT=[.K0I5MTFV@fs&a*hmelV&q6tQfL_'$hY1r*,RJl]!HFER9mX7:mjlc%.SU.2\9@O?M^[pXP
%gfpdb(*2i/kHDQNl@kedHMVu,gZnXqLX*B:l=G>BrHY:o^Me@2G[Z$(5@<5&SN"2Dgi%?8\C98Lrr0IY2ne/R0DW3E*'%4B?MpY/
%U*IBIf=(*-^?p-5Xjs8mS$.n?&/T$UI=PRYL4Fe\8H6Fg>jj7*!sB>@"=<u+mG"hTFhW9"flb'Rp+LQ=TKpO(i0#06+"./;:p^W2
%#(R(s6`E*,D6)^K#7/C6quHQY)>*,'K#'L$4iAM.=p=s/5^$!+XIuq"A/?=1pfn"'"$((GR=)(iTR`P7^gJZ$fd37B<?J)*J#S=*
%M;P8eN/l<]U+.Y$rmXa*p8P7cV`&#]e7O4/SGLr4p%D:SQ!<!9eSL3%<o;YXHJ<VEX"Mr!1-5._gS$ZMWS4>OX]&0-gZ:W>eu>(@
%E@SE@`i8b0Z+<.hV[Zk$2XF/WIdTYf:Np$8-83.*a58ZFAR^"VWQjkd[OSWTmUg&mf(WNq`74P&l>GG,Ao3phgrc.Rc?9!P3ITYW
%G?\WqbG^D;q4[XDjbMQ9EJfbDdnu6)OVJaV[Gb^b7ST5/G>Yj2.V^kHe<eu4>G>kZI19%\]cl[imH3-is5-i2^[(p3m,mrP]iT)H
%h`H6]hnO*3mp!QhlgO*8D!19eh70W`o=!5:Xjt2:?ZY\-[9[9bhi5#_X*aTq=Sl7uqtn.upM6hRbjW43mdIluh<\siqh`r-";Ud:
%l0I[$lg'&'qWbQ(X)"d3Y-$jL]=*UaD=u;iXla]Jc[X&4Po3eTniK(Ff_@=OGAOAUfN>iGj5]GU2Z3<1oq0"=qX5Nl^OPV"1QgMF
%]tN%o?7U27IGJ(tHFmrfrV:5(h/iF]H`jQ_Vp:cYmN0+)lCP&'Y5OscHeP%ZR-_GeheMKOg@)FV2I(^S:E*O+C\tF!mW36UqfZ33
%5$`T8g31*mgWaU3G4huO?%(%a[CJ(TB5GiGfGsark4Wu]>/0^\N/d4E2YP2b]W^(rqJ4FG9te;)X1P6h%<_DPs#9;WXQ/nJD"lf7
%\#!`8kJNUWr`V5VW]!:97osQkhbDMiS,U=La)>7uH\^>KSSHntDu8>!eb0tpj2Ud4B4H/Rgp&qY]ZhJ/F6DuG)`sDa)L$7_STE)e
%DMQO/EOL&T>.\t7XkgG2f'^")480XTG3mkd>ISKUZF=/LDI'\ncK`oiD<gc.V+\kbd\Y]a/mZ&)l1R+uFQdfc3en/M^:S:?^#&UV
%mJjTWmCDps4)SukHeBIKL[DXa2tuI[gO,L&2ZIU]rk:D5hd#45o3HagH#ni1:QbT9kEqb9D/Rn;ClYh^J(U9<rOi)GpA<G>?9`AA
%hYLOPG3d0(f%O<8ouh5Jrl4CardE"\cAhYU-@7C1a6E$Idri@Vl0[B<h3QeZk%/Cfg/_K+[XFU8XrT%!>LhT\IB:$4o_YaPFcVqr
%VSbmdfWqioomc2XkZ6U+kIOW?7d#WaDYa19\T`tWFaJ;4Nm:l-XlJcuoka[.c<ig1n(V>gc<mSeO$ENH,<"0Lmr5V>nNF>$cd'#s
%4l#/.am*p(.lMQo2`EfW^12!Igm@i+j)h<gRbqn.ge?PCDiWXpR.(!qY;pdl0\u;8f:D>:*O!1of&lUMZ>7JBpt[e\YB0TrbBM^_
%rj4P4X8h50f'M4r3u(ukG3f.jYAlJ3GPN0K.snkIlg+E^dj[=jA*.=rgiMPrgrdlZo<i]sj(`@!D;G-D19,\Vs0?e1jZ.L+O.G^m
%1:HVKD>>,\>Q2X5fTuCRIoBZlgrddLkh=27b3K$'rS=uK\Ws^t[q'Au/X\\a=*LoR12:=>/X\\c>Oq)tr-m8+1\(:@CWOS641-5M
%@mg76mH0aPg[X#O48sEHmPJ/"]lUCU.V@FQI-jus\c"R%Fm(ef;qpabC*IQ-DY7%*b\Y%Tq).Qsf5FqYk,+[cG40:C5=]P)g>D:7
%488[Pf<ScWg\:?j[Cp.dFY3JB[VlWeP[Ju^Rgn,c\_[;Zm&mmIcAR%9n,>=BfA-(8cg0DWHeoffHgBeDp6`>^\pe_gjlam6e,)/Y
%'tlWj7CaLdlTY?gl^IFRF*!ifmWGMs)dbM[f/hgDDKikI7+ZUSB6%d2g20p#2<VsM[EJ:a4)V[3Xk.]dF%pj=0?L9.g2t$C.J%&u
%h=jBdm6#MI]d[TDbB6N>0.u)@92<]L\aA5.](R%@=g@k3<Sb<d5(EA*0fQ!`SR6NS,s#j;T>*nZ<nDA_^XeJET/1e/kE\'Y>N`HM
%]KGn;]%5PRo?tsu]:?Rl=PnEdAjkgbmu?_E)n/nXNAWrT4)M(&q>0o$YC:6HkHMY^-(jVsCogG(U5SGV2C<J!B6V'B*BQ>^hd>Go
%r0ffdY1X<>Yr>\'rYXHkG?*>p]@!*_?='@@o.%(^\utM`j)+4leAV+IZG3#9lMEd.]%U&S?f0ahj(:r$f,@kj;fp:1]%d4Cg\TB=
%p<uFdjRi/Ds.893LAL>Bs1)[bD5`<eMleiirRfpalMGM$koMX\XuB+'m2t05Apt9FICI8;M#+W0TCR&Mf5A7VhE>cSgHH^*qC8rR
%:0#Tk?7%SAVu<0Gf@t@pq=$<^CL3UgF77i[\(K@!?=r5(f,hQus6"jo[(Xe/ft%+S@=.:#Y>t>Uqu-QMba8,dP?gA%s-dTgnl'\W
%3QuB4\XDi4R2_^bms=GDmiNEMT<G89rU6k0Xl&R8T"\a\I':(&Zar[$ak8fP?i,2i`g=4"/sDcsAj3-mh>Ptd0Cg>L?H:=cNq5,p
%XfTb$mY\aGMVPqHn(ML@VG$WlMZ9,F?fl"82EKs^17r1XHb+'pH/[lZaIJY$&=:'9i3MUN\[c"`Mo.sg#YLGMMqUrCqpG("J,A(e
%%hP\8rk&$ePmhGiqp5RoI5ljc+0m"#f9_!">Z5"u;qGmcbs_8Lkh,*uR\,P^mTdMLkk\RES)YjlEc8]Fib*Vjc0OWd3VLs6I-6=M
%p7JpNM2JKBEmrP*jPEjQIc'PG0NF`,f6sgcd]L!6c/C]Aa3/KQWqRu)D%F*Q;;4H]\c888meNpXbI50qpoM"$bj4!(Sa;g-??0E1
%/UoE_HZ].acecp\c0]l5Ra1kE_q^%3hHOod])MK>?!k2:<\K<u?"7to]3faLlghCYHbKCgH+i5^aIRC'd[<DhJLnmYnE"[%c$VZZ
%c:7cPNN'&:10'auHMcm.Nk='6\c1I;%_oQ`(Ou4<T<:pPIJ<@3gAuoTjW@qZVYb/HG3u8iHZ=4V`IE$[r8109GO@4>Aj]Af9\eIm
%I]3.2h(la>,Hl,ljS-^@nR?tun&+;5+h/H]>iuJ\aKQ3%HdA@6?]a_l]DG"ZrP#Pq^31j)m+V42:$:rPU-h[OD!J;dpV5QiVu<a^
%rn=r$Y5ap!ST?EQ;l@:rTAH&4\XfV$2Ku:L[D"iEp2459j\=WLmkj\X.f8eF^3bd@I6M7]\pM>"B?ncB<S-rdR_>0(ht3+P2-CS3
%.^Q$gqKL\3W2T[mgSVD+\#-W]Dr#R"=t2?!]B/eN(c?_ICK58t;mX$4@dcAGQHJUj:Y5,P6cETmFjIJqbtMJ_mbcguH+%q+ll=Ip
%)ku)Qm^;uCIP5!(B/Y10:Qb<+4h9feFmQa.EI6IVoej/Iqt@8e;ocB5ppJ]ana3L.kIP#i]B&@'R-D?03VUrV2>t)Y3L>_4qg!\N
%bOg#'T=`@mo\B/$2*'F*p936=3pcU/mb2Up?SroiGLnimSG_.<0_]iUGo^A[jRh;pgcF-EF/JtQREiOLl*jF-oP@OQ7W5Dg?XMFD
%[SBjthq'j^\[UnSo6GPW\$gaDqJBU>e\+ZFDS=08mQF6nDll`thn.'Rs5[G:]+2A_14(ZeqI8L!qqQ>\c?Z^18M@8of[0FK]bB43
%a2R-&m)eYV?C5#uF*9&lD.fd5>jHIOp&@_;nEoiE0<4KPVlJLLc\]<h9hX8I5&I4dao'uJXdL:1ZbEkVmcM+Xqoj3]]Bda*;r@+/
%A,eSppU8sp=%7DZbt[BP^DFk"<*oRkch@A$[Tia2[sQHbY9g>mmCh=VbjJd8`p02!q<sdOZ=@>j5JQojDjC.+rFY5!Y/BD3(O(`&
%)ZO-8H]%7URetXuW6REbp3qK'?WGW8]taGa5'OoB0=RG6?BUjpgp`]mq<kZ>r7B2)o=cG-2Y;-@bQ$j4ZQnWC&<of>h0QDRoCI!C
%j7B.i%ia-2@BrPmI>r`CPMJI(A,eW6lE8N9rFnI^c1atOQnP*3FZ"H,H#^O2.^-G&L\_]hY.!B/htF'''qN#u<I\lSrcZL<rT/BL
%f='c9U3!9sMu+DW.WW#K]s+QPkFCbnkk[E.)h$VIoD@)4L\dJ*?N.E4^YQ.RFPb;clu*u8\>[>"`oO*qQ6]$7ABZbs1UC*Q&HDe2
%0Fj$G`3T2t5.Ut5!!R+8/5A5_+<lu+7hUA(b@)6@0ub&@O?q#3K?0oL!BK3B+q*Au_ZC65-n$GQq3_89"%QQ'"N;d&&;SK+_i")i
%OiJW:R:?.o)<C"C$Hj$-OlRs1#k9JVG@g(.Hl&*5;8a*p%1B'FinHhV.!Q2$/-ZPRE8BA*I4aq.\,GX3Z_-dafm"L;6sbiL\qlcJ
%+<ahDfYu9h!.t\U>fL*I$I*Ob#:`cW-)+7'ka*_h]*Q_VSB?WfWHX#Y/;^0imc:Jc8L^q?1d"B?r[LiN!knpEPPP&A@);!<a\OQH
%#jVol5NlsMka@goa]'&&Dk`h>*sk2\G](6S-#"6?kN][TM$,)+\NM/46)YL5,eI/X5SV]lqJ0_3/4>J*L=_;J:5B'OUD*eb1I,0W
%<,+1G<F(sg&L*!G!s,@Y[i.Mu>9X=U%;SJe"QDFM^bihI,-lf=],8Km*fbW"Wd>'.I:4Gc5ttXreJ9J]mAGMUHUPq\GiFQO%_OJD
%D\]XW`+U\!,JbcBfEi7]kNPD=g%X*dlLsR?8?p^73Y+dDONJ1jZQq&7hb6#rn0Ht_,1/@6o#VX=LoGp3'dT08G.DBJV8Ye*fcZl!
%G08KT^Kda%r<]l:f-`EW9ka_7`B*1Y93)@,c?g+g///7=prsi7qaMub?<=2L[g<]-oW!\W@fjeV(XgeRPcr2\HL:c'AlG;nk#*BN
%51ROTXq:3iJorH'T.,a:f]I`U$jZ6ih*J7j(]#f4IsW=sZkYSZ)-"]1p9k@>eP0Jh*mc&u\i&.#>lfidD3'*0MVI,o0fC&:Wd4Z"
%Y3lVY":$.C2odj:0ubc"S)l(U,Km@#dlr[?qoG]XC[O"&oRPeeRA9*CFt^Qhr`0`T5VWK4,s)$AJ;=\6e2<$6p=Ml*$Ccsip<Xog
%Z725U'S?"2\_=/]oluHu1[YXGmn>*5a1#MSU?Xl2Hhh)*EI5K4<tSk>!2gZa<VFmt]3GrbCh;-haLC4Lqq*^;JG?Jem=g[ChG>]&
%_<f,Rg:2H?$kW9Kllqq.hi((:&"J]60-Dq=d\?*&c`Y[$JHS#ulOKH\]1QB6Za,YNh4j1!H(e)nAekc\q3#<B^EFs4qO6lJE$:6s
%gfa@!g)-_N2g+C<,cfIp"bhMCZCQ\TWc;oP<0#</+F7C!CPLVo+'5cgmr+>bfmRJqjp:Qi,:D.."dW,mPTL!*gRZ"QP4D:Foa;s&
%+Sm<=DX<#JqOSPV3':LJ+`fT;%4nXdqFS56jmilPfiePbUfB"M223r&/Mt&SWEMY&/'_"Oh:@D/o9A%l%3i[$c\2L$(N"8:F/t/%
%kZr+GVY]LjEFYn6@4f_k"^uJ2)Q4Q5+Bo=k3N;L>La3)Rek6H6aXIi&ML0.iQ`c*U!RA6-1irk%3?G1(d'in?i=.8)1MBA*bQ[FT
%U&)+:#R8m-lU-j:*?(]\Tbh*Fb%qR\6YJmS9j`L!1,:*,#2o!*]).^aAH*0bdfp!u`,[rn:)*)1)l[*?@s*=p2UoSL<pBGY_@S'Z
%jfO%jY$X!)1d6YI?ee^"nUW,#hF^-t7@TCJ8ihSRB>Z8JWI.MoHVb`D!7a:0TD,P.bDgLQI4aM5<ZFL;K3UB2p*/t*MlUE>$fI:!
%M-AOf?HEAI<"HXGYgs^Y#/$b\F6-h_RY?:u/cmPp:"[7jAiX,HkaN,],5X(?"_VmWo`W'_IMmlp7I'g>n^p:KrE[A2[#@OaBbnF@
%-EsIAaBeW71+CjC&*=]O#.:.B3l7h>_9!FAFC>oS1gP;b&M2KSdf)7pKXI*$/)D[fqJ%"-D6Ue78ZkMic<RXn+,VWR$PEoee[n^1
%6=>lk!Z&-OQn9XZZC6SZ<e_;4^iu6KGj7QYe"<@$mA5i<EC;:f#^`J?;=6e==NY$I&@oZZ3Q>N(0D!=R'BQ!f)t2Tma/XN2&u#T1
%Ais\F;'(i4QDHA-hK<%:SrG8m,/\,$&)gF^##1^e[qI+S\8Bik)lb=pW!-#7_\"(@D^(V$0o1hLo/R<26.33V//naAOO`(R.Nbag
%[#(8+J#54t+l^#;J'Q\4)b+!G`U]!&bXe%-i%EC*/d,t#]a#<nFV/#&j9b1qR!!t[Uu!ehd6.7GfiQ\fc(^rR'!tG*I4@k(jE=3q
%)#a4cSNUb;Ird%CZhtjnk1@F\C8=`D('oKohSm[cAmlh]_GFg%PHCLtl]F;c)H:n4og$C:$Y+J+.?%HKUY]P;?>UFW$Z'O[*tr2k
%Kdi*4d7'%Z6@qG%[(31'",l1!e2c[5LQse\)I,a&B!O4nFbg\`qZkTdTp!l-;cCON:5"]8mD;K+0K>:JehITMd1XZ3&8OeeTL!sP
%G[V-#7'o5iUIs1A,[#7HPVR"gU`2T@42);&6l:/h&Bk[+h".?tI^0jSHo/bk,h`'$+'.D#.-HCZ>(p4kFMpgq-]N=0kasLFQ/tE&
%Q&MU@X#l=I2okUY]jo<3r>5Pd_g&g0j@)DUoOPN%dMd3(Q4Q'`)9VMV!g`u3Yj+9@"r>F5$@.!!(_JVGR\)1m?)g!*,N]@^WX-aX
%9?"Pc\I>$!UF'#`I3LX57`nDs;Y3$?CQ_dNRPtu!gcR?[MK_.(!HELKF<bu`)Xij(c>oOc)[sbD%J/sDN3bE3!7GS%9d^F\bYGB/
%Ya^u!T.GrS2c?j+h<#&3QgY[^XB>meTN4o(e$m!]M&mtt/)UOq"Q:a<*%kg8[).#]#?\WoKBkRPU6jIgnY26fBbju;+q2%<jGF$u
%W)5MHMprou%hWYbV4JCc1.bd@Ys,MQ]g!qpMk'+do+#i>a5M[\B`'JXdSs@Y=`je%QuEinqj_7K94(7fmdD^,`Uf.S\>PS88%\[]
%%M5R0=h\:++b?1U1<*3h`^E,aTM'n3>KaRF^O$fL`GpZAYEPg.^^34CIup<8`.NRP"ITjf/D(%59N=+R3/C&hm!-\P29e#T.9$<U
%hqLKfO<_Eg1C/[P5`0!sh+hR,Z+F2Y28c[d@-JZnQWE#9@f^HdG$$ZUBc+5[\,P5g+o/f:)Lkl,FHW,@Ur)se-OS90,Fbc&&Km4U
%]lsaD\3.*S7OStS":Iq*;u:([I>3l_@:03OU$Lr,1NE1ZMRPbM9Q2Hl5dmEaT9*#Z-tEEGjki2fUl`YQ3W',ns/]%4#SQ<?N!:M6
%*1.TOkP.FGm\6Ol]VJf4?o>N8-&sYs(`,DWGDCV^cQ2^Y'Z(,fR#.?c)VosH?eqC[Y^ai`9CbJuHBm`KGlYW3TEM/*)Fm^dC>_W2
%J@Xls@Nm<h`#kM!<4a!0G$g1MCLtgV86L&+I`Li-o%14@N.lSdfFrjX<LV3ACUA=Ud&N1+Xst/,C5Njh#5*-8-/Kp(j,_Y<)^!ul
%<:BpJFi`b@"$d9B#[.R8J:X_VR!EC`C]nMfQ\%C\5-sXX:"birC^75)b6[4Flj^om'4*#34+dn#DfJ9EDrLYO=j/W5E_+l"$3f3Z
%!*KM9d,cXGR&q-Z$VW,##SIjABHe(H#si-S7[24H,RBhNnjX%0E0&]H\13(u.%eXK*GWek\Yk7XbnE5!\dd7A8+uGNG<n/%U@fPt
%&WOr[G[B:T6$%EdB$NA&D\E4:\PEeo<6J_uj9dR2jh)$ld,%\EUYcD[`t?DQ>0[n'8kXfr&;C1f[S^/49EtSBs(%ocX;n4g*t2&8
%Ui!i<[Xheulk(A'@\%cn1&s`n$MY)OWOO(<l/\k*MSQp4K\6f-:Ms\Har6^^!',Ko/'fS3*Q<5*p'(dHG&[r,kab_S8.+)kH2b%j
%YX#^',V%gYOlnN/+XS+4ioeBeJW51Z,f@3D$3>2Fk5^I=n=?;ic3kPB7!SPE:*(uKo3ch!Iu)M<#hkWVMYDH!iYsP]I<F6U:g7pC
%bFdgXm6J*g)DBuF4R9leJ9M0qb'L>Za8iNPS"+K[Z=bZaIW4+j^*>)P?pS<9L@4fh$r@;Yr!s?IFRa1G_*V+RJNZ>nan$%P=W(Y?
%1^P,]L0qn>b6X6:]`^I,#cX92=/>.LG&&l^h\H*<kfFB5HQS>^4GfmF)$R$"3?HC%@#RK:`Jud0O>.Q?(5'mF>A6&M&)@B/6'9F5
%/DW\;6HIUG:CPFs,J*F,^`=n$E68_;]S1:f/k?8-(sAQkP>`@!!G:KrT?nnS7rqfD>$r"K_BlkuW!.&R*3ra]2+p7QOHOn'a;`j?
%q%qV"s3-gh+FC/0rgrs!;WmN#d7C3!^nc)5Li]"2f/hFs%$mG4L5*/T7.@/@&:rFK@;Yk*NfXM=r^_a<<o2*aM^@*KDZg4RZF&]=
%B1BVk(.VQ2[qP9iMk_!S*rAP>hOGcolhS4$?C7^>.YVf;j$0BRbV8J<$[d<!%>BS.rYuZJe)+PANt<\`YHTS&XCpP`iE]dH.>'hl
%:7anN>C7)AG',bE99O)P(-u5"g2raC/\TWVFiV+^1ZpFl\N+Mh5X##lI,8eP#>iLo7(%.RL5_n8o]PgKF$j?3]F00%=uX`aA7p^X
%)f8sj;$m1AOL0]Op@6g,f1hM4LZV:0:up,+46,:$Q'58SU#5-f/&A,';+nXl%)X_13,4ut9Ru\(P/Lg7n;-D\bkF?k=:e,6$7Fl<
%Yg,aR(iF^R!$A/0Am`RN/YWjKPbHlX4^',neo+rdc"t/4M*sq'K0ra]%k]j41)[5S<)bT+YW+i%,*`.1_&L8+<WU:2':Bq7rTF1o
%R7Kj@8ukX3L-:BQLM96Ba*4!`?kDn'YaQC93RFpcWi)%AFX:G7f_ABPZAcn3_SiK]l<Ciq3!HL.e0'H+0.)YC<m?%O]+#j$H`@EX
%I^S5jTk0al,f*,<:4+(9M_AQ`O-J<ISU!N$cdPb7QXQLIOMD4!H,(Z@P_-$bV.)fsO_j>?I[9:(6u(ap5R(4fSE444KgBgSL.+>)
%p3D*c[m-Ha*-g#8qhU[JN`d)nhYXdm6HOFFBMBD\W)4CEmS\eP(*a]RS<9mX"*;hD&t,HBYnVVPB."jq:6<bqKpuBJ!a"4\;N4Y8
%@_qqt4uV(<Dg8kBMG6-&1F4,H;`JX)/?6V?.(`.`0]e_@3[)5T\3>e@Hoq%J\s$-TW;#[Rl*d9Kjh=mocpYWUlSSBa/<<#-WmOen
%/]R,;ocbDlfOEc5f"K%A#8Pb"Vs^le?u%5:)<i(Gk"+5P.I;H)kWl%,)f`+/SWd'ZiJs8.(3:$kDq=<\':PLuW)W5f7)UBR,uSA?
%Kn8P7>8%-bF&9\FIKU>fN2$q/&$fitA]i[UXmFCI$,+ZDk(_D32TIpfItDEp$dK)Rh-3+*oOia![9[0i#t$VPFOgW#/!(_t5Hkp`
%[Be\M.bDqb0FeAm`lK,5'!XXI@\W+n9,doY;_o0i,m\o7VK%[cj![+R\nJ;s<lb\?QqD:MOaZf&lR5<GJq*a#^LXKe-mE%Q]SoTc
%BUq%uNbr2Egj:a.+iZR9LI=oP(FQu/6t:As.<h$e]&miV0EgJ^[LPhDC6%L!>!dF/'K\uc&OIj*]7h%=8G=d8dL23b<%Yc1/S$W8
%6,Y2R"+@2:]d?qg@SW$^9'DM#C<4EDbu?JUQFpRn]\TA>!Mik&Y[\uOqB-rlSFjBQqo40;#7(d[i>rs%inC7"@S5O$(m:0cb7#=(
%o8&tI89<cgn@!<NpsU`MCP$kTODIE"SGD9B&=@9u;2jMFJ,sLCE&5`L3dUnl^3"som;TtdeYH,1l+#D26GNSkMQ-.T\Zr](SKkeq
%>u4<MR+I&GHfFIZfKG!X74N.Y2NljBT"oKmE^hpK-=>:cL(pX>9)",lQn6!PTE5nOhKU^n3<IqdE(OI$/X&5Z3A0BUb9kk<]^<uN
%UaHBd(UBB][]],G2=[L4LaYf1abOo)f_**B"&jKL*d?LQft<Ju2T/R!-`n6Y-^VK;<uk$?apu<eV#4-0GTo(5>t#Or7ojh=5t+\c
%)'/0K!kgSqLfBc2AWVYp'DlMQJZfu:Q4TZI*U_Y4eYM[j?qKM9Z0C?gP>3r.C*^V;685pY0Q6$=rZL^3)+sAP)!m]02$K(-F_i/P
%%g%Ae)-1##H$T3as'!E@SPkhtpb3if\-$0`@E3@$<e[k+Dij?sIod;X3Tp7s?a9A$4fj_fTW5,3++kLUCUR^.3%4(FbrAdT8IE.T
%RLF-ULYGF^QWie)]$VKpK]#/\_uTQ5L%(KN#c)k&V/qQ_nAc/A1Ckr<$XR:Ff=+_F1cE]pXHCNbTUn=M0]ch)b#Dgo`a\sm5fsnW
%-&g0$I4OPYpm_((XG0;PRMTO?o4m"<]!![DpsPIs`YcR:&9TI7U:(YRe3/ZqcJ_n$bn95C<jRq]!2k-PCi@rr@X!r1'U"l'E^m[K
%5dbjMcT8eeCdoK<L-SE+gUlAe5q*S7&GH9j(;-_NQ\LgoK6odL(M9(*.LpIP0`Lb.;"r1h0h>2B8#llKXn?ga2_JrEJEhBViAXBc
%<K20R=C6uV%lM;>SMVJ/?cA-+_6m`;EL_OTU_'6g2o6Qa[p/sB<KqBLC:jWhN[AT\ZM.pLi?Z]JV%qUB6oIA?Gd&S6(AgohajDgA
%Lf[&7mn4.Yp\)Cr/4/^\MmIKa42SgKIX&GQJ*V`#d2CTbs#i.@00uZ3TqYP,Ja8MEY`N4>S59;g[[>etJsaA&%H1b`7Y5d\9Q2HM
%>L/7YV(>(jnTTL3(/$3b?qaUGH(7B8$bnn=Nf:sVU^YsL2]iV\.#u(I\mtn\oS^5r$^\K+:^4rCOf!dd=?`^_9.]=`(Xmb,=3?Jd
%RKVTO,s(Z/0<*V_S35fq?+$!t#&<7U,c^i1&^^'mX[[9l,8i2`,EH^+>rpu_2UAV-*T<;8In"lDd-XBk'T57MJ#9-8%rP2M$mN\8
%k(R6,dQ9_="13qN#s<g5EME5"kbqJt2M/;TATj84=eN/=DRP/NH@1="6qLH3]]=%aH]'rM0LfIRVMiMhl,Qqcd81pM&t7uoA<J-h
%39+teLNq_$#^@T-e#CKKV:;*)n0]\Ykfd9f8b%+"g2@oUHk;,lpnP=9VdSK>dc9jlmLq1:7fg*`o0<3Y"5o@73n9q,<9ePkmL,g=
%hednMUf",bH;00k1",<o;PN<_bY*!;NY_$%R#pl4JfGi&FVDYa5%aT]1GL+D!jNENp]i.H.Z\VWOT*TC6S$:`D]u"Y"u/S>/M!54
%BuObD49TNVi4<dj61mLP)]jYEUHnel`?c<(C%6Lh^7hZ@%q5Z/#jEUu$qhm9=R8E+2O0^L7g*r/"q6Fe?sD"6AO?2_=B_gX'520L
%JJaFO65mDV%*BA2YPf*A.LS':>ip+^_:58>LN,JW5E>lU`mm'l/?G.@0^^@5eelbEN$58EMni<g].h6QUVn-l\,`0>P=^W7;38'i
%@GN(.E[;;J$2@"DC`Sl^4ebA/p3H0QZ.4S:"'EIp$KYu5&Z](k\$\ns?g%@j_5-dH9Pson->#YQi:NQ!1.)b5q'?k045K!rU#q0l
%RI+J=5edEfg;kfK3@G1Zp/R1W8rm)'$t5C_[i>l).XS8A`+_!sPnhL5)IV"NOlA=qD0q1uI^P_$<C0*/hp_,t`!q4t:&c>(R^)Sf
%3Gr1&jDD[J^?$p\/*0XuHT7b6&bfk0?,b'KoM^0UE/Y)%XU&/'c/lE5rZ6TF&M5PQp7NO/btMfa*8AGL7bBt6K!jQKQj/U<;GR52
%%u'R/8M3EZ&PC4r+ATM`qPN=f+F2lFhs'fYAS,+E_'>;k/hITTp'>*7W"Wa=*Lq0PeeG@Ri\f.sQl_k-ZK?7ndlkc?3Pko/Pe)Lo
%KUC7-JH%jr`aUE,!Cul;oH\%9`$8uU+o+*8I@":(3imr^4795qZ,K1n29^E>Ri"u*Lan`rF!@qhJ%39GVId,j&4dk`CA9$]8_!gp
%<:_^>pRVKRIAk(g^/BMj,qF<np?,Y<!mQ8S7\tDj2Dsg/f#/"<O?`X5r%.pZ-8F6iZ-#1fPTWCSZV:4grclo'I,t]#++GeW<#P=A
%`g;lrhuI?qr=R=-#:-?lT$nFCO#_q!EPQiT6JGDSD0.&lG[t$?F?-?DVL9M'NAt,An6VDV_erB1IidGho]]dL#ZdV$ftn^g)2)I_
%%\+@b*Fb48g3j`2Xl^Tk+I^s"D2Lj$0Na09JiP[icD+A'bmSrkoOK:ub#+72Vq;2paXta1!X>>)M\Dam?$AL0K_917c@]o3&TmAq
%6&ItnE\%DHPPqU21h5I^c2"3[KVa:RD;XEkgV$N9TcrWP!JU'^FY]L'JSfZPTj[a[38TF?_);+aIZj$U"iN2=Oe4*^WSN"eHPU&%
%oke"M>Gr2[b>tlMH/^EUc?]=g^gY^hrp5u4IV`ARd-6Uq_p,23)LSE#;M]b1>DuLDpm9Bnm7rAZBHJ)\@8.a!8ce`+>ZeKIM9XP9
%i:Jp?0'#D1l>/U/&TKdBhM5s_D()qfALE^A:?IG"BriGX);ctCo<+`Hku@=JBsaQfC&9q?jn?VB*[k?LGeO@@Q*,VRMIQ]R$JF='
%-Yf>=Z")+[/ePtUV&7LgGU:>tTOe)>o9dFoSsgWrfLlq?00UuHK)t:tY[9/2gJ8i_fm+,#[6jRU2&GMNd@\_cAP[X:8n1+QSBmk1
%QL^kU#]!rq]EqPl?ukhZ2hE`J!WU02Tm8u1diCNs2FD]rrtWEt2?1NfRY<s-f)t$o&4.*rE`#d4\4`[9Ls;)V"#'6M1.pIn^obCd
%6*UC<n:d*EBRH%a#pWAe>285<kErr.]M"N<.]OV?%ZZc<'gCr?[WNI5oPEaG!>nc331@-<>2EdLIAik'JTJYK*F4.^iqOhDV/a=c
%WBsd&_r7R`.C_V_N+s?4E=@$A.A_m[4!$O=.u(S8!XfsO7OE[g0VR*;Q\6UC\u?I.k<6)4o:Z(%!M-KaKAe!(7tO?n\[DGI0Yn>`
%!&Wp%o@d9Xjda-QljBmSL!8C8LY.l8$X]Y6?MGd^h:l\%_Bs7DCk,uiUOm'a5*/),lBAeT6KG#Tlu1Y[`^$'1oWNIUn='4+9S1][
%>52NW"Qer=4A0-&A_EgZF`/37#c85BPHF77:r>F[EP:fg2.1Z0]8_^=>Q5S+Qt<$Q)Vup8#>V)+?k\R[)bK==#*/a<.gXQs4X0+9
%bM%]o+Y@Eji350OFY^T9(pV5FQ.neP/"m6Tb319g"]eu,a0hR2OMSu5R0T28Kpck0$^5A<;"S&XdCHi/q9B07PG-KcHWrCn-MZ`C
%clFLAaE&?Djh+<,:O.k@$6I+F?R#FgeoH/Le/<j!/nW4"<S?HW5;ANRF.Vs&Z#=jo98M#,"k`.H/7iG2,9E=.?8\/f?6D'GgBFhX
%hg[r?@HP]\!An4Cl"79SZ+8NoBmL!_Z?oVd$YGBa;Kf9&j9.m$ZjUgKdc-Pd.L\ZG7-Jt#"aEiaPg!QJQN?*$8;">t_F;!uo/)0k
%L!)I5p?ES.+E(6N5W3uVBdGCDO2cFZ/q9.Sl#ZZ#L+9tFgL7NA)V*M@KFuL=Hp(pC9jo:Vg<oCpoW%NM)^7S/VBjAg%8YdD*I)e6
%9_"9u]C(^rQd>!X<mhh=Le!3uPBi4A,UV".i#ED@7cHqcbNkeZ7X/3R0B!lPY@?R;<a\.nM#(;6js;++\)C/f@^oWH,G/5"Z5P7g
%'tJdgd,3#U:X9D&)H")hJMgL\A>Kk3&[Lh)m4275lnIOV6o]duCM'kIpG<NHf/NnilN&:oJ0X=!m:Y_PlaEVdY;$b[((:gN]pA<7
%Wi6Ea;!"0g6f8XDY<MA.8uO$jhZ$9?HEijNp>:CX]4a&r@b957,gsf@X+@:,.&\t/Zhtu\1CE65W#8P@Z%a)C/qR".^8J.FB%J=*
%HpYOpl\g[L*]al4Fl8qK0"o)fSq#[cH)`%RHkKK2P_tBE07B6R?L#2qCoD@Z^8S"XnRWZo'oj!.Rnsiq5Mn/kA2"ii-STGe!K-2`
%LFA^GVU61#'2`<bm'fW(KT/_j(W.n<.kOp]68n^"5:h2@3)VapU0:1J`.a/K$($bi9cg2Wfs^#f7e7ec,%/_o6A\)`5UuH(Z<<>g
%-9\.srPs,4Ssk*sr#RFZj\8MaFGL'uFHc5C*57GK2/u#/TOt#/hFQGf8%fM]@#`/!A6<SQeme6&h(e[lG)e&M,ZVWkFJod.cQJ54
%fj'>j?qn3L$5?.+CjcYaZMqP"b?%j*kOdN(1QU*fR%B%k^+df./r)]bGbmGjl-(mC_?>up*!rg,!)3(_VIQKtKNYFXi#FgN4<d"3
%K[D9KBXI;)0+67[GY_bA=$JVKAW6jBs05UW"sV.2eZLJ+7i-XB!Sd3D!]Ao,BeC:X.l9===C$K$.a9LZO=Q@t?p8V@JJ[+^l)[&8
%NTf)(eLm>Y.#Y+-9+DHD"f!#ZcdD]i(f?hZgbiYH]6c*J_$'W(A#c;j:-,feC5[[GoO3gQo:a6,p2;)thY56?H<#515Adho*Z(eW
%oAlTUpdtjjJ%oh:gS)hcWnIYjQ2T3)SX,+kq_%8/g8ZRcR2g+hj]lLVrJ83eKe;*IPe07F>P`)V$UB#,&A7TGgo?oXeUrkFPGgqi
%i6KM:_YMu6"pf9u:dlQi\>Vh:eVN^[<?kYu*Jda?&@Sk%e)u;P5VR0ZK2,($DRS'ZSL7dT6^;!&N#F+N2i-7L)XS)`C[\>n*/gTE
%*e;QX6;2OH\`R>)a*g7"D&!QjbW2o2Q_98'i*:pG%UFVT'Uc;$"Wan6O`R;%3aq5i)O7]^X[rkQf8+R41g7:a[rWa!?17;,kmKK,
%'*$ij//Nh\K;*YB1P?]nNN/%@6q#'R,XEgj._63N1`]./+f.-t%Z!5k">#SbHXJghXVHFfB<)bfK$ahl>$/@pP7257*SXF:L]BfH
%,ms+"OVXgTH]B[UkP*PUJ[YV2bt$!u1G1Q.AY^R4_=o/;)_R3dS>io3'EsJ?.$0,qRE!lHAP%0(_ndaO5$i=5PtWMhOk+E/U'"mA
%>T_b:1aJCC8Vi*E&@CFW@oO1H6,+'62e!!T!FNs!#!ZPV9'6t(P'c$-Lm&PY^-$^3?0Dd91d7r(Nb5?`UfKrtM]/st_<QKU'6\5p
%Q5:D%oHshW/),G4=gFYXeA1:%"T6\c+Z5pV$e:hAC56q\d7!reBS9o!A0t6i_J7;6qQ-KkfdtU9*17/,brY\9jc48]Ga^eidI`K/
%.G<0X^3Tq3iEgUhNa@.cdbu%H7?8''?X&hP:k%285M[ume'bI[]#6ZF;Xs=6mP^)4(YnG\Diq+T+\RRr+NE?u@LM9%`X]uNo=(Vr
%\]Y&L;(Z:ZX3en9`q9$R0fldkF^&O<F^'*?/?#0&)moFGlWY)!.ZD`<0XA<LDVh)$F8^FLh-5b5'f=NT?H@pjMR;5_^g8ug75/?@
%dQDK.g)/d9X\lp6XAO^JU1PT7.dqj8LKFLEh9.:XeD]^=r9ELNI:(#W(j46,hph9jB-b(cBUcg\'Lm$-_E)c^=P"\l9_V>38f,,+
%mB2'*j-@LF$?6pIj1F5rhaJUbE_msn%<Z?FjB8JL*e:*u;KmU55Q?j^A$>?^+5f@Mm"=uF5>7=ALqtH7"mh:(n[1&\i&gsIBE@]#
%rlAOI_siY<?L/3<,bE50:e'Wer]"MBSBuc$5aAP0+!JLN]YYQ.qkHdXd5/uMjSnYIIQAhUnJt&?raa0Tm18503YV@NYA8H6Iul)Y
%;0=<AnGY,(rked3AoE1O)mYS*=T>muV!ch2",HZ47o]/o5>6b15i$/&pW#-^<JnYC5R;_9s8Ke>m@D/JN<-:R!a_T7C)Qk#fi*)L
%d'7+_Y8>lBO30qB,,=d?JC6f>XnS;\["8UhN3R]S\u2>aahuq8V*#K9jXclX7u-S@BSQoD;*)Qtd6F*c,!WlW*)ckO.%&q&ZXJT,
%L')&&iUUXdjW7iP.;@KGYh2AJBN)kqAso)nO1rSf`.i5p-^_H+AnB/25]oCX2OV3emUanW/]cJ6@3Y)>DFr>Y8Rm$PSumC"a<&r5
%*9FOTmNs4g7UQD%^<%eGTL?sR6=ud'WL+ZJ4eN!m$c%\P6hmF:\X\)$r=oUp3#u_NP9H=8\*B"Ze3StL%=.E%B!_T#0-P1lkJ(!!
%R41Q%1rVq^ap64ch%9Pb01Co_<qXUOdqVfX4Nt3\pPJ6;1!5d`!eIgD:Y-LjXQqKK8=Z7e+_/ig$iD>;J@Cn)8_i%9IaCiTr-%4%
%j#Wtk$/Ztt:0#.^\B,t;_.sR#=^Vfoi^FD]X7]A^?opsl#nD+(L;ar=T*76&3pP(-d%^7"a]?ETn95Jt#Xb-W%f.?@B!OJ@WK=r7
%era>.oEh^XRH$Ut%),rhLYe7a'f#rW=p%VH6"E'':OQ1e(KL[8\jAeWV:N:!V[Kdj-A!T(#aHM>@rZCH>VL-#=Z`;\,Mf=&"7!h`
%`?pIiIr1^5;[kO&m\-WP2/?]7[5nnk0QsQm8VG;',CE$mANEh1i7Xrug)!Z*3HUX:<@Tl8crDbY<B"\V"iX[[=mHV[B[AQZ]AC$t
%qo2ZLP-(qi'\b2f.]&>^\Q<g=-iJQ"g<d2`M]*^sag=\P$4uX"cMOiY"&3#3g&_\-MPI5G8Oj=)<1<6gL-"Z'[t"aPBf>9sAYO1c
%Wrr4QEj.8=#jF0N(*X>_o>;pMFiS.Y^YU$564l3b)2KSA3GO5^n;so4Qm2$=(`3*:"Hp*EZp[t<8VB,n*1<Q=Od36/dj8J)?jQf#
%Csl=*)$diO*387K\tXG>+Z!KI[tW-qZ@%H%6[fR++."9M"bZNI;JH@u3@&gl$BJ!%d:rr8qrc*9N6]+-3X<YLC(%0-1=`nB>`Tc]
%b.8h[5O&5r$_u/gY>$U>b^sh$&AD.<]k%T8$$b+HpeeUn`%k;3Y"?"e;*.m7Vg,,[jlH@R8>Ugi"O+YN*U"i?6;94Q%]c>_?"F9h
%aUCSZ[X<;MI<`Bqm=iN(>dHTG-X[`;!&mE09?\$Ih;B):TJ*fN"\sgl\n2!p:Z+=>Jg_6_O-AcDBF.t8d8=LY>-1*+c3)MW"-Ani
%ls7\c'ILSo3V&?;oq(m"Q;#r)PWp(3O-VI@S`H?Ygf5j*[/"=#V3!/QND;E1BHa4(OV+SGYI02.h8P_22k@d?H`[Il3*7A.HmJ`R
%X%Pb6)<7JnME[tS7&i_nWBO0+/rr_tj4lFI%Q.]D]/pZO$9-aS0lgC>3`;mJ")u2(3sl^E(C0LUj#&!2V:M9FK8ljX[V`f8[=X>[
%i'bGAa(9di4Ks@s)NPb?,!]/V#[BYM2aY3PA]8@iaU1>*B?^ES.P7%LMIj,>)XJ44]5Ej3Ql]Fp(YNfn.>AXA+m=Zp("Bm?\0Wk'
%,iS3N'lpm"Ku7hW"fXP1n'L<GhP$tmI?`"tOOE6#8Qba]VbP;U69S5^'RWUBgjm=&b,nX/g/_An9f^buC%D\qZ+CW]8ZtI]']SAR
%_F(9u39TWB6lh:fD)@udE`Y.PLE$XkMG^,,Jh.?Y,_7W!3GU4;[Q?F.1=H`WagUh2.[#ua"]k8G,N+pT"t/1qKk)*jW&XsPX,jGE
%5'01_bM5\LG*;B&ntW-4+"@!g1orVL8Oj)p4MT1i.QUr.%J!H-2B=*g"$Zi[`$@^%@$I$dfQm8+F9@>c'TLVTZ)C_g)8<!Xd#G%k
%mdY'Qeg1g@=/hOV"_"abYb.WN#^EC94)S`QIotG`[Vr>[*,f@DP$Bjb>,LQ2P2bo2&9Whmp*7M2j$$NQ<\\8"ER9fq<IM+oLa3G6
%XeR$VjW5Df^%ni\R./-S"'JNb(qU[a!h<r@r(o*!gGa^4:QjHCUr[%%(2]P';o<$?8<$RuAV\?cXUQO._\b.-=oNL[fbO\(l\#.p
%2a5REM7EL10gHW"6uI'ZBI@I0&JkA)[$_677EtpFhQdR1jRI:UH0!='.(3mR6nF]i\dto`;[IlTdM-d;Y#IF+T<n(lJ^B3iUtipC
%!5h=-C)&II+$5";43g..7!$VW$R,"]$V0WuMAFF$Ed#(]jCcgfk?9iUm/\[!=][M!QsH[;e:8uSW"UIq^[HI"KT'ts%22"L&U/;!
%``LX*j[Y*^@IA'pD*!Vd!"qYj;Q^S75n;lPJM]rH't>SK1X81^O`&XT?*!m)gVq)cTmiuPA7(hJnBQbB,E5d6K&cPG?_/%,S[p!U
%_/#9bQbe1V;b/1f_;>tIR5r4"#D?96Y\tb%f>dDIaFXtfGWY2G3`h-!8fGt&V^hm=(n^t=F%B#;)lF.76g6Xb8.6Qo'YnWqfj*jH
%j!qDd@PAY+L`?0dK;kZP=ES]24>,@-VK@Lh'eEESA'rc2Zq,25JV>43-mc.<25j(W_iI1^0oc\XKr]C3#-AFt9gKlZ-AlYkN<92N
%m)BB;Ggoo+/FuIN1$'r@mN>2E#FsnTOlHp4ZKY))/X\4$G_k*Pl,J!*76@jH9kdu;ViD2P`EX7g`,4H4oL\DsLLdtW`f<,V:cH^h
%5Ie'K2/b*08HZomFC:EbE\W\Pimn)41O+AfJo@D@&7i[f@?qKW@_r;$lO[l8]k/)b;:7?jR&VucH59JM.:)h>_Y^(l7TUkLO-GQt
%YbIg_24[7Cp3BKbc]#WS$/Mq<8ot`D&d?^g/Yn=WU,55c/mBicJ-M_oe^AK*rEM<+#Nf`CL'kp:Y^6,gqW&1(RRo;bbF#$L'0N5a
%F-C0JI>ofKP6R9a74Y%3bl^j$H-&ro%rr;"[@uZhr(<-(]8oL5kj5f5SXEi=`inK)6=3:R;eGG4/=pQe/">l)_t4QC/+s1llR2Rj
%_O=%CK(J]i6cPH#n+OVaka:N.+Cn^Pk,ERUr!B@pB==f)=V`[\:?/,oGS:d-+HYq2poAqe>_uB0aipN7U>sipQhK<jM)f.2NPR@@
%`!.5KLgMr?K!9$#;+/7VGHW2$Fn,/!b)gYa:Pq](JVATXM>MXeLFAfPLl_7^TO`a*q#Tjl+4S;1aqp(`(Ek([E'KT!5jA]/9Q3hW
%0u!1oUY2[r_XE(c1\\]t&]/dD$b6$G@==@N`nb7L_3mu?5+(g+G;TtA*UF<.aH<nQoDsO3mse/>BWMaFct_tda#;@J5?)H7+JH4=
%qI%/D"^0QS]'Q97#L`l7[@qt&%DU\OI'=U!5:lsE3D?.q'ehl9]OHMp1j)t=qECi&LHpaq@+u7DSQC<X\al*X6+MUL^!EmDB+gF^
%p6kS+4QXKd[p0Vn7$nYZKDYs-edf!\*ZkW",5fLYTW;&Jdm\J10_KLjhkJ`DcDkCL@'9hnn2.a;"1(#aMCq5tIM.,ATRo#fFL"c&
%)[cor<*UD#asGHVU=M0"#Q^VmC^(m^g@fh-=5qa@;CQ!6,?9D]9p`ZC&9=a\Tr;h-3]^]dmSlHHh<W(-%[-EEEgd6(C8"W!/T>@Z
%Ea,,V@<la0k!7XC;a\6qp"3&/lAgHOE2OZFN6nC<I@u>9S!=pW;fU$bVEMs`_l2+_A)9Wn%R8[*Pa6ILfSSoMeNjpajg2F$WpZ[k
%%'LM-+BQ*=?6s=AOl#so3iVDApKGC!iXle*%lmT>/.?"On.A:r,L"2+TC5f*^(_eYjmTY8kL0B16k;!gGlrb\:b91Hr@Tmj*T?#<
%-C3!5BYSfJk:5eL*=irgEbC-TCIg'q-JUSE\'nBQ:],>foQjWNbu#K9bBDrIWNFJn7/2p*"M]ZaR']J')!@:oG[tH;_*,&u.$'D(
%mH@GjN]Z:jE.h<SSD4t+hgS&a*qumX9(l+E66M5I@+Dh'ZfRu^Y1[724ZUf2$&Zg]40oNKr(2Vp7bm![F.ZC)rLbh3\-D0IA)V@Y
%U4YjQ=;,cDU_A"l>t]$X7o_X.5Bd>e\R.H^!ZCHI`][[&c]E-d2$F'>:5TpOEPTeOcD(V>RJA(<;eSHm,j7sI5:-AYCO$[i3[;nt
%0V)uA:W^eX'*nR+1gH/JeB[C-AW6P)CGS7cT"sWl3tFW@V%GE+.=R$P9(>Z,&KQ-4oH?'n(B"UM"3WblY"8AlTVf36?StK0g7sCq
%RM!b4m?Z6/"[,PgNCM.45`(q&]p*uXTiWV$+0V1KDq:8.WDlq`rZ)GLku6#WrK<8$p+?$"5F4;rLN41=iI7Ca04"2e+AEK4hAu/f
%=;DOF"D"$A)^"/c[?-N2K6ku&<3iFU6MZPm[W;hFiLLFR1mB(1gT`XZ3O(q)Y]&:&QVae`/TWFABqK'a6n*:F3D/>#RW(gRfk1m]
%X5\&T<2;.m^('9!Efr'$c*`K,+rP>"NTbDGjp5Fgg)E.:j+.G;*37"bH+1%\!M_>tMssgI*?i7'0XGhj:o6Dsl`Yq_G3u_^;E"#A
%bR:q=aB7I=S^iNDY&WO\(k;],:A4d7)uKgkDEM@ZVI0afkC[?j4upluLttGjX2JT+(r/=a&-HB)$0,K_.6=8/b_dZR!eW0ekD&>F
%41l7X570-e!h]Ri''FSr7>#9l1UR57+S_E,@P-TkD]T_aC#VPpbp,T6&ktbjbDZ$W@MY^C_$chRVDKbc'cYi-Hu'qJ!0>/_U\i_f
%eS3\\]bW#?g6gt0Ek]a7]cT%C?[e9VEf#NSR&Y1=`p.#q?[d9Q"Sl:#/FQ^iK3f*D?HL>4h#,`2X.R.IcXu%6oTt523c77B+`%Do
%f\b+C]1j;O@A#T4oZ$ar>(Iuq^^i_,$)G4Qa&Kr3?u)T(Z5fU]_lmdgENg-O#Y:$n+!*2d\HIU;"&gEHCjZBT=YRXMLg#diUC)l$
%F1m@d.jJ&?i-A[JS?=\R[+8#)4p=sgf\sTZ1P`LId:</;mbkq'YG2m?9pUe44%G-%J$LBkc/ZYLJ5(KrOf9-r8>EdiN:L.4o-JWb
%YW4_S`YLVO\H].8Fc$g<SMang5oPP6V*XMX0p(N;*R:C7P27&[?Ae99[_7"qp]S(f*.j`M+-q!HlfO>#AoX"WqD:u32pfdCNK7/Q
%FYdg/WAP5G%F#/ah24U/Ul^2%db;,9=%PjHq("Zkhhi>`DZQ=4I^Zq#A/K*3C3ZYKjchD]I-$tEBSUCcEcn&H3cND_cDN.3Qpq_#
%Bk>VG)3u^blQ`C)b1!Il18"LQ>4A/,G*5M$*cmLU0?a\^2[I)M`OlBrrr_I:&nOJ,S?'P/(4/"V,0#@k]P_?<*o^?A_+CT)UoeC)
%#8rk4V!:X;N@t:feQ@p=?B@fjj,JVjWpNBbSet7Plj7Ku?rp2\WmN:+6XE8KQQ-2l@$3PEeL".,r'>LE?>iYd$M7]C!WYbkp&,o,
%?':KHD6^.A,W+1DiLt74lac/a3iEc.WpAHtj.4.P\BKDB]12pUf+`m9UtR'k*>365UnCah&5S]K"Gh>q%LLILZ!L'-o+nSo>/o?M
%d1NlK_7,AoN_H8XIh@n_>$\`IkM,Tdnm=]\`OdRF/t>+F`D18XVEK_lHt=S<Vudk`=Y[A?k0M8=o1hh:#m.$s8\F'GR_1=),:H?I
%"bS/NQu;HK10.)8.n;Cp=?;b,k#Vq)b&n><NRbt">[bl$]iXr^\pQAF-R=NAdZi-d(%[?YWLRH;#0N%+#q6Hp@X!lDbsr7[KEJYV
%%7i,`YY8DAC*?B>&R'QGNNh>_FPT7`b*=OdeY\(a:<eFZ3Y`>j]H,TQVF>76.BI;pI34l_8>#"T;*f;N3.t&7;i,2B5+TaA);B!h
%;_h)/MkZK.%ft#\(Zg;,C*O6@$2<ZXj+&:h(4Y!%)X8%IK:eNM$(B&GH)"YN_.;!&M<aAPH1K&[Loi2J$F/o^1FC@.#k=f3Z;@2+
%,nqDjSHWP#OY6"mQKq*8Ad26%n&iiC3nQ\dns-/oX(SB0-Vl(&1H)iP_63kl7BK[2<(c2LRP'[n^-mc3"9jpK@3W/6e1#lU+%&lK
%oAM*lj(GA1;d^cT<-2lsV.9G#X:FkVm%semEf%0e?2mW^Mnom<n<IpDlDh*Mq.D/`@>T\L5FH78Lr9SgUB7HE:XB#HSj?KNH^k(!
%3TCb@34X]"-;JK$"rW##e>QnE57laNCG[nF_(G@=-r-SXr8.,I[GBR[R2Vk0?rT"`i',`CW]`9pV)_bS'XagN.ElX!euCLQeaO1R
%:4r2l^e(n('l,m+'Y*7nrQ?N"hOK%[#:J=B;R8>r<PEMb)&dYQ$/jo3=Hub.=m^4-JR]2eSr#:TeGZ20mXuO5'[ISD+)ap7H'Bq!
%j@%_oAjan>Q3!`)JP0H>.4Qk$7=]j7(5p,[,r/9CEKU*V2]LDlP)/B1Jn@-t;GD9>]HTaLJAB.rqT@9'"#j+&Fr*A\)Fq_)EQd:n
%afn2_Qrnc!bcRtfL%%uS"jK^07nW2N2$&7o%`90XBe25uT`Ahj^^dKP>o(f:oc.-]Y6Wa.r24nn'J+KiBbN68WK>s_@Pje&q<=ZX
%6Ya%bfXR\'Xl`T=oBX!Kh`n4cAI)_G;Ia`d8B[030FKU>Qr94kgPJ8UUAi:9o4`skkcC$OfO,r\;4^LjLs$>Ui)CY1c7>'NS[OYp
%X$]kS22F/0Ie3AjXpd<B8-_dL&/G5]eVJHJg*Dr=nodkC%*Q(k*U)ORMh4!)JJkJ?LFB#J^XC]Pr-,,a.3*.87Ch@e#7[eMaJBlM
%h.-S?\rQ1im$5hT&Ahu;Hf>-_*7k2t+(VA,P'a=S?G0AAR(]HcNI*?+i(?42W?!F9;Css1dCklfo71P,MG^8s[D[>gh'30]">2VH
%8JSP@".IKO8+C9@hac/2VXD?[<Xn$tX'9>cGZV-VXU?I**m'W]2d3/`pe"PnLn_m54_t3(kCNn8@3gsqqY>"7YE2.a9*<iFS:5ul
%##,I@+qKSfdN/)W6YrIgamIn.lF&]X`0C#:IjlU`n.)t'=8!b\&EJjDDORJ@4t7b%'%>*-l*&QYanj[!Dn=?!NW_NW<YNS'F16cI
%6HU0s<MJ0?,ru3P)I"4:haT%-dli&.I@7TiCk;9)UQ^j;ph9/ijDf-rK983s9cX'-Q7BbE9Pc3^+iu$;V^ab.+DT*R#iG`_e2CU@
%X,VJ;L4KAfM37r`j>dG*!?hHaINgod!6#;10U*!EO!F0;*=;e"dd6LS"smrmLPM[6fNC',/XeqY[4_sPaiC(TMZ"(L7EMM/U87'P
%O0Bib<E8)m)3@"L:^3^$5^:ONGTih+9<3Xj*(^\D&p_>N()kI'7h@r1%S2k.V-u`l4Pe'Zct0U<R8F.9J=E>eF7Z8W2'@A4H?,Vs
%b`s5E:tp)gNAl=Y%k9]R@gt(4&E!N3%BQPu(rZI^rr`+`N`*UWGDbeC^a&M__GAkIb.0.p6_gPK_1(f(+.CiTqJ4-dp'aK7$DI5V
%P(WC&^^j?:46U\CUX[W:0>Qm2ZBl&^76(LV>ru"M9<gEN^tMtu%q!A+'qdNuU3%hZL*$OGcadI)J69n[FVe5+_`Sj#)sqXd<g*Il
%'r6%REpK4op?%!'YkU(G&(G-3X%lM615XWU])euF2a6%`f-&/!07PpI09(^6BAcJ<.hR^uZj3fR&_kJrDu^VaXB:N0Eak'L0ZZYh
%i#j_+5#d/FFTiqHiDef7S+)UGj'l/.,Z80tfc!-=BC\'2Q(ds#hX(PHO0afOAm:I:3uu%+VjtjrmAkiFF!QsNbq+b5J=0%+0[+bW
%\9h(<l3bps::A86Ur4%RgL-an%)PO-6Rih:5&tX(bg)shbg4XAh%0GcV5gFVl[!R=O/WbPb(T#`H)jO%am2VNKYBJTD+UEa2eKj'
%rZj2E'S<0hg.r]MWhh5N$6dfMMMC\h`@i:8Tl>05i=R#:AMlK9!MBe[fdLk9LKVG]p_KF+1O)ZH7]Zcmrmb:HP5e'\9$MOTr5[^:
%ljK^@o1]XLH0WZeUW+2_^n1lB+uJlF<&OK-TtJ0F:BYE-1WY>R7F[8O+JVW6cI@7&c+@UP;[s_RQ&FD)86Y9Gji3id%.b="qa:3?
%4]&9'A:Q.4D`9O?6M+,geq8BjBK=`&%/;*dB?bk*E:B49k-Lc-AHHaUqJ0&Y<>b^Ol&Ne]T4;2dMg'/D1&U=&Pf\1-3oH5T)h&YF
%"_/EBG:443o(<qC2m:GC0ilj.m\<=Ceq(#hRh"-V@p+%9eiV4G/@43]$E6_=g-rHa83$]kG(Q%=(&0tD(j6thdKT%Fb#rf%[Eb#[
%K$\kr".OnGUg2kn[&]mSBcU^URK+0.U];9D7:=G8=#d*3?#Kjt&(K/gAj>F3(0l5G`'/EZ'LND64o^?q.c]YV")]LaJ<9[%?NKR.
%7>!=)*):ri9!Q61JZl>q/-Pq^I-YZ"N4]g5L8oCV2/Wf!e#W^^!06jiNmm!<DT0Sgq6=916hrET[8')nmOF6F2<=rN$V!iS6r$;3
%s(FlOG+V"j0>Lh5A8qBY"ReupifL-OJ=(b!o1'HmnE5n.7ZX3jBbOD7BO1mUo"L>o4;Laa;:/kn*[HCKT[C_#OZh>rAT#Y&i=&T*
%@[7jsD_:HMdYd>uUdl#n8h7"n[M_Hg-RN5&q33iU<4mjH9KqR1VH&b3cn8QaJ5pQDPs$O!>I>IuXsDi&qdRBOH';X&DiacuSu6=r
%K9^?l>gk:[1<7hW0mJY;%<1C,g/qk$/Cnc`V7,N1KV3.oK)>"&>7d8I,;'qhIOqiJK@0RB5&B5e/U4H]Ii^l^R<_PDJF9pf.4RM-
%NId.S^oA$Prq*i(9+3erG#enY%ROgT$9BP1<5A(g)M"JjdCQn]-<RPmZoI(`&YQ/br<-rFb?2Ulrr2W3<C2&:A2lZFkl=\_KU^3J
%1m2=)k)5%1<<=I+h+B]_JZXpJ&f/Y4U'5.olumn(?i""`P,bsu$+69ih[1WRa)^9!n9$?UTl$n%:VkT[=oqKdE!9qLXlCpM["k:.
%._Au<:cC]mU#TuQ#3=6=!aHB6V4YAB+jdj'(D%QlEmoOp`jY6iGKGQ0:G$QKY$11sl]P`^#[9s7$MqM.fHh!\,<be.,f=h_TRrDB
%8Qc4q$6UJ@-0r%6-X%-UAWaRBd4(<_#VFH99C&Q_;R78J2.J3Mi4<4AkKiFVll\N@$HA/5mLgF]DtLC^EZi.Wn1ISEiVS2TS=GA:
%(FATM9^FeSCPQ^$&dZP3aZ2(!pL:=K_[M!r5EM3X_]%@MTThG/IT&-B6/h<1+#(p@W8:m]#)DTJZ^N!jP'oo$O4)uh<2Ta36I8Z,
%W?3H=*;+7Cng=DRM-B'`CdOQe"Y<gOff5R/N,TrrTgnr>9m;uJfenqbS,/7DcH#U7eY%=MOQ6_[@/0#-+lo-.r,T01jQAa+8?e:A
%*T[tpVr<#>N#AZsR]n!X;=^DZEqggM,Gl/7!:KhPFhVeh](R%Epo78_J?1rI!\4gg*#%C#(LF]NOtAXaWKj^WbEe%k9Xsg`^3TlJ
%iU!?Q'Wd'QK8(hT.R1a0EZk`%/9U)&JDRr[d^&%"YUo@^5BiU$::UDLfnXh3/lHSK(4SQ3DOh+shA3,g?0EUo!eCIg:lsu>FGEc\
%ko,.Q<_q/2&OaObJaMSF5b6&&X/93U:KQ5RdP,8/-Q*@kkIHGs[KM!K;#oqaML&%PeQ6k^QQ:6CR,@#OV5*!F+5Ti&1MF5rUno0e
%FN>mn_5?1(6RZ94)d`@?X^SB4*DM@#r">>?We:;)'3pR_Dh>b$P&q7Ff^]mN>Ye\I5s)G;O@ndaKcZS:'XdY<d-A-:8D?KjOMIZG
%_CZC8n[,&Fa/\kG/VN70l>pNoe@q")nOQFJX'($sqcOsokEsW"@'e]7eiF__b=r+[LB8d1A8(>_CdX!Eb/OPs=0q2GMR!$7L*=Js
%58m5h&`S*_UicS`[)8OYjnsNfK,q!T>b$kbal"_J3[BbkM5.,RB[^-G-39$![k;!$<T01H]\LJ\%+iE$>lG3]8r?MhkU-if0@1gn
%Kh1eXe**@Y\Yd9qm.JZLF8'N[DE2epUG?pQ`2GR/a25+*?B>Y"o+L]_@'U-BOH>lM!t#9[hnL`'A<Wat"+O6%UWgl&iD8>4!,t)%
%QYkW?)6Z@ZZ<0$#]pm>fpMKjLkgCK[HrEnC;<HR7>e]`':Gfb'JW3?m^(ZGWY]Ap(>rtt9<KI+ZZ]e^p97`u%#D-mC0"JFo+JPs$
%&8]i:g3)Rc'2b@6r,^Ut03842g5U@LV.cEH3]XeV*e#)J(V^AJ1PjG_K9XYO'XZ[ZRqt+ko.sj+5=^T]L<rdLZ$29RQdIm5()N(h
%"ikdGNrsCF/:#q)U*C[=k%1$*enpiI*b[J;aCPuPPf<qA(*8GcNji`5;QK^d4Vsj(Eo@fJmeR1h8h,bUX&PSD!O$!UVE(K,Wa<E*
%rLTM$[$/$FA//LFS/Ea_CsZZh+-7N84Z@M5@3h$;];D/Mc\in%)k/'1$pE3VbnU(ZZW'0&_7V-Z5soKGNY)A6Z?NnLG_O.DK3Zkm
%@.u@r'<!98Y-^a1M^KV`RtN@&,3"&-*sN_P'ipScJ7cU:6KXqu$klhm*7[_247DAI_9][Sa)s@?/03t@<W+NRNK^U/rSg`;\l*nV
%F=F1C^_Y'm)fVXVap8hjAu+BA!:5^n8FpMXH`<&(:O`gCW-:qI%MVS%F)NM,KNO6_8urlglE&@\<Z@]qMHOrM\Rk,Z1D.M3g2p9!
%oEW"ND`"B%r.CFl$kRgi1.EEUT1:UlQ>jDtl-cJ&j5ltD/nc"6F!3g7:\*^'BLDjE^e\(#&03'Y6KFk3d*#2NnTmge2X,q#rQcR3
%]Q>^=J'CTh]7]oSD*P`>g]bap>;09S*:2)U>f!Y0@S(-di\97(,.I!gLT'_\_R('5A(X2pK`\478Q4e!jhMk++4PB%1@,N!U.DQ6
%,8I\C,WNqug<Y^/Tc#Zgk*Og$.g&?'0h:i7A;+heQ_S5k![PdJBm^G`Yetb-4SLZrQ))=`rCn_S?q8/TdsjHjSrMNGObN7IE(i6;
%)!0JW'+H^:CV"Or<m5m>C?d;iUVD7#F%MZ-6UWoE5qX8'/(&$=4i1bs)MPHqJ%H:^ac8Te),WgYaDm"\<cN?:)sP\hMudNF1(#%L
%g#fe4*B/RAGq(Ve1n(:(@7+U:BN\br!j>-3pWF_q:%>ZO>3_npU#-ke4`SgQj<kV(@"GsK6/h!AaZDha0A2pLG,Umn#e1TpRc=4\
%fY+pJ)Go6]q]dQMR$Ej"%\m<eqs[-a0NKoZURfVL,U$"'L?Is"eAYs53l7C51+skZ;5:Hc&p4(mY6u<HSWYRf)$[dECuD@#e?&iG
%Im*7#_dhORnGPY\/bp=d=)8nU=fW<*IiiUErXZ23buE_CQO[*eW*Gu@3r,m%EA4C]>?V64ZpaOj<W`h\-m&8&XLSb1*$\U2TZ3mb
%o6u-:1XO_"C4r7I>bJd$F!p0M@ITM'a\kL5*ISo81eZ5GN!^O'h)%KY:tjW9bRfNGTk^A,T.]!4&CDL&as^YcjdtO!0OaN!+%<PK
%!*a\K:qN?fEAV8Z*M?5p7PtP[_:k964K/&g4T.bCnQq>u5QYA=IdFs]b)se2fb$-r2?1t9+e*h@nWl5ebcdBPo<ndl=.i['6_C0d
%]BpAppN4n>VNP4WZS(j;Ah>l7NV@:i]W$!G)Ueh@#WU#`>;jB6bYR1!qC3Z+$KCE3#HLC6&Sm3j6INt?dt"c-n.9A_TVrr_NBWrX
%nH3P9\"U[+;qs8O=KJRk"[3r+'un?Ieb&KcJpg,\-:ie2S;njL.k+10]g4uAMZK'e_)If^M3Rc;2<"pRSo?,C6?_[l$UN"_$$O4F
%]Nnk?*mI%:R"#14o8)+L?EeJo/65jfMsSmkne%7S$Ft@("j`Ws+R)J$F:'"W\4fuXHqAU@J=bG3Li-$P4*C[]5'Lhk@ZdU@!FT27
%[Q'<"J$*19=';_%f+SLlF?2RJQl\1Bku5HO#]VE<T%N;h<!U]g_/$ssLO*h03D=iZSl'gc2+G/sih@IHBA+4A1!&#JO^t*hh;gQP
%i#,,5W(3$Q)&aCS)XUcQTO?0q*+H)=A4BP:c510";3rQnQ$:hjf8(!-&LnX[;ooVl5#4n]G<((]Y/2a/N,,ZF,?1q6<8/gs#Z%I:
%_P^M6A1sZECI>9F:)c&'jgjH[[4sF8oTGZ@\#2VjKW-rM4USaPl\6KmE&0J5Wn:EpFi5(*L0j]rUIMM":]":/%PO^4O8_VeTppjg
%)9_A8FuX@k+qko[1i@TCQSY-TgVOqVfig&E%-e!,</dmJ#mkt'.(u9:LFDsCR[@cN9Kf>7Gn4X_"8PoJFj<SZBn[<($GY7Q,61`4
%C'/6O4TK)++fK,e.Bd[j?utF)R0lV26JVUUrnJS^=T`jM3s,^G,TrH`LP-^j5s\ps`c?#hQqF$*!ul!k#=Af70[^BX"@96s"!T]a
%huXn>!!b9`^jut45QCuj:p;&B'Mu#a!=BTUJ7]'P!>#r1!%)N!Ahk-i\r+\cRQ.:FG7Maj\!iS12,6_9!,Y?>mX0^03fYo4i+cd\
%CWB,m8g4K.bt]>>!u*<EJ:[q<:p9p%7Kj/X5T>=YgqAU;U63<m(fjZG.k<-N8m"6V*`_d0WiE"tWiE@tU7c6t;3f>TE&Cn&CUI8C
%pR%+)1X8CF,L]Bbj&E`(?Q<u$SI<E22cF_2YhOq7C;';'X%s`tlLd4.iR@SimG:/YQWW.7YE4QlVpI`e:gG[8kEsRa?HVB"SmCao
%q3B)G5FXI6MDLqclPZ8^HG37\!!9g=i`q2&CQ?9Sb&j#@'fE(oXK3\K/ukom<>AMnWi@PK$`ZFi*`PSiTQ7SJ/siV=d;lTtemc>/
%P-a5eP$h!UNRZXON#Y;V7Re)9c%Zt$@TYuA68rO9M7ReFWb.9O62/^BIr.a?YOF"=T',p9n#Z+jSBpBi.f#'/?Fa<IQaW"u5JO2.
%3'3n1l#G91.go(tcH=Qr^-4\A\sQ->j6Wj#POC,7SG@&MC/uU<0[>VFj:c2!e^)<KcH`MIB-ossfaY-fpgX&FZ1/_9$QrhS^A+q,
%'s2`T(E)&-;8k#i$F@lT,dBYSdm]U+&7'CCMl`E8k:&ul7]=cc[V2b+Fh2tGFJosRA/qKca!jnWV9"PYOZ]K^M3dOc0#OfGH_MEY
%a)9lgW^]u5CCu!T]?65Z+I.`+6[Y8TG[VAf&@sBFc9._5T$J#n+_SsB`nVOiL[9X>&hVSn6r.jQUo6j"292GgC"&sDY\VjnkmPu$
%";,JTd:CUkj!rHD*g=NOWZX%@Jo'%S-161Ul@!$rC8KHq[7](OVlH;df!uMnW?.h=D;-pc=gFf6U]$Eg+$?SJZ9<hO.7"9GFRtlf
%WN$Wbe![17>.<L0\hOen]rE$09Um?rii_/Q;4Jn-cAeorOej"sfr\;NMe%skb$Pp*at0*-7H4Y&+*XM-9X5qe(Q7E,AL/EdAG(sM
%Z>P9TR!e,[mR*Qj1o(4p?G&Xc52Mm7dF1e7]&#]T*L#[r=qt,NWo2Rk&0'HKE@Q28p4u%_791.$G893MZ2#6fjJ4.nJ'@-rhg3L<
%53CF(OdY>OM3:oO5O'E3r;9gLYL+t;@8-(#_:UE'QlCE$(:I4G`AD2!O:BI9GBX5$Qcm?7:)7qNV[G95qDq]-CQu#]kL,s2+h&D2
%:GLpCWA&&nI6qi@S%9!6>s!.?(,q($5&Sh?a:2B@B'EeA[nj-,M)/#bjbVpo>$^jJ2+2b$XKb-qCoiSd[4I!0l6XnXYA;,"6lOOf
%6W+nhH1?t_6*c86F]u/08n?#!e^C!a`jZMe7S\1r4>Tu<g7^3ce:+EtUn(/2aE(o422M6t-ZtWt`BeUoKMI7hbLn92A6>D4Hdm><
%luX\:W(?9!cIBb1k/nrEW5FfpG3k`]`(dcW-R4fu9tZB/\p'[uF",Ai`Dpr&@PkK"*JGZtb&?R*6ccCVIn6uu3kC&0iUoNTAEnJM
%)6""oV)'j'VCXPKVN8r%,uW'3AhbLIZT8O!`Fe+>;9NWV-c_>gQ#-<rA!Mj:-GGYr;mSR+rdDZ%3]l.8]j._abHT5m(8:A4rZ`tc
%nl!l&<)dJYjO`+>J"<k%%4A),^M[?aeYb^^4.Ae-H<H0Rq=[C>[3rPTV4si9$'0a187PZ#ELC]TAp[D:Od1-oQ*iFl7;OM6l/m"#
%7OC$N4(>k'R7W4sHII0uBq=^^)(Wa7jsi-ul*)6j%IH2c*e.8CQW`F\,GEl=@R$#rOo.gLUK_9['CljVQ1&;VU"'r\a!kJR=ht.C
%(mJm_HIAg3"sb[a6`)Er7iDco<IR7mMLjQ#aLn7s&n5h0.a+n3E6f>:"EWXY"9c9/5-X!b:^`$7/=7iMj)Ou2W'Iko!/$ubR6>"k
%,Q39f6%S/nG@1S0R!+4<WXVJV(mo8t_iJ1/48;)"i-,@B+j_)<%)IZ>k$V#q3Nu-f!;t2N_(+Df+9TL1_/PQF_]ci+L(hE7#77JO
%_$<:4Ad`,,n-i;%)\NWq_/KQ>'^J[!K=fY'2P8;AjC6E%3iY,l5*^X%-Et8g(7=%"F#tKiF;,.*ODnT0=L\eFFu3GMciIS6!!!e%
%?n="J#V7[G_%$eYFs'[="ubFJ:j<Uo#5!RFN>"G>c!co?"fW<E_KTSMWs;:Fj&tfO\21?,$QjQsT*lj2BuOZueS\i,%#cZn3dsoF
%@"cC1W)5l=P2a[P<S<_hkVs)UOnC3L<7ZEPog*1(6:6U8;N5.!N%.FH,MlBDV_L0"3--)f1HAqbN<*m9FuH--q?AcW'iQ+XX"h7?
%_7)J&#VTAROml*70&;3HBLEXDQMCooF[;@N=ZMK>hLg\X@s2_6kq4G1<+/e1(6)i7]#dsbCodAD[L+LB4m4[Qd^7.o^WKD6W[t<M
%U0^25,r-jsdZH5ZLh>5djKM]7m&hLTnju]4]eg'.H5Q,7<:km8@e6k0(*/)kYB&[$d9k=U]K0O;@<MQb07L0GAql7+4(O,dTAO^6
%gYM*l0CC33q\q;&18aIN%RWWHViY\BiNtq)p6G*hZh_*p`.o2S/VGIjqNbWo@jFF\lV/#0,*PnNMD:5SS#n<]a?PTn)#b[:D@pkL
%e!%M#?6cr(2>X=DVr6*]aAO:q$<GA&;2mDB(\./J<--O/j@$3;m5NX!&ap?l'qWei^,qM2n-h%S`^:D`LG/)-R@l(X0%QQ:PaLXj
%RguQu`*H#i-<,+Rf:c7/7:Jct,a[h4]O1Y8=(1d_k+3`a@h-,ZW:[)lB$RF!:>V/6s28":qBHX\eeiMgY4Reo!tkssQ)2E:(e4,$
%gV+0Br7EJph9/L`i`qF)RaI@LA!Ei?pP8qYh4kORET/_q)53EPd6Z(%OG/[,>Z!8PX7=grL1HO-JZ"e=aUF`!.2P?e<9EH\Um<F3
%1+?G/$3)Dt12!bqL7Nm\oA?OaGU6ZFHj7'6EIOW^-@?#h;Y3`TL`JS[F.Ks"NgBsri1qif:%6Fg"1R9'ig;O+UP/8[-a]q0\78oQ
%8:PV<0\5#^*6+A%.IID4\[nh^`G]]Va)>?S@MCrED_MsnKio!^[(#Y((G.#9-=Jh])mT`THGZMFS>kIj*+`Xr%f5jY^XF[2jW.Vm
%2]s]NF?ZFl)q=CDI3kn9Q_9u4-lV&)Hn/o5:Njk=>HJgX[D#aF:O^]_`-\2@>7),gTE,:b@"J\3:p<4D!XB7#TE?#:JUmk.3Zs"c
%."L4W"pu/+GX+Ot#6P,B*("TF"UdSgTRdLk5S*sK5lj+k/1e"5#Mt"TJT:sXZ,$oO0UNiuda*K]-la3t=bI3KE4Fj@c3C#\%1%@`
%M'Y]p$O6o"FMSB-5WCIE`J0%ucnGb2'CXjk'RW`1koFS""ZmP:%M3GY0KLm)T2;jZ6?F$8lEp1L7Nio^RVp1sT$M<;aOYZCP]T1t
%%'Doh_[.Kt&;-u-8\MN=bO4W9KOVf**?7\)-S-B:`Gc3?K0dXr80EL%%LPRUE+!12%RPaK'<KK@:kTdhTO>Y`a:5R#<HCWEN*/8/
%Zf`!46a[BN(/>@>%YoZkR"E0aT*$#FHDoe!AZ;VC(f`TAKOAgC4Od!^^gI=,(liPS%M#7A:f&j"M@YNN+E?C)7t%\`979@S&luGg
%"S:Sk(dfb%_2odK_iUDI%_RM5lPOMNAgE2]&.4%GT;`!``_]*::a!+'^ha,#fKfSdJm;*q:bG57N1sBt5ZjsH+On6Ici\qW/D+d;
%64\g6a;5=]:Jh;Ak,lQd]`p**,dg3S,Z:GT-OV^;XC'r+:^M7ud'qsD7):!HUTfi!+&G3B)jblf7SB+@U.dmCM>K)<nA_\(UZtg"
%%@8)"r+QgP+:8m#TPQN*>YkKS0dH?d66K,(>QGdGYQ+c7e=ZpK7WiA<=g.mL.p0$KJYA1)a(h\6*Fkr]8h5WpRLDrnO5F9h%@MSX
%oi6,1&sGh`*'$)C,i@]Q;P-UmEGc+Z;2(pgTIJ.+m&KJZffNt&=(J^7fZ6q3;uGAAnqTr;ARdO\Kf"Z_bDHh4i_um6QYrs*NLSdc
%-A3Dn5BUViRmL5;cq%/#'h[Ym87uZlCfqqqAC'<HEf*_;)WaB?%W,an'O+pd'5(pRPd84e)`bpk<GSUS<p]YY;66-RLTtHNjIEjA
%3,]LDQC<];PNTJ$pGeK*/rl4JG>(G#e$?!<apkf.Sh\sa0j;>oVkWRKV:M3#g;kP<4bMJ#OGa:MeK289;([99bbZ+U@`->emZ-ho
%JBm[k4i(4=[7(FO/?WQ(D=)>VKbqD<?#0(BEV-a4U`=H9^.+DkN8L?`3"DR.o%R*mqq^QfXja,dK$K/9(/p*DC^)-%.$o'jPjdro
%liq'Wh10rO7ucEA7ok-(aRP>=Mb4dtMn<L5pU^nqK1k5UA.tGoUN)gIOL$Csc4lO<W!"rU<BZF)1c#47+CGir!!!!m'EnW71%BM0
%g&Mfe#?a5C69ZA))C?jbRuE#_J1Ses!/!NN__;WrAfsMN!7:l>57=fi?5M1A*M26IY)?pV8NcVPf6b]`IR2B90bHKEP5VP]&F/AF
%KO^'sOO0H7Jc,Z"lb;*49c``X68SLMa6Y8Ce5%CgNu\oa`7iMONpbehYU7+L(RP(-5:-6OG_t+W:51H`TD$d:"roMO<Y%*+?+H,1
%_+ThSkM.[3a:(ncJkN!I<425%S.P)fe0Xmr/:+WY2>gGXA03#2b)UeH3emBT7Io[b#kadKfGjtg$_[7[?i38QXr*0eX5ZeMKXF&Z
%?'UaCP]X$3"E#a@@fD6\HKU<W:rNoW9e9DaS4dCCf4rsAJ[3I"j1@+orcp@T33Q2ioF-QJ&ST0>;1.L#4E(;s?&T;]5G8Wd)g8\C
%PeV=Xm^`f)?Z-dms.Xtj)g9g5$r>!W7BbE;44.9,Htr.IUd59b;T\2<DID-,G]>\IP0tSLDVom2_),8RJe#*:'Bq?==k!jC-\DJM
%#aq;u9h/XW4HdCNP1*7m#C)-DCn1u:ARV5-0\]29qhW`-Fho/qbU3DYqjHkVmPXH)%NOt/_WkSW3YD3-=B)*m)#XmZ2,Y_Es+ZH3
%e;@*#/]+6b<1h@VDT0.1XGdFcrL7`4_&TobKarp-h1J_/#m=iRn3l.^F&JAh>6rr)I1hEKL(n]m%maK9a:c_um<-C(KjO*EHQ<O3
%%B4uU)aNC#$pqds&;")/<`Zc8jAR-X]EF=C-N(4Z(kp$;]%lmaW%bp47<mV;Pq9%/R](YNe4YM/5:tVD8`VG\[u'ZMMBJsBMZojQ
%3/je`F=t[k!JR:%dfYQQ0tR;#D[>Bul2Cu>DN5Y3^&l!D4_j<#`("JMkr's)\*D_5.CLYo09)JkYE)I=SW,9J5<\9ODTnkpUgEcF
%8#>R,7H`Th#'3oDbVfm0&A9\IDS4YtBIu:U;Zc>Tkn#NZ446]b$QQj8]El#LC;,cV64H6pCN]k@[9hcG/js&+FU(errFU.,2JkNk
%B#'<QZQ+]emKb377;0<nrJ#X!3a-T,qtS"Y"5+cMEeD.m96b4@JAc>ic`HgKF:1H@6pKY+UJT:a<rmf2HG(L',0W^WmH/KfVD)Es
%6[e&0jlo?2=-l=*>LXh3!XH+bnCPPNQ$'lP(885B?Wo82d5RrsMD):e:$2\kh)nQ)P]iJTXQ\%%QWY]C[YlKu;J-:.VPYBu!=-r2
%;of4t?t:9lj:^f]BV7mld2$)fb=bN`[)SJrqi%j2WS9U&;B.r!"'+b1Y38/!d$QH)2[^#bXZ12=M.f$UjpfOc8qa4P'Wl]Ce"hdN
%iG,&YR2f:0.3'*a>]a-QV&g0R@EID8_Prn*s"A\PS7]_lRn#dOo"PnGX]A<SS_DLI6#Or.W$#sE(14#dH=u?A0r5Rqg+(O5Lh(A0
%/k,B+pfZ*J89`iUb_>VceLi&BjafCsMn8r<^%Z#0H\/8$\:qi3<6?]cU,kogn46#j6&!EI2cqSXbYJZ:o9BNa6"Y!!m^Ufu!9s3u
%T)%0k2FbPmM`RrbQO)"j);te;R1u6JDHMi':Mgg4:e]q>,2"DJCA%f&HItsOl>^E(diO+"^.W]#0/f4AEMpfh:'S8C0RtQYN3p-o
%6du0L#E(V7.]PD)J1!c?V!g^daop3G,pj:eBQoAb9H.HR&Oa2'!J2U._aum'"uq,Lf.]O0L:.]s/DGlp72B&O'`cND@>nAV2/<?Y
%63sp;*q\W8!*moZT_Sb^bmNB"'27p>W06EGR)QjS"9mN8"(8M<"u?HsOTBt6rNjcSi!ADdTtqcKl1b+sc22KYI48P&f+rgJRX9O:
%4\.U3IsCt3.1\i`0/LGZ9&BI@gKi=q:g2IhK^./okr9-`=;C";lHB':EYHl@Hp7(e.f>/-*+m$rVRu`#b?[QID/7T)'kKW.JUQ!O
%6\DOB[o0toe,<P"Y%aVm%FFS*cHj2KE1>'L_<!8:Eeu0sW<*sVDYu(=rnC!QVAg;h,lC=Kgun\pWV4<?p:_m7I3uB1ma2cNaPGTh
%3u6TI3GUp'[)YnIB+e>qITW$7FaXtdddeksX"0LQepB.&2pWtJ$rrF<eD\oT263^a_GW3,kuTZe*.oZL*)t;^Guo;M@dA,m33aZs
%J,Pe5C.oc$9D,%@)HgWsnMTub.)RP^Q.mPP`K8?i7ltjRQq`RT'#q8n,#7Po0eMD-j'dqkcl/NCOFltb?18>D+JofK8,"r$q)+9+
%RJHTMUt3.\o<'\)Trm-B&D>kZFkumSj32OOd^VY.\2VqW:lCh>6JK%uXj1"mP@b`%*SSKslpo#'lC^i%4Z:]F2)0j=ARH@-^@$u*
%I?pK5SpF%o<GNl(C@B#[Y.9-oYkfWCqXmU7Pu7tAU1PUJWlUC+^Br(Ads^W3gSfcrQ6_Y!l)A[P7UK]R9S?=b\scIZcP6SW"!g\4
%F1:m#MKs$44'4\;j'"I@)B?hQ)nC:>8kd^g3TKPL+B$26YeXKL??"^Pi`_Y#ad'/+`JRP#M@.Mt_T?#q"C"PDgc7.=M,Z3`fH_SA
%IZNOD*G6r/']Xq,9]PeV'X,<VS/O#h>Gs'T3-8'JFVA@d&ib"Xc5R=Moa^KR#0eX8=1HT]9Ym;s![`NgJVCTO^]F9@*2j6/,N?@g
%]OrOP<ub=='53:*]^,X6e,)YZIJK[deA6R,95i^OTBO)VoQF[*3W_t=rBYn&_>.W.>coD+C4P?1]A(5?8##>bhcdRV>.Q&?V#fC*
%2k()>pRPjFH"..\@Q5ptDM=sM!5-tOQ$'^EQ!E8,[O%-gOsE-X^P^QB$+*aL(TIA=WTt\k669"Wr_mjg:(V3I1.%k_[@F*kl55]$
%nfn4>Z+[I,4@`WadnlY@<0EXT)uG1Bl^rj2:QDXap>Ybpls(KOK6<]snkFd8)d6UNPD\L4R>hA*"lh;q]e@/O>r>j0g5*/s=GbS+
%`&"18V5He2-6#s!RY@ONN.c2+E,%\@N?;dgcT4il=ht]J?%Z:Ml%rlNI$\,=(<nBFGle<Y\"m@MEA^([arW<b*&86<*;cIh=Q._s
%fQ^3e(%=C-Jj.XLPJj-k'9[&?I(C&_Muh,C!&L2gR_nf:kIJPnEDE&uQNoG-BTi5uJR(AumHgCs.qRkR38Odj8_tQg[VBR.ft+I&
%Wm"a_>R,tOir"R=<cF7GE(>XTOcD$;1]hYb^8q::Ho:(Vlc'`U,dq:C.L^+'r[+k,\LBo5`,:eVPsqYn#hsV'kaS<jN0/3ja/:Um
%-0Z0JRGbSr(WEt=:Qtsl9ct\g1)p8qI=J*]W`o5"E:\,7q_\,K!NVB$(L!"n.9D%r1okP4X!GGeiirJ)"R^@9DY$WC9t)`5WA>hl
%-i_kND)c4P3?pO:)]FCJG`KQqrC9mM;lq(;OK3>;SrO`DaF3=q&oD-?[_at$S^o,l-*^8ZgB2uMD%Y.GH'0)k2Rc?-\Kn?>T204b
%YnfdP32C8f>q+ua/C7RMU3"NlbM`.J<"p>%`K<-=RhZ;`Ld5C%!#:5;]tg_^qhlfiT?FEL$/JkWAg0^GM[LA6CtTSbo#_@%aN^:@
%YS0iEaUY"h#h_\YS>r<"P4`9$"pH(nhcFp])`CO,q_\L^*TQ+3':N/LXA6dVfZO<8Bc"Uhi7NqkJ5#1g/XT0T$ldATna48J_gW1_
%=ZfXY`TXOa*"6d''o+Re$m:EsT782WboV]>BL:[M/E0EO,cS*Ef)hM]=,<4pV[CapG<T?K1:<od#c@QCN1\nWG-5_$^jX,rYl8U"
%5d+7u3!>8:(sEe<40#Cf%LnEjR4>`7bi#f5-7;AYD78C09_f@0j4+Oji2**JQ^#\?AOXmeL,qXrYlPMDpFN*OVemuHlUTbr5?%gd
%2PP70H-V/91^=Y:5%n3f[JOXf6ePN=Q94`.dXqN[L3HJ2VFIr5A94a5bG;=HOJNX4ZF$)_gE/S1T$8NNd4'8nZ(+=2(]_H\><@:Z
%KGj+d;426T8nCL!?`A&B\f)Km?KN/g<j9%TbY0^V[@Ie7<4hBeeF6$V[;Ts""8FV\@>`Eth##X/9`!L%NMYYg-B6's?ipKc^j'19
%fc/c)<ZSXGf7EWU!U;Om`b-X1F6$@ud[:(_006V?XDg4f*Yu]0TtUB/!Fc]e674&eW;K7B\O?l"+fILN4f[f9_%qiX=?>RNGUOb3
%rIC*_?>A=<e@SgP!<s:IfID-tjf]4oS>Zst&poo/_)[bn>NIS=g(<'-9O/qfqV`>bTb!7H^r._g$KUWB"LPF##hQX?`O2Y/[/Ym$
%?'>&>+kks<;mhP=5).L+bGZZ\C3XXWs+`h3puUsaM-ffN9I43H!W`L*b^?M4k(FEjqu3*WWV-sSQRfrZ?,"&NohkPbegW#WRn26D
%)sj#D[lB<m2AQ%=s2MB0-A0m8T+k*=7T6js'EP^sbd1Rb;g,nI"s4n@,^6$^6EPsqCQ^cs33nGp?:2j#_"]e]U0(g=V*H#q;LhQu
%*=A7Q\'Nt"g':5Bh@S.o5Q[DaB+*Q7LB[N;hpYXRC1a?p8^K58q\DGNRn]`=ATX'p7q!J32F52"Ani4.Hifk$#pkne_m+4kMPerL
%@i^=a)Gr@<+,gt3J&l;a\\YJ\IC-[FIe_q5i,GaEJi+91kX$K^k>e9uOAGjC?Qq+C%kqNW1",8\QfB<$&QFjlO9$RIQ0@M\5F3gu
%HNZE^Or]IeINKEpd?nYk3L@j:Gu=Cij"6oW2^IJH3fI4(eJf*)XG9Q1C`J%_H5h>K3r)=r@el`5Xf(&5Ygh$h<u'qQJU@s(b!)d6
%:eo7P!L+t@GXBDeLV3_M5q(G9g/XYho'fJ>1XdC!!p_B!6@2e1B<)FMnXiAffUbD3-[R%u4KONTQ"Z^<o9h29Nds09DcA5na^ZCg
%67c!s"pSTb>3=Nlk3#>;.h,Mg)',+RY+%f*U,@bt"80Icmh"+K-SOUX*<b/^ftXS,JD+oB\!m"-Vo]io>'/S#V("35L'9unOg3*S
%[WCNr"6^E*F?P925esjH@KsBc)oI@[:,9\ZLX=,`p'E]1blS?V45VjF"Mjap1ARGnBg\_rNMS1"BRAAgBpq(Eh<\ZS7ZA+u:F=iR
%&SHgJ`i%&K!oXh!r_I+kN2Bhhj='t/4Ek5XB:YDjr:\ZG*d&X$%f__0llJ&EJ!9#.W6G5pWa8f4+D7DFRd)QUB/*YW*?bf">&lXH
%P@3F,e4iP(B4guCf.sO$4X,Y0=[ei&S0Y7sH?(VV2q"?#]:HaQrD(Jp6^YS8'^dL0OV6j'_>Qb3Mo>I"e5e3nJuet?"qYfqF?CR#
%Vb)3^E+eoB_"VjLdYPu*T7eE-5tSRY&\l"1n/@W6#S,oW>"ZmsYCW")R'G6=l>3-dqmW6+bU"=>-`3BOS]='Q^Cm1i>XLdEju<7p
%:5q^;L5:<VZ)a(EO9[GLibh1eCjIscaig$Hm(r;4&pbN'"sUi#<PpLZW%iQN*E)&0GfJ+!(LAU_+3d4bH4=Pm"MW(^'Hh!!qe,f;
%FB&D<F*9BpVRo$F,p/%5KjN>I#ODi2lO,MK:@YMMTtp07^\tA<"J.B=JeYulW?o^uR6GL[CL&JN3k2LClSoPNh`E"l&l[#;)Z-@"
%>WLF2q$VW[%?p*KM$HnoYVG;MGO6M?faO+?<4.DOd%i:(5=[$kR.O@VKl*8]\)85[3TdrlWLE9-C+s<)MBEE2)Y#2+/EB9:rl,AW
%_(`foUaT>MThCS)6&=q\Fj!4R/EpVn-'u<\Q<<%WEN6EWCR;8)c$@eGaT]5rP;IBlC#G>%T]kp_-]7``^iKE+bV$jN5&]M5&e0%'
%ok]I,e>HIGkbE49-;=A0'=`0%gnDlXM0AW0d%!WT@2;@b;VsQDkFJ.aZYS'!]M;D'?u^1<LTCMP?SAO+[>_QiQj_3h$g!E@FQTk`
%=;4qr#Xj"a2FP=Hp2g!M?peI+;KCDmN\)(mU=?GO\'jm^,MJ"fHQAQ,*b4<W8oY!uQD0>gp8:`_G+m9!5o!$h1ui"bkiee)10h=b
%p-@"%p]/Rj*O9aK:)!`8HitM7HVrM9P(9*0$6!pYKn\2+k:>Ue'C,\91=IOS,$0AdO1AXf'G9Z\c9UI%n.ASl;srl0o%fMfAc$"u
%,#>YT/23p\M::jD7_%SED)MrFbX2rZJbHbP-rm]RK68^6:3f>;!ruU2\UbLLf.#b<Ga<Kj24>>8J=@<jA5P_NTk0_-nZcL!HP1cg
%:DEah.H9E..=@28Anl;i-NNTRY1In93A`c^AZ,IIh_Q/n+?QhE*cX_B(hpqlhZq7j$pD_oT22Wo[]VYD\P(@a'C@Iu`"Vj,M+5IJ
%OS5>k$oC@<pdWVb-)a<XICV5J_V$-L+An9c;MB3>.KJ6WhPjT6`X2;&oTbC=4sK>)"l<J@bKqZqLB%B+%'k_sK.l%kgc64J'sL$>
%hc>'Nj.uY<dS57<^7Mt",7Wg3Y#B:QpWYT+JV>Ftc./hqm]M0D!:Y,F>5%_k0(/$aY>>HEX(D#_TS.=#UBb<i<$)jl46k5,Yb!gM
%el_L<&S\,3@8HtRkh>,r)/mKMN'N[!<o8RWmnCup*)I=QZX-*I/!Y`H&"#?*gj=(TVB/Xp)Qm*JLIOJWY_tJMCqpH<KtjXu`J]@t
%W[TYWR7_JLE-ibNLKk;3bF/Z<_]WWf5Y^fqK?tLH@b8]'S'Q+83Z8t)=]]i,>SW2[J.?Q7/9mbrF]C;o[hUki03VtLiqO;Bh2%te
%5[G@@C4S>;--QU^an(KBBJW";gao9+[':FW0ud>5h(3rUaGJheW3^-P'HaUFC?(Rm*]khSg3qj_5aYjr*)h+B,o'.nY2qX#3BOu(
%\pE4GNKOJoKaok)gQ#\Qd*WiPPIM_o)+Emj\]na1;3TE^'(CJum4.)Q8cd&@RJ"M8&N@>0[4/.KOCWNDr/!-Fa9"nAE)"#u,HRDS
%dE7"%7.<]IN!Q`$LkiMSg,EJM0?R$4QSfaVJ[V-@S4GN$)/n&/-mT'Lf&W1nH@J[h%=!oH[t,UR/OGLeTD3ci!$!j:=tl7D7IMs"
%FmPRTP;50$F_oEt/(FmDIiT9_=hKrqYWb^+hd<dS":>'8i,iWa<mm!4s'd\t':P/fG`>P'd6r2re5d$dQ/sJ!jP1)[T37uN.*S:'
%_WfEQ#4@1D"IZd#^+=**oje\iitRS[`"/*IgIc`ABPMB$;"_"ZjN3$a4V('3O6!<#T@u*"n%$P1D9,)1*$$QY[=%_]8oJ-n48D)S
%jQh_^P(ZF18V>Z_Y[4F1K#lbb"n>[8]?6/o=K&Hlf;UQtm)+TY^RL?@LMPItPe$Mh#8JD=Tjc?;%T0AcTrp#H7K@YaA*ZJ\c7709
%F-fjS#k\\'!+396Ec'Dt,[7_@-6WS91kBP>,2T8cUSajc/1G$;eo;3,U)SR`2aX##:Ed-j*P99=l*0gs-'t&B\AF&(eDJ?M4nJ^n
%RTSnp6=eblH@HDQ1h>BoRP?V3F?#Ms0,Hl2R@*DDMZOTQdn:+JoU-;gAO>O7'S2fH0qho7L/fX9LkOu*H3Ap9#jt.,AUSf1TJsDd
%SPOTlHh&_)\gb\.2]*t*[?-Fk<4Uun`=k_!%9BjWV+1Eg92'4'<kXlbaacOpPTggIE*e$S]H!tI/&&e%f+o%"/_4B+%gF[WI.qS;
%VLApQ,2thZk#].BM_c&6_K$DcMIYSk<MV_rKUc$pSpQ7[$K]gJr]S+,fmT<13*bK]OrEIJ1@M(e`;;P)m?pd`Hk96ajnr9#-nDMd
%7/iO711Yp*VprrhemQc\aJ$<<lqbOXG["Pe+`u7iCa2hJNUQCa".5R"gmao/3r0nIU9]<_d5NV2*WG?:gFX6^Gl69qZuU_3#_'*=
%bmG:_gm"j4+\WQuVsLb[^VBr9V4NH@c%GYLDTE%^_MD*d?[NUpnnn)%n>4I2@NDl4n.`BZ)VSR([CJR4?AK[3>t\Fd<i$cp6Jg,8
%Au+@q+7M:OJS11-I:kpVLSX>cn[[g+n!d8Pj^PN:*rdI"a0k>A&\-,ACbjN,$&M@TOg5aaRk(ll4h/@m:#sn.0V*L;=TX?!rde:r
%C9NAB2J0[:PmIr?r-Ad;FaDM=Dp6QoJK?Ic<'COB3M_!)=[;_Ijcg'*<D4/<AR`LRU,f&!k5t=0i3f0/rT57aD`D&rcsCq/TLkj(
%90WdXmpbBAm6f4X[>nCAANK!?%66=/=AjW[.*q[ac]I&":-c6KVg<A(NV6`o^rcHITF.Y6)R=m>(,K\^BqVp4>ld+nRGApa0g[4U
%HS#s(3!VIi'#7h?*OK;/gKL1Ben(*,m*e_i6t\lM>Ep#_=<aYf6f!MkFuB`hlNr*(V*\'c/^1Ug6FmbK(;d(V.hT&A.@QPlHcPqB
%;;:<%.[<[eF!cW3oi.!H;ibpE6ZaN0r%MfHJc7Rm<f`k'AVrHe^gaeUZKRQ)K+P*/(\p640hJN>Sm)N;*Y_P<=.35776K46^i-TM
%Lr7RI%MTS:a$%5q\r\oZm<5!ccf9j*4<1sC?PtFL(7&94mI8N;,hNF2jEiY\e4-6]L%T;rB^,r_0+A!P;\]7(9*.(aLRNt?(XW\"
%^R!Jl:%_cd)!KbGS&_jo5)LQ*ZsYF1]ottT"n%',og\bNU?Xr03.32%Tb8c4,s<%#o-ms5j=0kBVQ&8mCMiQ.1FI8\+XF:ZW4+'\
%HBak7E9/MJRiUVH*?<f;8e9K=o.0Zj\29A`FB0.\gO1IaiS;UP+2gEqrNek2_.2sEK86.8%AsR:2RH,&TXH3i`t``8n7I*=0,O<"
%kRjao+q'4mNa2huB!'2?m6Ej^ZLr$UB%jJV'6o\1aq_VoFM;9E&hEHJKPGsr_-rLh#<iX?\&qr),(-7Oi%5J?P6=R3"@q(a,9aB[
%?7f5&O5cOPNk9c'n4N]RJ3>XECRmU*-4(ij/+jneo5S],kX-%OQrR=_31llJG`L[A[)6`g(XiCFFJu,%])o1+,c0fX'\7oSFKY01
%V7.J'Y$N:_>h*$cF(fu!CKH'j.!OYV\sc7/]<]$i.TU[nB;Ap^XE*_iY4(2#4`4(HbL]i3Z:%G8<YkRYM'*Om!>e2tk"MO0lji-_
%j3!aUp>[U;2#:X:N!2ga%V"dT:tK[rdiH_ZTlTc<U29i_O9"`7Z;t_'$cV4Y1+M;a:WR=OP"N21J+-;8@7O&s)1ipr/u22XkJ\r2
%(Po:V3Y[+6n0dJ`O$La:d%:sX/jQ1r[\/*!BQJk)0a$=%W^PKi.T1_j,HF"qT.BM^k(p]r`EsBq4(@ne:*VS\fUg]e9;;k,NVD8a
%G;/.3;CYndldWW;*-b:^2);VDXiC&Y@NCHXGQL<"BRk(H_`i,\IMjXaPZciq(`hP<Z:<FpOBiBE%\5\SmZ,q9+>[)U3PF^Ap)1hI
%d*<NAU:@Z76r^<ENe5>^hN^AU^IcqT$h<%f)[SqiV]">JpuU'EUn9rEQ31Y/3V\P5Y/CreU#Q_9\e0[%L8j^?JUUJb8_&Tc8lb$)
%dgs&n"$NU1USmcZT)cl#O=LA]JU`nJkd4^)H3$eW%Z3.B1N5a^-!B:bOpl,6P<=Z;5!,]LQ-lr>JL'`Sre6eSLTX#IAd*Jo1L=mF
%1pf,ISduME$kEn88Jb':Q+SO"7/`+m>8N7N0$C$Uo.9K]mTci@'Kg)(g>dp-bR/U59r^W+%!Pu#F"1-rRM?EB92]Kr_af'h2CJ$'
%4W,Y*H./!KRS+s8-fARm5'-m.DI2bAn,.:kkmOonlVOtXRud=1Tgr'+qu_]1ZRNPbIE7M,m-Gt.RtB,TCl-0eUO5c-.ip=>WU>8e
%AT1o^%kc*^HU_H]iUf.d:HqE&PY"WJI`,**pfp_$_\9$m5uDu#2)A9l:u#%\Lfu6kefD3"O7Q<A4@(c*4j@\f*'jh%d0)Nn5ntRt
%+s0N5nI^*1iME>@/ok@XPcRFgMW)]\P.%+k8uUE5gWkN[QfHA%'L`=sDJm)SemT%$5VGs$YotL@M*WKs8ArI_Fb$fqqbN`&_%qSC
%:7-m:(Pac)oku\G<E'E]ZWmlqY`g\]#8\@K!r\CPLA3(]HGu6+R@k:6N:^Jp:BY:M'Ct2&?7<Fd"5<hU4b++$9#Ui8<C"<=(A,cN
%TIR'-KC8hJ:r"+EL!pb>F920.2%'cPc?da/MBrU-^q=Y6knaEhW_7R@CB6q&Al$9:at3nE%dq>O:mB(SlT.HL(Q+uGF<`^-OTR.7
%XQGIi"l)PoDJ1[&U9^P+V4U#U^S6OUBVn0:DG0)a6rJE%X=M]^J_Vs>09i5)DIY1"A^Q1>m5l+)YBUN;I6f"`W:m;r;-[C!)ls8[
%5qP2J/\Bl7=XQJXQU/]NB/\4F3>@blbJnbVEeSlJQ"D[U`t@"V_Ku/pr'M?\d1BfT/\2jo6jBNtAHE.IGam!`Cqp5]Dm@ip?m(2%
%KYgpfG,MQ7Ws8++H@2UY3>D%@cAI\][mjS6"IKoK=M#hI)l1Nbl^C:>Bq,m1*CA>=piI^gILkLT0[QH&k@eHYJI#Wn(&kn)i,?OW
%?rar1-@4Q_;s%g'@ZVedr4lkHb6V<C=PH;nS<0u/VZ2Of2UG#\3h*TR+GlFZ!V`?S,]RI2G,"/)ft^$H]mpRYo!nBUep,V0=dH>6
%P0/7Y,S4LF#Rf,[K,ksq`T'o3%'O?8E$O<sm`^_RG[78?<Nl_V]hY^f@(,h7bd'?)_2YFcVHCP&c]8RIp9WNl1TrL"J4YH"1)rL[
%47JKh,UiYiq<AOSFG2cWmK;],d79Bd.,K;:!o>P5*7rL)6!k-TaDi@;!SL@ZOeh@`pC9RkDb4C(M=$*CWY$M6<ogm^SOJP7`-IJ(
%2Q@o/>*[49Q4u?tMT5/e+J[DbjlJQf(MUXQQ@,tj+#ECaqbY$<KsfK8pnPKJH7VC.i?$(@>^-[VR,?UA@.kp`65+O$PX\,<fU4c+
%*5H*lR)Ab;JqQ8-SXJpS!I>L,57'f^SW/Bk4n.F/`/p1aLmOAc;`I,a1=s;t*ArWF0nL*Sr4l+eh)XCjKjC2<Uf,$43t@7;<<]oI
%'FR=9pd`"uO3`DNF&3jIrmaB^H=^k-!];#VbXBO3Hl964-*"ipbahF9$g3C4JR?GM!k8g9Z#"&1je=BIs/2g7Kl@JMCg$^@=O@XW
%WZGW\l\QV)7IaVZ=lBK<6m^##og8RsZUcVQ6q]T<=V=k.0fpr\b@i'1bUSiP84SkCl"nKf3$D!f=(7BM:p=D>bpF;di<EnVX!n/:
%SM/Ue(]lBT+O)-;%AOcZ^]L!+a"Ui'%au(&?aS(`Xl[Sge]]irWcK6"?@iYW$$LP=6qK)0iMChfJ*[mnXFm\('tICAouYq0r?FC*
%4:Ie($Da#TV\Tkom"'eK4V!I8?o-G`%t]'.MLFsBR`;%r:C3=>U%pZI.t+UGZiEjC%55V.kX4iLL_G[t%%\"eDfDY7enspkgWs;:
%JTn6a)<o3X`,?FK8A^1`M$BqiptkKh$qFHbU#^Kg,i53`KNmF+]L@niRKA#?LdVPSG<@j<&?9Uf'(.VLKW",/Or/,qP#k*>D6gh:
%r3at`CQd>Pg6=.ZHZ>/:/Jt$oUO.Xg##?'ZO909bFK2g@?R(N='hYta#\UJ<FGGQTr6B+=7%BU2m0F#f$,^RpEFVNPe^Y'24$>*[
%lCcL<8^,YOO]Iac99p3/X0/P#!5P1Y)4g[>C!)Q_F%crHF2eP?QO_f$&/A<gX$r@T6]F7>m'A8.oC!i9_u60BI#-&Vejaic_WSpM
%&(NT6K=Z$TF\+sk9N(+B4;_?f8>=aNj8KCkhU,SOcOmCt:=WTM/,_b;QSk[h(WInA]LRE<Qdoima].NHh.;#30oY03ok"dEPs]Oo
%ONo;JB$a%#gB838E)#+t-mU\?.>uKY@IB4F*ULaVPlqQ;hdoYq]0i&D1r]7\E]1jS]'O?b@*"MLiju3UBmlp0%_=4DO7<9)lcpOo
%eYDW>;QRVX^k]nfNA]d.P8%\R`^9Ng*U"gil=FV!cB[,%os,A)XIXK:Dh<9cs/;[\#g&_t2!rKLj;NMU'nGPs>#<Z@"(sBcF`lS2
%i4`B2W5CD.`j)5<J9AL/CVuJ".2'E(J#PJ?_)R0e^p8ofk!Ih#&t-_"JAbRW6B3SK4FiR61S6uXYe[>`OrjMk=kCi?;f=;-kZ8fH
%.rlD^QP0CB1fGr*COG&aqg4irSqZ71.%Hs-#+H=aZrC%8AZ[S\[+%u&%=ng_;d*oXV"kjP9M6K#r&>*:KkCj<ab1O8g/$&?Gnp6i
%.A<If!7&&pqkM[)N&&"[(-Qp$13I)ij>+L.<DRd6oI-\h+S%[3&<B(++>fi(5#Z_g"lCM48S4YFh0UfB(-`/a<PXKF%H1Yb9Ws)E
%Q[G6YV/S=G=TF!fPRF3.4`p[.iBp'd03dud6i-tq]QhKgo21)-$sZ5n_L:*(Y,N7dQIr=3[L9"kl0'odHceSAr-l44qGbTHEn+0M
%53lWS7k'W?r'WXC]Ub',b%/oA"J<]<%7q+j5'o\L#&C_Y^??6jI5Q.k?ZljShQD.ZaX#scOcQ295VZ59nuA&\LT?R<?VpV<]hI7^
%(tuh7-@+KMar@r#5B/"YeSsDB(r):?F>,$MV5fpqK;Z;2ToGjprg*&/?O1S"TdSJ+0U2K`/J#Gt+t;sf(jZ[@!LIMfHXGuH%`BCN
%hG<sR"8pl-]J_dSj%hXcP"YT!/q0M/%t07b@m"5+]RE*sJnIX0Kk6Je9>&$Ej(LYRZi\#3)-[^9gpCGiH8oPmZh2QJ'^1u2GOmQ)
%@1PIS4qC*(AhlVE@^T<o("2/D`Io-eHQn9s;7#cp(i(6`\u"_[;)=&N>/>>lWSaJJX,I[eXZ)NiF.%L<6_OTZ);N7;UDgA?.4?uq
%5]+btU-f%#1R,'6l*HJ[jX<E@R?Y&FJdN_6+I_2$2,\LA>[mj.Za;WrS`^:a[?He*C'jHDC#4q4KRE%/<qrMj<@&Y!Z$>aCP@HkW
%h!V%`E9K!G&37*EYGP\HrR`OESrtO,U#4#7^oU9s+?kAY6/M)j6aQL&js56&3AL-($?4@4)aAuflI?S@M(X&"@n#18JZTq;Q,oaS
%G9hP<Y9uI'6o#_+^MVhiC@h"UHjbU!f]PF>f=fmu`'88+Uj"&67WbY'<]M;XO`kop"_`n4,On?`N$TKuH64ZXK\V\3NONK2%9^PL
%eWpM7#BqFSK*kq#/+:PAPY^g5_)i:rM,Bg4\?*eiHc<Sl=[9Z6jFu-h,9K\LhYl]/d;c_(,GfQ4TKI$PP1-Bb/?0dSmr&a*8Fh&#
%,!.Q&"@LmCrCDG3ltp#Kq-PMDq;)1ifT*n?m)n4Jn#]CdMYP=7WBUPWTp2K(D6D>Mk,3k.E(;)X?Tp!9*5Wr&-2G<6=+<T()afD.
%?NFEi$FOA]5R*:^lNe,cmERFJ/)a7e1q,]HmP7YHT?IYk`D@=d;#HN%l2[:56dDiSHKIN$/-ej-,+J;Dk=sk*",`aWs(9V0;=b=6
%'S:YE;<B&63E!mnN"XmfR)]#=K'VQ.8R!+nEY10qk+T>1r[]5;g=':h?U`rs4R25R=&UbDAC5!-:l<W?nMA+"<]B"eA397jFQ_"P
%L%:?Y2.G;O9'Z<t!kE"JrCg=`.9:U6(n<8t'5QJS#`LT&rQKTFO%3dC7?cs<M:CtoZ?$X\H!]4/N0oLEWB:HZ">Mp`45>e$)3``m
%P69O>9Sj>g,^=kP]0(=fQNV=??+*C%b7Y3qRU9!>GFMFM\U:->Uqf.%JTXVU.10rR5Mfl?]c"EG1mU^jR\Ebi%Y%6aR%eD,N_.(#
%oMZHn^Z[;i/GYSl7;6lj>eE<uEf*cI!7=UU18QCI+k?(T,q1l<Df&6t%X17T0^QcH9r<^fWt^8Y]I>EoF8e>IQ)#hE=o`PYlQ/K_
%"_pn5&M2jZ7o@ig-@KjNMkXT5iV?A:QA30CLO4l^UaQQs^%f29m71#!*X+6e(^WW&7%k1k4&I#UJg5rkWdl#u6'T#$C@+I4]=TYX
%;]H:XGbU/HQV=W0Dq]:t;60rj/^q&iM'C6g8OoqQE$n7#c=GWJS(])mA+1!dksh1:!(:<FWK4RGV/VtR&:R1gElOX`Khb-kOVEWc
%Kmaje.#IJ(LQGUc$H"b;A3Y?H/m%;r7&bcg[VmO.BMk9J^$i&(L\!SkE9'E<[,=a-X[LK31FGf*d0X%tS'f/6;<gkB;^d.6YqhaJ
%<%?I5Ok\::4sIV&/^&Ls)YaG@kW?um4u"R2EE.aJ4<d!ZS!@a)'\CEU4c1e)+[kpn,XGhcm-)ft%kcGo>/\Ee^.n<[`Yok@#P-Ut
%Ui7o>m-Ae]M%e%rKNi*M7SkS&kUl@X[#HX#W@mh:U@=#Hri9-u:,$c?0klPT+\S7-.S+BKQ>SCUW)T(FDNsCT#/tctOc],L0bMP-
%oGV;2(-iT^:?[MhWlK8#Y:lUB/$d]9O4B/?\kgr4,5SW$TWRA'gE/5t3)>Rn/#XD"719;jB^4?+(]kPOHcKK(IoBamKO0V5I8fce
%B[TL/HMOn&rH;0af(q<PPmhXT8*tM:h%VH]<!u6jjU^#Gm>GQ]kg_5'I0"f`LTDGa!-(aq3fk"e_.lk;TPH;r1@rY:PUcF[L^j]e
%aia05YT\RZ/M9?:#i3;eg1[Y.V;Bm0["mNGWm8J$N@B=3L3O/74X]=a8u)`qYs6/`7BQ,aAV&;:9Al0/a2^M8f:?ZaAgKhO2O%hc
%L"6=%9,2hB$^JLW99bD(]@i7PeG!)\.VGHQ>g#?NpYY%6GkUh=hAG`RFL&s?HTB%n!2!\h!\!jee>.fLCqf!>G1Wgl:4#W(#N`t)
%<Yg^/8Ru`pPQeb4LME`/nO&s<rZ1!^OQ6Cu+8OAH-Ru^?Pm&:%GX#^NKV*-%`\jKQ2C^7Pcu"PY646Tq]4UWf?3^R,a76"eNACH*
%Lp*c_7ANZnU^*H,`c5^qH$%+lNMkOW1]k]kOqlXgfQ2)l8MWAkY@T6Y4-H#U?YRR7Uu3COq<4kc6:F1lW)car&W#L4b<rTPrI7C*
%'<suDM>VGHoV3DG]c5iY\XKd#DVFD?rjK4XSDZ58/dcisOi[Ndb`^"$ke1GW4kVMg=6Y^&)Q*__Oqjn\b#PWpH@Kg_$MK!\[3_[j
%J,UAQ7,A6&KJ!QDMGua-=;dHk@i-OiGkZscC-,6)LbqUB8h%7rb*O"-cs@*d,9T&r'IY91G-rH@%sV*AFJ+YW!]f,H,>o7DYSp#*
%Df60HGj%jZJ]c=]B!C%M'@3HU/5ofqIP1OL<gK=\`]\A;o(Nt5in[EP+.gOU;R$%f#'X#eSJKR6QmOdVdK]c"-;P=X.[[1Vq&V9)
%RcVIi\(`Y1'C_Ar<hk7lD8\*Ph;Isel?lTub7IMQoI+""CicER\L<q.YeROfS/#lpgcb8ORlXVT8Y/^!P?f)\V\<t_ppcLaIks@d
%\.UeZ4[oBb5MQ)cIo87Y%@)So"5#:TLlF*P`^sgiO"dLVJBp*gT"A.+_jF''.^]AkE?L[rf$a1Y;8^0UDb/s0_,R8q\+\\*.WneV
%]Tji,Bs'0Q[irlPHpl@emE]`rQ?"i<Z5.[+"_>@.<^2&.[W$*2*)\Hm0BC9BReKIQnEpKrE#!Dje9K@qb,l]h,mC`86`-a)q<JfA
%1a`-D9c-^f)=T5M8\O2A"pR"3_Z@:X=rlt8-(<f2;oStRX%q_llq5<\M"#gg'!]g\^*cf.+KVrgQj5;^0<\<-7`cM`6Q&jk)B=4[
%2p_Rh%j(P,Fqo)\#)R7#ijY$-!e`D8j1`?_ai7'Y>Z_U-Bt&[PTRsK<Tr:R4Uek?^&BG*5E.Mi`M.g-<,+M9LKF%sq);WdC&pgkf
%&d,B*IlJPDnK8Hb&7V-Ed!6[4aq,E"dCuDDiDmb3(@]SSoAH25'7qK#?,[]Ahau7_BJt[:CNL&B@liA=f52'CK"T>`:>H1%Rq^gq
%E2DN&l>3%tb:/t7!4ED?S'#_f2u)C9o*K"/ap1CJe$u[frWo!XZ"Z3hPl.WuR'cMaF)XUrc<4!9D7><h`qo(bB3lj*;cO*(1+%@q
%]O4tD(dP.!b`ITM(>Tc>8-B`L?J1<H#P\&Vb>pYC"O=Rbe#n%RgWT]D3"1uJ??-!r$+n`tiP-gfXrT*TJpuPj\#@?$J-DR,oFg]6
%q199?]JP,P+l0rK:P'J;0gpL,1U*3-8).9c#^>l,SN6Ynhjf/'ONi\P;o9S?2V[T9>Tm'[Y0rcT[!W8kg^[)J#lA&V4;acgJte2<
%S=+c2EgWU<&PaQN)&O4Kj@ZY4G^rgA#\'L@]*Kob+PF8ZTN6`.KaH>R:#%NGm?_h1QslL7TeZ3fTtNW.k*`N.M:)Ui)hIC>F:=g8
%PI84[DUr>jgXJ5s-cYU1e/2q@YFTE^JDRpf>Dhr'PZOhag/,r9P+JYj[&UD/CG\^+I2M)e%A6?%2lT`^fMSYNX3,m-5QQ9>TldoP
%"hVG!nK!Q6[3:d/#:u>`&//A!!%NUNP:KfBf't5Ig%r;hdH(3ji]+fkP2ipHD/9,W5*:%OLO0bQSp4HmWEi"(m)M\"C#@I:rq=4(
%qFs]NH[/tuR$;-2081:(29)#bV!<cE+g+'tdIoac?W]j>cp-!XjRB.Vi,&`4QY#Z[gQtn&&/c,O+.406Ns60]+B`H5'HmO+m^i"T
%muBG46oe>hKm&,2KnqO#o("B\<TCOnpL$tBhaL<a44jY8$Q#54YKLK[NtfZ/I&Uaa#]=Va2\op.I]4\d'MO%j0i5PC]e?(i[%ZAF
%\s&]$ATu&gV?I*nD;=;MY(ONI#0,1nE?8GNTSn?P)0>1FMcj6VK@cZ(0t7'aob7+DHd$/_*Dhk/Tg%h>l42%t`t;/lOU6@'p#cTW
%cYs&D,'/)Z?@dF*l[gP+6h/Z#L*`!Jk.(/"OEbQ8M7TLf4V8$IBlfEO'695q#oCj3B`ONmheb("PLN6LaSEQ"XA0#[f-"_ki]aJQ
%+/C]3Bl#,oV%50CZc:;1rH-!`b;c4*I,9+*k[C?[9b/R07+N4`OrWI,R&1t)-b4#*k]'g:Je@k:1k8cX8kBb$QQPU/-u^#4I#2Qd
%=3sqhZcOA57M&(!(75u67+BSO6a.17h;"=0mT24gD[lt?ocZf"lqIc0d>'QJ`ferOagQ420,%c;i5o!QWOBu`bn;f"_p#i^C#@%5
%P$sG9>$;(<M2<;p8$Oj=!Y.N9=U:.VSDb"_b<X7Q-.GWHBGF_o.R.&'/\t[Yg<6&od(i;5~>
%AI9_PrivateDataEnd
